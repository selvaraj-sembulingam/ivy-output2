Search.setIndex({"docnames": ["compiler/compiler", "compiler/setting_up", "compiler/transpiler", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/data_classes/ivy.data_classes.array", "docs/data_classes/data_classes/ivy.data_classes.container", "docs/data_classes/data_classes/ivy.data_classes.nested_array", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise", "docs/data_classes/ivy.data_classes", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_dtype", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_inputs_to_native_shapes", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanquantile", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.strides", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save", "docs/helpers/ivy_tests.test_ivy.helpers.assertions", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing", "docs/helpers/ivy_tests.test_ivy.helpers.globals", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper", "docs/helpers/ivy_tests.test_ivy.helpers.structs", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers", "docs/ivy.stateful", "docs/ivy.utils", "docs/ivy_tests.test_ivy.helpers", "docs/stateful/ivy.stateful.activations", "docs/stateful/ivy.stateful.converters", "docs/stateful/ivy.stateful.helpers", "docs/stateful/ivy.stateful.initializers", "docs/stateful/ivy.stateful.layers", "docs/stateful/ivy.stateful.module", "docs/stateful/ivy.stateful.norms", "docs/stateful/ivy.stateful.optimizers", "docs/stateful/ivy.stateful.sequential", "docs/utils/ivy.utils.assertions", "docs/utils/ivy.utils.backend", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler", "docs/utils/ivy.utils.dynamic_import", "docs/utils/ivy.utils.exceptions", "docs/utils/ivy.utils.inspection", "docs/utils/ivy.utils.logging", "docs/utils/ivy.utils.profiler", "docs/utils/ivy.utils.verbosity", "index", "overview/background", "overview/background/ml_explosion", "overview/background/standardization", "overview/background/why_unify", "overview/contributing", "overview/contributing/applied_libraries", "overview/contributing/building_the_docs", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/operating_modes", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_framework", "overview/design/ivy_as_a_framework/ivy_array", "overview/design/ivy_as_a_framework/ivy_container", "overview/design/ivy_as_a_framework/ivy_stateful_api", "overview/design/ivy_as_a_transpiler", "overview/extensions", "overview/extensions/applied_libraries", "overview/faq", "overview/get_started", "overview/glossary", "overview/related_work", "overview/related_work/api_standards", "overview/related_work/compiler_infrastructure", "overview/related_work/exchange_formats", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ml_unifying_companies", "overview/related_work/multi_vendor_compiler_frameworks", "overview/related_work/vendor_specific_apis", "overview/related_work/vendor_specific_compilers", "overview/related_work/what_does_ivy_add", "overview/related_work/wrapper_frameworks"], "filenames": ["compiler/compiler.rst", "compiler/setting_up.rst", "compiler/transpiler.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/data_classes/ivy.data_classes.array.rst", "docs/data_classes/data_classes/ivy.data_classes.container.rst", "docs/data_classes/data_classes/ivy.data_classes.nested_array.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise.rst", "docs/data_classes/ivy.data_classes.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_handle_nestable.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_device.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_infer_dtype.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_inputs_to_native_shapes.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray_to_native_arrays_and_back.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta.rst", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson.rst", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanquantile.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.strides.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.lu_factor.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save.rst", "docs/helpers/ivy_tests.test_ivy.helpers.assertions.rst", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks.rst", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.globals.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper.rst", "docs/helpers/ivy_tests.test_ivy.helpers.structs.rst", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags.rst", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers.rst", "docs/ivy.stateful.rst", "docs/ivy.utils.rst", "docs/ivy_tests.test_ivy.helpers.rst", "docs/stateful/ivy.stateful.activations.rst", "docs/stateful/ivy.stateful.converters.rst", "docs/stateful/ivy.stateful.helpers.rst", "docs/stateful/ivy.stateful.initializers.rst", "docs/stateful/ivy.stateful.layers.rst", "docs/stateful/ivy.stateful.module.rst", "docs/stateful/ivy.stateful.norms.rst", "docs/stateful/ivy.stateful.optimizers.rst", "docs/stateful/ivy.stateful.sequential.rst", "docs/utils/ivy.utils.assertions.rst", "docs/utils/ivy.utils.backend.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler.rst", "docs/utils/ivy.utils.dynamic_import.rst", "docs/utils/ivy.utils.exceptions.rst", "docs/utils/ivy.utils.inspection.rst", "docs/utils/ivy.utils.logging.rst", "docs/utils/ivy.utils.profiler.rst", "docs/utils/ivy.utils.verbosity.rst", "index.rst", "overview/background.rst", "overview/background/ml_explosion.rst", "overview/background/standardization.rst", "overview/background/why_unify.rst", "overview/contributing.rst", "overview/contributing/applied_libraries.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/operating_modes.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_framework.rst", "overview/design/ivy_as_a_framework/ivy_array.rst", "overview/design/ivy_as_a_framework/ivy_container.rst", "overview/design/ivy_as_a_framework/ivy_stateful_api.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/extensions.rst", "overview/extensions/applied_libraries.rst", "overview/faq.rst", "overview/get_started.rst", "overview/glossary.rst", "overview/related_work.rst", "overview/related_work/api_standards.rst", "overview/related_work/compiler_infrastructure.rst", "overview/related_work/exchange_formats.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ml_unifying_companies.rst", "overview/related_work/multi_vendor_compiler_frameworks.rst", "overview/related_work/vendor_specific_apis.rst", "overview/related_work/vendor_specific_compilers.rst", "overview/related_work/what_does_ivy_add.rst", "overview/related_work/wrapper_frameworks.rst"], "titles": ["Graph Compiler", "Setting Up", "Transpiler", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Array", "Container", "Nested array", "Base", "Elementwise", "Data classes", "Functions", "gelu", "hardswish", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "cmp_is", "cmp_isnot", "for_loop", "if_else", "while_loop", "arange", "array", "asarray", "asarray_handle_nestable", "asarray_infer_device", "asarray_infer_dtype", "asarray_inputs_to_native_shapes", "asarray_to_native_arrays_and_back", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "frombuffer", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "tril", "triu", "triu_indices", "zeros", "zeros_like", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_hashable_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "handle_soft_device_variable", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_soft_device_mode", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "unset_soft_device_mode", "used_mem_on_dev", "abs", "acos", "acosh", "add", "angle", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "exp2", "expm1", "floor", "floor_divide", "fmin", "fmod", "gcd", "greater", "greater_equal", "imag", "isfinite", "isinf", "isnan", "isreal", "lcm", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logaddexp2", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "nan_to_num", "negative", "not_equal", "positive", "pow", "rad2deg", "real", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trapz", "trunc", "trunc_divide", "elu", "logit", "logsigmoid", "prelu", "relu6", "selu", "silu", "thresholded_relu", "eye_like", "hamming_window", "hann_window", "indices", "kaiser_bessel_derived_window", "kaiser_window", "ndenumerate", "ndindex", "tril_indices", "unsorted_segment_min", "vorbis_window", "allclose", "binarizer", "conj", "copysign", "count_nonzero", "diff", "fix", "float_power", "fmax", "frexp", "gradient", "hypot", "isclose", "ldexp", "lerp", "lgamma", "modf", "nansum", "nextafter", "signbit", "sinc", "xlogy", "zeta", "reduce", "bind_custom_gradient_function", "Activations", "Constants", "Creation", "Data type", "Device", "Elementwise", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Sparse array", "Statistical", "Utility", "adaptive_avg_pool1d", "adaptive_avg_pool2d", "area_interpolate", "avg_pool1d", "avg_pool2d", "avg_pool3d", "dct", "dft", "dropout1d", "dropout2d", "dropout3d", "embedding", "fft", "fft2", "generate_einsum_equation", "get_interpolate_kernel", "idct", "ifft", "ifftn", "interp", "interpolate", "max_pool1d", "max_pool2d", "max_pool3d", "max_unpool1d", "nearest_interpolate", "pool", "reduce_window", "rfftn", "adjoint", "cond", "diagflat", "eig", "eigh_tridiagonal", "eigvals", "kron", "matrix_exp", "multi_dot", "log_poisson_loss", "as_strided", "associative_scan", "atleast_1d", "atleast_2d", "atleast_3d", "broadcast_shapes", "concat_from_sequence", "dsplit", "dstack", "expand", "fill_diagonal", "flatten", "fliplr", "flipud", "heaviside", "hsplit", "hstack", "i0", "moveaxis", "pad", "put_along_axis", "rot90", "take_along_axis", "top_k", "unique_consecutive", "vsplit", "vstack", "batch_norm", "group_norm", "instance_norm", "l1_normalize", "l2_normalize", "lp_normalize", "bernoulli", "beta", "dirichlet", "gamma", "poisson", "unravel_index", "invert_permutation", "lexsort", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "bincount", "corrcoef", "cov", "cummax", "cummin", "histogram", "igamma", "median", "nanmean", "nanmedian", "nanquantile", "quantile", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_item", "get_num_dims", "get_referrers_recursive", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_ivy_nested_array", "is_native_array", "isin", "isscalar", "itemsize", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_item", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_precise_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "stable_divide", "stable_pow", "strides", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_min_base", "unset_min_denominator", "unset_nestable_mode", "unset_precise_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "unset_tmp_dir", "value_is_nan", "vmap", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "stop_gradient", "value_and_grad", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "lu_factor", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "msort", "searchsorted", "sort", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "load", "save", "Assertions", "Available frameworks", "Function testing", "Globals", "Hypothesis helpers", "Array helpers", "Dtype helpers", "General helpers", "Number helpers", "Pipeline helper", "Structs", "Test parameter flags", "Testing helpers", "Framework classes", "Utils", "Testing", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Module", "Norms", "Optimizers", "Sequential", "Assertions", "Backend", "Ast helpers", "Handler", "Sub backend handler", "Dynamic import", "Exceptions", "Inspection", "Logging", "Profiler", "Verbosity", "Home", "Background", "ML Explosion", "Standardization", "Why Unify?", "Contributing", "Applied Libraries", "Building the Docs", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy Tests", "Navigating the Code", "Operating Modes", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Extensions", "Applied Libraries", "FAQ", "Get Started", "Glossary", "Related Work", "API Standards", "Compiler Infrastructure", "Exchange Formats", "Frameworks", "Graph Tracers", "ML-Unifying Companies", "Multi-Vendor Compiler Frameworks", "Vendor-Specific APIs", "Vendor-Specific Compilers", "What does Ivy Add?", "Wrapper Frameworks"], "terms": {"warn": [0, 2, 669, 683, 706], "The": [0, 2, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 81, 82, 84, 86, 89, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 111, 113, 114, 115, 117, 119, 120, 121, 124, 125, 127, 128, 130, 131, 132, 133, 139, 140, 141, 142, 143, 145, 146, 147, 148, 153, 154, 155, 156, 158, 159, 160, 161, 162, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 286, 288, 291, 292, 294, 295, 296, 297, 300, 301, 302, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 328, 329, 330, 331, 332, 334, 335, 336, 338, 339, 340, 341, 346, 347, 348, 349, 350, 351, 352, 353, 355, 357, 358, 359, 360, 363, 365, 366, 367, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 385, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 426, 428, 430, 431, 432, 434, 435, 436, 437, 438, 441, 443, 446, 447, 451, 452, 455, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 480, 482, 483, 486, 488, 489, 490, 491, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 638, 641, 643, 644, 648, 653, 654, 655, 656, 657, 658, 659, 664, 672, 673, 674, 676, 677, 678, 679, 681, 682, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 703, 704, 705, 707, 708, 709, 712, 713, 714, 716, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731], "transpil": [0, 1, 681, 695, 702, 708, 709, 710, 718, 719, 724, 730, 731], "ar": [0, 1, 2, 4, 5, 8, 9, 10, 14, 16, 18, 19, 20, 26, 28, 31, 32, 33, 37, 39, 41, 42, 43, 48, 49, 69, 84, 86, 89, 94, 148, 153, 155, 160, 184, 186, 187, 190, 194, 215, 216, 220, 225, 226, 230, 232, 237, 238, 239, 258, 259, 261, 262, 264, 265, 266, 267, 268, 273, 278, 281, 284, 287, 288, 289, 290, 291, 292, 294, 295, 297, 298, 299, 300, 301, 303, 306, 307, 309, 315, 316, 317, 318, 321, 326, 328, 336, 340, 341, 349, 350, 351, 358, 359, 360, 361, 366, 367, 374, 376, 380, 381, 382, 383, 384, 394, 399, 400, 401, 403, 404, 407, 408, 409, 424, 429, 433, 444, 445, 453, 463, 474, 484, 496, 498, 499, 501, 502, 503, 504, 506, 508, 510, 511, 512, 526, 527, 529, 532, 536, 537, 538, 542, 543, 545, 548, 552, 553, 557, 558, 559, 564, 565, 568, 572, 574, 584, 589, 594, 595, 596, 604, 605, 606, 609, 610, 611, 612, 614, 616, 636, 638, 641, 642, 643, 644, 648, 654, 655, 657, 660, 661, 669, 670, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731], "publicli": [0, 2], "avail": [0, 2, 10, 33, 143, 149, 151, 152, 163, 297, 367, 416, 498, 501, 642, 672, 674, 682, 683, 689, 690, 691, 692, 694, 695, 702, 704, 707, 717, 718, 729, 730], "yet": [0, 2, 287, 289, 290, 298, 299, 303, 307, 681, 682, 717], "so": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 77, 79, 81, 82, 84, 86, 87, 88, 89, 91, 92, 93, 96, 100, 101, 102, 115, 119, 120, 127, 144, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 291, 304, 306, 311, 312, 313, 314, 316, 317, 318, 320, 324, 325, 326, 329, 330, 331, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 407, 408, 410, 411, 414, 415, 416, 417, 418, 419, 422, 423, 426, 428, 430, 431, 432, 434, 435, 436, 438, 439, 441, 446, 447, 460, 461, 462, 463, 465, 467, 468, 480, 482, 483, 486, 488, 489, 490, 491, 503, 508, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 530, 531, 532, 534, 535, 536, 537, 538, 540, 542, 543, 548, 549, 550, 552, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 594, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 672, 674, 675, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 717, 724, 725, 726, 728], "certain": [0, 1, 2, 26, 69, 85, 86, 496, 682, 683, 685, 691, 698, 704, 707, 717, 728], "part": [0, 2, 5, 8, 9, 31, 32, 37, 92, 93, 94, 200, 204, 227, 258, 277, 288, 291, 295, 297, 306, 341, 366, 403, 496, 499, 504, 537, 538, 638, 657, 672, 678, 681, 683, 685, 688, 691, 696, 698, 702, 704, 705, 707, 709, 710, 714, 716, 717, 722, 724, 729, 730, 731], "thi": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 69, 70, 71, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 101, 102, 112, 115, 118, 119, 120, 122, 126, 127, 141, 144, 154, 160, 161, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 303, 306, 307, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 324, 325, 326, 329, 330, 331, 332, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 407, 408, 410, 411, 414, 415, 416, 417, 418, 419, 422, 423, 426, 428, 430, 431, 432, 434, 435, 436, 438, 439, 441, 446, 447, 455, 460, 461, 462, 463, 465, 467, 468, 480, 481, 482, 483, 484, 486, 488, 489, 490, 491, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 585, 589, 590, 595, 596, 600, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 638, 639, 641, 642, 644, 652, 653, 655, 656, 657, 658, 659, 660, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731], "doc": [0, 2, 32, 94, 258, 288, 396, 496, 672, 677, 680, 681, 684, 693, 694, 696, 697, 704, 709, 712, 713], "won": [0, 2, 675, 676, 682, 683, 689, 691, 714, 718], "t": [0, 1, 2, 9, 13, 24, 32, 36, 47, 48, 271, 285, 291, 293, 295, 341, 432, 463, 484, 501, 502, 503, 508, 527, 528, 591, 672, 675, 676, 678, 679, 681, 682, 683, 684, 686, 687, 689, 690, 691, 693, 696, 699, 700, 701, 704, 705, 707, 709, 711, 712, 713, 714, 717, 718, 722, 724, 726], "work": [0, 1, 2, 9, 32, 306, 403, 508, 590, 591, 595, 600, 601, 672, 676, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 701, 702, 703, 704, 705, 708, 709, 711, 713, 714, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731], "expect": [0, 2, 9, 14, 15, 32, 38, 126, 194, 238, 294, 315, 336, 406, 497, 499, 501, 505, 547, 561, 654, 655, 656, 657, 672, 676, 683, 685, 691, 695, 696, 699, 701, 703, 704, 707, 717, 718], "now": [0, 2, 80, 91, 96, 496, 656, 657, 672, 676, 682, 685, 686, 687, 688, 689, 690, 691, 697, 699, 702, 703, 704, 705, 707, 711, 712, 714, 716, 717, 724], "when": [0, 1, 2, 4, 5, 6, 8, 9, 14, 15, 18, 19, 22, 26, 28, 29, 31, 32, 37, 38, 41, 42, 45, 49, 89, 99, 170, 187, 192, 194, 210, 220, 225, 238, 239, 243, 286, 294, 295, 297, 300, 301, 306, 315, 328, 341, 367, 374, 376, 381, 401, 403, 432, 448, 455, 461, 496, 497, 499, 501, 503, 504, 505, 506, 508, 510, 511, 514, 516, 529, 545, 550, 561, 562, 563, 571, 583, 584, 593, 594, 595, 604, 605, 606, 609, 610, 612, 613, 625, 627, 629, 631, 641, 644, 654, 655, 657, 658, 664, 674, 675, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 709, 711, 712, 714, 717, 722, 724, 727, 728, 729, 730], "we": [0, 1, 2, 9, 14, 15, 24, 32, 37, 38, 47, 285, 293, 297, 370, 415, 463, 484, 485, 487, 492, 501, 502, 504, 505, 545, 561, 654, 657, 664, 672, 673, 674, 675, 676, 677, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 707, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 724, 725, 729, 730], "call": [0, 2, 9, 24, 29, 32, 47, 49, 66, 119, 120, 160, 295, 306, 345, 401, 455, 469, 484, 485, 487, 495, 498, 501, 502, 504, 508, 550, 583, 589, 593, 594, 638, 654, 656, 657, 659, 664, 672, 675, 681, 683, 686, 687, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 701, 702, 703, 704, 705, 707, 709, 711, 712, 713, 714, 717, 724, 725, 728], "an": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 69, 70, 71, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 112, 115, 118, 122, 126, 127, 157, 161, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 263, 266, 267, 272, 276, 281, 286, 288, 291, 294, 295, 296, 297, 300, 301, 304, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 324, 326, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 340, 341, 342, 346, 348, 349, 350, 351, 353, 354, 356, 362, 365, 366, 367, 368, 371, 372, 374, 375, 376, 380, 381, 383, 386, 387, 392, 393, 394, 395, 396, 397, 398, 401, 408, 410, 411, 419, 422, 426, 428, 430, 431, 432, 434, 435, 436, 437, 438, 441, 447, 450, 459, 463, 467, 468, 469, 481, 484, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 589, 602, 604, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 638, 641, 643, 644, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 672, 675, 676, 678, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 709, 711, 712, 713, 714, 716, 717, 719, 720, 722, 723, 724, 725, 727, 728, 730, 731], "ivi": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 675, 676, 677, 679, 680, 682, 684, 685, 687, 689, 691, 692, 694, 696, 697, 698, 699, 701, 707, 708, 715, 717, 718, 719, 720, 731], "function": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 70, 71, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 101, 102, 112, 113, 114, 115, 118, 119, 120, 122, 126, 127, 144, 146, 147, 160, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 306, 307, 311, 312, 313, 314, 316, 317, 318, 320, 324, 325, 326, 329, 330, 331, 332, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 428, 430, 431, 432, 434, 435, 436, 438, 439, 441, 442, 445, 446, 447, 450, 453, 455, 457, 460, 461, 462, 463, 465, 467, 468, 469, 474, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 589, 590, 591, 593, 594, 595, 596, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 639, 641, 642, 643, 644, 648, 652, 655, 657, 664, 668, 672, 674, 682, 683, 684, 685, 686, 687, 688, 690, 693, 694, 701, 708, 710, 711, 712, 713, 715, 716, 719, 721, 722, 723, 724, 725, 730, 731], "i": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 69, 70, 71, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 127, 139, 141, 143, 144, 146, 147, 149, 151, 154, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 258, 259, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 291, 292, 294, 295, 296, 297, 300, 301, 304, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 321, 324, 326, 328, 329, 330, 331, 332, 335, 336, 339, 340, 341, 345, 346, 349, 350, 351, 353, 354, 358, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 392, 393, 394, 395, 396, 397, 399, 400, 401, 403, 404, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 426, 428, 430, 431, 432, 434, 435, 436, 437, 438, 439, 442, 443, 446, 447, 448, 455, 459, 460, 461, 463, 465, 467, 468, 469, 480, 481, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 638, 639, 641, 642, 643, 644, 648, 653, 654, 655, 656, 657, 658, 659, 661, 664, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731], "alwai": [0, 5, 6, 9, 10, 16, 28, 29, 32, 39, 71, 99, 170, 220, 268, 291, 297, 349, 350, 351, 354, 356, 358, 359, 360, 362, 365, 368, 372, 425, 432, 497, 499, 501, 506, 567, 568, 569, 571, 573, 574, 576, 578, 643, 672, 681, 682, 683, 686, 687, 689, 691, 694, 696, 697, 698, 701, 702, 703, 704, 705, 707, 709, 717], "small": [0, 2, 8, 9, 14, 17, 31, 32, 37, 40, 187, 194, 220, 221, 261, 273, 291, 300, 374, 375, 376, 499, 504, 509, 545, 548, 550, 602, 655, 658, 672, 682, 690, 693, 698, 703, 707, 709, 713, 717, 725], "perform": [0, 2, 5, 9, 13, 14, 22, 23, 28, 32, 33, 36, 37, 45, 46, 58, 62, 85, 86, 157, 165, 187, 220, 241, 266, 284, 291, 292, 294, 297, 304, 306, 315, 316, 317, 318, 320, 321, 325, 326, 334, 348, 387, 395, 396, 415, 416, 417, 430, 431, 432, 448, 457, 493, 496, 498, 499, 501, 503, 504, 507, 508, 514, 515, 526, 528, 552, 554, 559, 580, 581, 582, 590, 591, 622, 623, 632, 633, 636, 676, 685, 686, 687, 689, 691, 692, 693, 697, 698, 699, 701, 702, 703, 704, 705, 707, 709, 712, 717, 721, 724, 725, 726, 727, 728, 729, 731], "hit": [0, 704, 709], "due": [0, 2, 220, 230, 499, 675, 678, 682, 685, 690, 695, 701, 702, 724], "ad": [0, 9, 16, 32, 39, 47, 187, 220, 261, 273, 291, 300, 374, 375, 376, 460, 461, 499, 501, 504, 506, 537, 538, 567, 656, 660, 672, 675, 680, 681, 682, 683, 685, 686, 688, 689, 690, 691, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 713, 717, 723, 724], "python": [0, 9, 18, 32, 41, 69, 154, 166, 194, 229, 301, 380, 381, 382, 383, 384, 481, 496, 498, 499, 501, 510, 603, 604, 605, 606, 608, 664, 673, 674, 675, 680, 682, 683, 685, 688, 689, 690, 691, 695, 702, 704, 709, 711, 712, 717, 719, 721, 724, 725, 726, 730, 731], "wrap": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 77, 79, 81, 82, 84, 86, 87, 88, 89, 91, 92, 93, 96, 100, 101, 102, 115, 119, 120, 127, 144, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 297, 306, 311, 312, 313, 314, 316, 317, 318, 320, 324, 325, 326, 329, 330, 331, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 422, 423, 426, 428, 430, 431, 432, 434, 435, 436, 438, 439, 441, 446, 447, 457, 460, 461, 462, 463, 465, 467, 468, 478, 480, 482, 483, 486, 488, 489, 490, 491, 501, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 530, 531, 532, 534, 535, 536, 537, 538, 540, 542, 543, 548, 549, 550, 552, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 638, 672, 684, 685, 686, 687, 689, 690, 691, 692, 694, 695, 697, 698, 701, 702, 704, 709, 711, 714, 717, 719, 720, 724, 725, 730, 731], "overhead": [0, 717, 727], "becom": [0, 9, 32, 268, 291, 297, 351, 506, 564, 664, 674, 676, 683, 689, 693, 695, 701, 717], "increasingli": [0, 693], "notic": [0, 681, 686, 690, 696, 704, 707], "larg": [0, 8, 9, 31, 32, 170, 187, 194, 220, 221, 306, 394, 499, 504, 550, 682, 683, 690, 712, 724], "model": [0, 2, 187, 220, 499, 672, 712, 713, 719, 722, 723, 724, 725, 726, 727, 728, 730, 731], "multipl": [0, 8, 9, 14, 17, 22, 23, 26, 31, 32, 33, 34, 37, 39, 40, 45, 46, 82, 181, 205, 212, 218, 219, 220, 222, 294, 295, 297, 304, 314, 321, 324, 326, 345, 354, 362, 372, 387, 404, 442, 482, 483, 486, 488, 490, 491, 496, 499, 501, 502, 503, 504, 506, 509, 511, 514, 515, 518, 519, 520, 521, 531, 540, 542, 543, 564, 567, 572, 573, 602, 609, 610, 625, 626, 627, 628, 629, 630, 631, 632, 633, 656, 672, 676, 681, 683, 686, 687, 689, 693, 695, 696, 698, 701, 702, 703, 704, 707, 709, 717, 722, 723, 724, 731], "improv": [0, 676, 683, 691, 697, 698, 707, 709, 719, 722, 724, 726, 727], "remov": [0, 2, 14, 26, 37, 504, 506, 507, 508, 535, 542, 556, 574, 580, 581, 597, 669, 672, 681, 687, 688, 690, 691, 694, 698, 704, 707, 714, 724], "extra": [0, 2, 26, 49, 66, 481, 495, 501, 686, 691, 693, 699, 701, 702, 703, 707, 709, 721, 726], "around": [0, 26, 49, 297, 366, 367, 683, 686, 688, 697, 698, 702, 705, 711, 717, 719, 722, 724, 731], "each": [0, 2, 3, 5, 6, 8, 9, 10, 11, 13, 14, 16, 19, 20, 22, 26, 29, 31, 32, 33, 34, 36, 37, 39, 42, 43, 45, 48, 49, 56, 59, 60, 61, 63, 66, 87, 100, 112, 115, 160, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 246, 247, 248, 249, 253, 259, 263, 268, 272, 276, 281, 283, 286, 288, 291, 294, 295, 297, 301, 304, 306, 311, 312, 313, 316, 317, 318, 321, 329, 330, 331, 332, 335, 336, 340, 341, 349, 350, 351, 353, 354, 359, 360, 361, 362, 364, 365, 366, 371, 372, 380, 387, 392, 393, 394, 395, 396, 397, 404, 407, 415, 422, 423, 439, 462, 481, 483, 484, 486, 488, 489, 490, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 506, 508, 510, 511, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 529, 531, 532, 533, 536, 537, 538, 542, 544, 545, 546, 548, 550, 551, 552, 557, 566, 570, 572, 573, 575, 577, 579, 589, 596, 603, 612, 614, 615, 617, 623, 624, 631, 641, 643, 656, 658, 659, 660, 674, 675, 676, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 709, 711, 712, 714, 716, 717, 720, 721, 725, 727, 730], "take": [0, 2, 9, 14, 16, 22, 32, 39, 66, 67, 68, 89, 182, 227, 234, 245, 286, 294, 297, 312, 320, 325, 330, 358, 369, 395, 396, 495, 496, 499, 503, 504, 506, 507, 529, 542, 546, 571, 582, 622, 641, 648, 655, 656, 672, 676, 677, 681, 682, 683, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 701, 702, 703, 704, 707, 709, 711, 713, 714, 717, 718, 721, 722, 730], "ani": [0, 1, 2, 4, 5, 7, 8, 9, 10, 14, 23, 24, 28, 30, 31, 32, 33, 46, 47, 48, 49, 66, 67, 68, 69, 70, 71, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 102, 103, 118, 122, 126, 161, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 190, 192, 193, 194, 198, 199, 200, 201, 202, 203, 207, 209, 210, 211, 212, 214, 215, 216, 217, 220, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 258, 263, 266, 288, 291, 294, 295, 297, 300, 306, 311, 312, 313, 314, 316, 317, 318, 324, 329, 330, 331, 332, 336, 341, 357, 366, 374, 375, 376, 394, 397, 400, 401, 404, 414, 415, 416, 417, 418, 422, 426, 428, 430, 434, 436, 437, 454, 461, 468, 469, 475, 481, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 560, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 586, 589, 590, 592, 593, 600, 602, 606, 609, 610, 612, 613, 614, 615, 616, 617, 618, 621, 625, 626, 627, 628, 629, 630, 631, 632, 636, 639, 643, 652, 653, 655, 656, 657, 658, 659, 660, 664, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731], "framework": [0, 2, 4, 10, 117, 139, 149, 152, 163, 413, 429, 433, 463, 466, 497, 498, 501, 508, 585, 636, 638, 642, 648, 653, 659, 664, 674, 675, 676, 681, 682, 684, 685, 686, 687, 688, 690, 691, 692, 693, 695, 697, 698, 699, 701, 702, 704, 705, 707, 708, 709, 711, 714, 716, 717, 718, 719, 720, 721, 722, 723, 725, 728], "specif": [0, 2, 7, 9, 10, 30, 32, 33, 43, 127, 158, 161, 194, 215, 216, 225, 301, 384, 415, 416, 417, 443, 497, 498, 499, 501, 504, 506, 507, 510, 513, 514, 537, 538, 554, 575, 580, 581, 582, 603, 617, 620, 625, 626, 627, 629, 638, 657, 664, 668, 672, 674, 681, 682, 683, 685, 686, 687, 688, 689, 691, 692, 695, 696, 697, 698, 701, 702, 703, 704, 705, 707, 709, 710, 711, 713, 714, 716, 717, 718, 719, 720, 722, 723, 725, 726, 727, 731], "backend": [0, 2, 4, 5, 9, 10, 14, 26, 32, 33, 37, 48, 77, 113, 114, 117, 139, 146, 147, 149, 152, 163, 295, 341, 401, 408, 420, 421, 429, 432, 433, 443, 463, 466, 496, 497, 498, 501, 504, 552, 636, 638, 639, 642, 643, 645, 647, 653, 657, 659, 663, 664, 672, 674, 680, 682, 683, 684, 685, 686, 690, 692, 693, 694, 695, 697, 698, 699, 701, 702, 703, 704, 706, 707, 708, 710, 711, 714, 719, 724, 727, 730, 731], "composit": [0, 113, 114, 146, 147, 239, 295, 343, 420, 421, 497, 498, 499, 501, 642, 644, 681, 684, 686, 687, 689, 691, 699, 701, 702, 703, 704, 707, 709, 713, 714, 717, 719, 725], "both": [0, 2, 5, 8, 9, 10, 14, 28, 31, 32, 33, 37, 69, 70, 71, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 102, 118, 122, 125, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 190, 192, 193, 194, 198, 199, 200, 201, 202, 203, 207, 209, 210, 211, 212, 214, 215, 216, 217, 220, 222, 223, 224, 225, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 263, 264, 266, 268, 273, 288, 291, 294, 295, 297, 301, 306, 311, 312, 313, 314, 316, 317, 318, 324, 329, 330, 331, 332, 341, 361, 366, 380, 394, 397, 422, 426, 428, 430, 439, 468, 491, 492, 496, 497, 499, 501, 502, 503, 504, 506, 508, 509, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 558, 559, 560, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 602, 609, 610, 612, 613, 614, 615, 616, 617, 618, 621, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 656, 672, 681, 683, 687, 689, 690, 691, 692, 693, 694, 695, 697, 698, 701, 702, 704, 707, 709, 711, 712, 713, 714, 716, 717, 724, 727, 729, 730, 731], "produc": [0, 9, 10, 13, 32, 36, 245, 252, 286, 288, 503, 530, 641, 681, 691, 703, 704, 705, 725, 727], "simplifi": [0, 675, 695, 702, 709, 710, 713, 720, 722, 723, 724, 727, 730, 731], "execut": [0, 67, 68, 469, 495, 498, 501, 682, 683, 688, 689, 690, 691, 693, 695, 699, 701, 704, 707, 709, 711, 714, 717, 719, 720, 724, 725, 726, 727, 728, 730], "comput": [0, 2, 3, 8, 9, 10, 11, 13, 14, 15, 20, 22, 25, 26, 31, 32, 33, 34, 36, 37, 38, 45, 58, 62, 160, 170, 177, 180, 182, 187, 188, 189, 194, 195, 196, 198, 199, 205, 206, 207, 214, 215, 216, 217, 219, 220, 223, 228, 229, 243, 251, 254, 255, 259, 263, 269, 271, 272, 276, 278, 282, 283, 284, 285, 286, 288, 291, 292, 293, 294, 295, 296, 297, 300, 304, 306, 311, 312, 313, 314, 315, 320, 321, 324, 325, 326, 329, 330, 331, 332, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 361, 364, 370, 374, 376, 386, 394, 395, 396, 397, 398, 399, 400, 401, 403, 409, 410, 411, 454, 475, 482, 484, 485, 487, 491, 492, 498, 499, 501, 502, 503, 504, 505, 506, 508, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 531, 532, 536, 537, 538, 541, 542, 543, 545, 547, 549, 551, 552, 554, 556, 558, 559, 561, 562, 563, 567, 589, 614, 615, 616, 617, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 638, 643, 656, 658, 672, 675, 676, 682, 689, 690, 691, 698, 700, 702, 704, 706, 707, 709, 712, 717, 719, 720, 722, 724, 725, 727, 728, 730], "compos": [0, 9, 32, 294, 308, 309, 654, 682, 689, 702, 704, 717, 724, 731], "from": [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 13, 14, 16, 18, 19, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 41, 42, 45, 46, 47, 49, 69, 71, 79, 81, 82, 83, 84, 87, 88, 91, 94, 96, 102, 120, 126, 127, 143, 148, 153, 159, 160, 186, 194, 195, 222, 226, 227, 234, 238, 250, 258, 259, 264, 268, 269, 271, 272, 283, 288, 291, 294, 297, 301, 306, 316, 317, 318, 332, 336, 354, 362, 366, 368, 369, 371, 372, 380, 381, 382, 383, 384, 395, 396, 409, 414, 422, 423, 425, 445, 455, 465, 481, 483, 484, 488, 496, 497, 498, 499, 501, 502, 503, 504, 506, 507, 508, 510, 511, 512, 514, 515, 517, 525, 526, 532, 535, 552, 556, 557, 558, 565, 568, 571, 574, 580, 581, 582, 584, 595, 596, 597, 603, 604, 605, 606, 610, 613, 614, 616, 622, 623, 628, 629, 630, 631, 632, 633, 636, 638, 641, 642, 643, 644, 648, 653, 654, 655, 656, 657, 659, 664, 674, 675, 676, 677, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 707, 709, 710, 711, 712, 713, 714, 716, 717, 719, 720, 722, 723, 724, 725, 726, 728, 729, 730, 731], "onli": [0, 2, 5, 8, 9, 14, 16, 18, 26, 28, 31, 32, 37, 39, 41, 48, 86, 125, 126, 155, 215, 216, 221, 227, 271, 291, 294, 295, 297, 301, 306, 315, 328, 341, 349, 350, 351, 358, 380, 381, 397, 409, 496, 497, 498, 499, 501, 503, 504, 506, 508, 510, 511, 513, 514, 529, 542, 549, 552, 568, 571, 583, 584, 590, 591, 593, 594, 595, 600, 601, 604, 605, 606, 609, 610, 620, 626, 629, 639, 641, 642, 644, 655, 656, 657, 659, 672, 674, 677, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 709, 711, 712, 713, 714, 715, 717, 723, 724, 725, 730, 731], "which": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 69, 70, 71, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 102, 104, 110, 112, 115, 117, 120, 127, 139, 144, 148, 153, 155, 158, 159, 160, 161, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 246, 247, 248, 249, 250, 258, 259, 261, 262, 263, 264, 265, 266, 268, 270, 272, 273, 274, 275, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 291, 292, 293, 294, 295, 296, 297, 300, 301, 304, 306, 315, 316, 317, 318, 320, 321, 325, 326, 335, 336, 339, 341, 346, 349, 350, 351, 353, 367, 368, 369, 370, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 394, 395, 396, 397, 399, 400, 401, 403, 404, 405, 407, 408, 410, 411, 414, 415, 416, 417, 419, 422, 423, 424, 425, 426, 428, 430, 431, 432, 434, 435, 438, 439, 444, 445, 446, 447, 460, 461, 463, 465, 467, 468, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 526, 527, 529, 530, 531, 532, 534, 535, 537, 538, 540, 542, 543, 545, 546, 547, 549, 550, 551, 552, 556, 558, 559, 561, 562, 563, 564, 565, 567, 568, 570, 571, 572, 573, 574, 575, 578, 579, 588, 589, 590, 591, 596, 598, 599, 600, 601, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 638, 641, 642, 643, 653, 654, 655, 656, 657, 658, 659, 660, 664, 668, 672, 674, 675, 676, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731], "result": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 69, 70, 71, 77, 78, 79, 80, 81, 83, 84, 85, 86, 89, 90, 91, 92, 93, 95, 96, 99, 101, 126, 127, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 291, 292, 294, 295, 296, 297, 300, 301, 302, 304, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 343, 344, 345, 346, 348, 353, 356, 358, 359, 360, 361, 364, 365, 367, 368, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 392, 394, 395, 396, 397, 398, 399, 400, 401, 403, 410, 411, 415, 416, 417, 422, 423, 432, 439, 446, 447, 482, 483, 484, 486, 488, 489, 490, 491, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 579, 583, 586, 589, 590, 592, 596, 600, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 638, 643, 648, 656, 661, 670, 672, 683, 685, 686, 688, 689, 690, 691, 693, 694, 697, 699, 700, 701, 702, 703, 704, 705, 709, 712, 717, 725, 727], "code": [0, 2, 7, 8, 26, 30, 31, 49, 161, 207, 306, 401, 408, 416, 417, 432, 446, 463, 498, 501, 503, 504, 506, 525, 544, 545, 546, 575, 670, 672, 674, 675, 676, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 695, 697, 698, 699, 701, 702, 703, 704, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 719, 720, 722, 723, 724, 725, 727, 728, 729, 730, 731], "all": [0, 2, 4, 5, 9, 10, 13, 14, 16, 18, 23, 24, 26, 27, 28, 31, 32, 33, 36, 37, 39, 41, 46, 47, 69, 82, 89, 92, 93, 94, 148, 155, 187, 191, 219, 220, 258, 266, 288, 291, 294, 295, 297, 306, 326, 335, 336, 341, 366, 371, 400, 404, 407, 424, 444, 445, 460, 467, 468, 481, 484, 496, 498, 499, 501, 502, 503, 504, 506, 507, 508, 510, 511, 515, 526, 528, 529, 532, 545, 550, 551, 554, 559, 568, 572, 574, 580, 581, 582, 583, 584, 585, 594, 595, 596, 597, 603, 606, 611, 636, 638, 641, 642, 643, 644, 654, 655, 656, 661, 664, 668, 672, 674, 675, 676, 677, 678, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 730, 731], "don": [0, 24, 47, 672, 676, 681, 682, 683, 690, 691, 696, 700, 704, 707, 713, 717], "contribut": [0, 9, 32, 306, 397, 678, 680, 681, 682, 683, 688, 696, 702, 709, 718, 728], "output": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 69, 70, 71, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 99, 101, 126, 160, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 288, 291, 293, 294, 295, 296, 297, 300, 301, 302, 304, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 328, 329, 330, 331, 332, 334, 336, 337, 338, 339, 341, 343, 344, 345, 346, 347, 353, 356, 358, 359, 360, 361, 364, 365, 367, 368, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 392, 394, 395, 396, 397, 398, 399, 400, 401, 403, 409, 410, 411, 415, 416, 417, 419, 423, 432, 439, 446, 447, 448, 470, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 579, 583, 596, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 655, 656, 672, 679, 682, 683, 684, 685, 686, 688, 689, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 711, 713, 714, 717, 719, 725], "print": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 55, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 77, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 99, 100, 101, 102, 104, 110, 111, 112, 113, 114, 117, 119, 120, 122, 127, 139, 140, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 158, 159, 161, 162, 163, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 256, 257, 258, 261, 263, 275, 276, 281, 284, 286, 288, 291, 294, 295, 296, 297, 306, 311, 312, 313, 314, 316, 317, 319, 324, 326, 329, 330, 331, 332, 334, 336, 341, 345, 346, 352, 353, 363, 366, 367, 368, 369, 370, 373, 378, 379, 394, 395, 396, 397, 403, 404, 406, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 422, 423, 425, 426, 428, 430, 431, 432, 434, 435, 436, 438, 442, 445, 446, 447, 450, 451, 452, 455, 458, 459, 460, 463, 465, 467, 468, 469, 472, 473, 476, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 525, 526, 527, 530, 531, 532, 533, 535, 537, 538, 540, 542, 543, 545, 546, 547, 548, 550, 552, 553, 554, 556, 559, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 584, 586, 589, 590, 591, 592, 594, 600, 601, 602, 603, 604, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 654, 664, 670, 672, 682, 683, 689, 693, 703, 704, 706, 709, 711, 712, 713], "statement": [0, 2, 690, 701, 704, 707, 717], "logger": 0, "etc": [0, 5, 9, 18, 20, 24, 28, 32, 41, 47, 77, 85, 86, 89, 294, 301, 321, 326, 336, 380, 381, 383, 384, 496, 510, 512, 603, 604, 605, 606, 614, 615, 616, 617, 641, 644, 655, 656, 657, 658, 659, 660, 676, 681, 682, 683, 685, 686, 688, 689, 691, 693, 695, 697, 702, 703, 704, 705, 709, 711, 712, 717, 719, 722, 724, 730], "ha": [0, 1, 5, 9, 14, 16, 20, 22, 26, 29, 32, 33, 37, 39, 43, 45, 87, 143, 167, 187, 190, 192, 194, 204, 220, 222, 225, 227, 230, 232, 233, 237, 259, 288, 294, 296, 297, 306, 328, 346, 369, 371, 393, 395, 396, 398, 428, 496, 498, 499, 503, 504, 506, 511, 512, 514, 529, 542, 543, 551, 552, 554, 556, 559, 567, 574, 612, 615, 616, 617, 622, 623, 626, 628, 629, 630, 631, 641, 644, 654, 664, 674, 675, 676, 681, 683, 685, 687, 688, 689, 690, 691, 692, 693, 694, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 710, 711, 713, 714, 716, 717, 720, 723, 724, 726, 727, 730], "": [0, 1, 2, 5, 9, 10, 11, 14, 22, 32, 34, 37, 45, 66, 87, 92, 93, 113, 114, 143, 146, 147, 159, 194, 229, 261, 263, 271, 273, 279, 282, 284, 291, 292, 294, 296, 297, 300, 301, 306, 309, 315, 321, 326, 336, 346, 359, 360, 366, 374, 375, 376, 384, 394, 403, 420, 421, 441, 462, 463, 483, 485, 486, 487, 488, 490, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 508, 514, 518, 520, 522, 524, 534, 545, 552, 553, 559, 595, 629, 631, 642, 654, 655, 656, 657, 658, 659, 660, 664, 672, 675, 676, 677, 678, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 711, 712, 713, 714, 716, 717, 718, 719, 720, 723, 724, 725, 727, 728, 729, 730], "likewis": [0, 2, 672, 683, 689, 691, 694, 697, 698, 702, 707, 712, 730], "redund": [0, 672, 691, 695, 702], "oper": [0, 5, 6, 8, 9, 10, 13, 26, 28, 29, 31, 32, 33, 36, 49, 85, 86, 127, 157, 165, 170, 172, 181, 184, 187, 194, 209, 211, 220, 221, 225, 229, 232, 237, 245, 259, 285, 286, 288, 293, 294, 308, 309, 311, 312, 313, 319, 320, 321, 325, 329, 330, 331, 332, 334, 335, 336, 408, 415, 416, 417, 463, 496, 497, 498, 499, 501, 503, 504, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 554, 556, 628, 630, 641, 644, 672, 674, 681, 682, 684, 685, 686, 689, 691, 692, 693, 694, 695, 698, 701, 702, 704, 707, 709, 712, 713, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731], "origin": [0, 2, 9, 14, 16, 22, 26, 32, 37, 39, 45, 48, 49, 175, 297, 306, 365, 395, 396, 400, 401, 403, 499, 504, 506, 514, 543, 571, 572, 623, 638, 643, 664, 672, 676, 681, 682, 683, 687, 688, 690, 691, 699, 701, 702, 703, 709, 724, 725], "also": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 69, 70, 71, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 101, 102, 115, 118, 119, 120, 122, 127, 144, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 288, 291, 294, 295, 297, 304, 306, 311, 312, 313, 314, 316, 317, 318, 320, 324, 325, 326, 329, 330, 331, 332, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 407, 408, 410, 411, 414, 415, 416, 417, 418, 419, 422, 423, 426, 428, 430, 431, 432, 434, 435, 436, 438, 439, 441, 446, 447, 460, 461, 462, 463, 465, 467, 468, 480, 482, 483, 486, 488, 489, 490, 491, 496, 497, 499, 501, 502, 503, 504, 506, 507, 508, 509, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 593, 594, 595, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 641, 655, 656, 664, 672, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 707, 709, 712, 713, 714, 716, 717, 718, 720, 721, 722, 723, 724, 725, 727, 729, 730, 731], "increas": [0, 9, 14, 16, 32, 37, 39, 297, 306, 366, 397, 504, 506, 508, 557, 566, 579, 595, 643, 674, 691, 695, 702, 705, 707, 724], "its": [0, 4, 6, 9, 16, 26, 29, 32, 33, 39, 67, 100, 105, 106, 107, 108, 109, 160, 187, 220, 239, 245, 286, 294, 297, 306, 332, 371, 397, 419, 466, 495, 497, 498, 499, 501, 504, 506, 508, 542, 567, 571, 572, 576, 589, 638, 654, 672, 681, 682, 686, 690, 691, 694, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 714, 717, 719, 723, 724, 730], "overal": [0, 503, 526, 689, 691, 692, 694, 714, 720, 722, 723, 724], "obj": [0, 2, 70, 71, 496], "none": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 69, 70, 71, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 112, 115, 117, 118, 119, 120, 122, 124, 127, 137, 139, 142, 143, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 291, 294, 295, 296, 297, 300, 301, 302, 304, 305, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 410, 411, 414, 415, 416, 417, 418, 419, 422, 423, 425, 426, 427, 428, 430, 431, 432, 434, 435, 438, 443, 446, 447, 448, 449, 451, 452, 453, 454, 456, 457, 458, 460, 461, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 488, 489, 490, 491, 493, 494, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 587, 588, 589, 590, 593, 594, 595, 596, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 641, 642, 643, 644, 648, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 666, 672, 685, 686, 687, 689, 690, 691, 692, 693, 695, 697, 698, 701, 702, 703, 704, 705, 707, 709, 711, 713, 714], "arg_stateful_idx": [0, 657], "kwarg_stateful_idx": [0, 657], "include_gener": 0, "true": [0, 2, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 71, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 110, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 127, 139, 143, 144, 146, 147, 151, 154, 155, 156, 157, 161, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 260, 261, 262, 263, 265, 272, 273, 278, 279, 280, 281, 282, 283, 284, 288, 291, 292, 294, 295, 296, 297, 300, 306, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 328, 329, 330, 331, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 353, 354, 355, 356, 358, 359, 360, 362, 363, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 386, 387, 393, 394, 395, 396, 397, 399, 400, 401, 403, 404, 407, 408, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 428, 430, 431, 432, 434, 435, 436, 438, 439, 446, 447, 448, 450, 453, 454, 456, 457, 459, 460, 461, 463, 465, 467, 468, 470, 474, 475, 477, 478, 480, 483, 484, 486, 488, 489, 490, 491, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 589, 590, 591, 593, 594, 595, 596, 600, 601, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 638, 641, 642, 643, 644, 654, 656, 657, 658, 659, 661, 664, 670, 672, 682, 687, 689, 690, 691, 693, 695, 697, 698, 699, 701, 702, 703, 704, 706, 707, 709, 712, 713, 714], "array_cach": 0, "return_backend_compiled_fn": 0, "fals": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 71, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 143, 144, 149, 151, 154, 155, 157, 160, 161, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 260, 261, 262, 263, 265, 272, 273, 278, 279, 280, 281, 282, 283, 284, 288, 291, 292, 294, 295, 296, 297, 300, 306, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 328, 329, 330, 331, 334, 335, 338, 339, 340, 341, 342, 343, 345, 346, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 386, 387, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 407, 408, 410, 411, 414, 415, 416, 417, 418, 419, 422, 423, 425, 426, 428, 430, 431, 432, 434, 435, 436, 438, 439, 442, 446, 447, 448, 450, 453, 454, 456, 457, 459, 460, 461, 463, 465, 467, 468, 470, 474, 475, 477, 478, 480, 483, 484, 486, 490, 491, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 589, 593, 594, 595, 596, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 638, 639, 641, 642, 643, 644, 648, 652, 653, 654, 656, 657, 659, 661, 664, 667, 670, 672, 682, 685, 687, 690, 691, 693, 695, 701, 702, 703, 704, 706, 707, 709, 712, 713, 714], "static_argnum": [0, 709], "static_argnam": [0, 709], "arg": [0, 2, 4, 26, 51, 66, 150, 160, 469, 495, 496, 498, 501, 636, 638, 653, 657, 661, 664, 670, 672, 686, 691, 695, 700, 701, 702, 707, 709, 713], "kwarg": [0, 2, 4, 9, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 150, 297, 366, 442, 469, 496, 498, 501, 636, 638, 653, 657, 664, 670, 672, 686, 691, 695, 698, 701, 702, 707, 709, 713], "callabl": [0, 2, 9, 10, 24, 32, 33, 36, 47, 66, 67, 68, 72, 73, 74, 75, 76, 113, 114, 146, 147, 160, 284, 292, 294, 297, 335, 348, 366, 405, 409, 414, 416, 420, 421, 442, 469, 481, 485, 487, 492, 495, 496, 497, 498, 501, 502, 507, 508, 580, 581, 582, 589, 590, 591, 593, 594, 595, 596, 636, 639, 648, 659, 667, 689, 695, 700, 702, 709], "set": [0, 2, 4, 9, 10, 13, 14, 19, 21, 22, 26, 32, 33, 36, 37, 42, 44, 45, 68, 92, 94, 128, 129, 130, 131, 132, 143, 156, 157, 158, 159, 160, 175, 258, 265, 278, 280, 284, 288, 291, 292, 294, 295, 297, 306, 315, 339, 342, 358, 366, 370, 394, 399, 400, 401, 403, 404, 408, 415, 432, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 463, 471, 495, 496, 497, 498, 499, 501, 503, 504, 508, 510, 511, 513, 514, 526, 532, 543, 545, 548, 551, 552, 583, 590, 593, 594, 595, 600, 601, 607, 609, 610, 614, 616, 617, 618, 621, 629, 631, 638, 641, 642, 643, 644, 648, 654, 655, 656, 659, 664, 669, 674, 677, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 695, 696, 698, 699, 701, 702, 703, 704, 705, 707, 709, 711, 712, 718, 722, 723, 724, 725, 726, 728, 731], "them": [0, 2, 43, 409, 445, 501, 617, 641, 672, 673, 674, 675, 676, 679, 681, 683, 685, 686, 687, 688, 689, 690, 691, 695, 696, 699, 701, 702, 703, 704, 706, 709, 711, 712, 713, 717, 719, 721, 722, 724, 726, 730], "If": [0, 1, 2, 4, 5, 6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 69, 70, 71, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 127, 143, 159, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 261, 262, 263, 265, 266, 268, 272, 273, 278, 279, 281, 282, 283, 284, 288, 291, 292, 294, 295, 296, 297, 300, 301, 306, 311, 312, 313, 314, 315, 316, 317, 318, 321, 324, 326, 328, 336, 341, 346, 349, 350, 351, 353, 354, 356, 358, 359, 360, 362, 365, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 393, 394, 395, 396, 397, 399, 400, 401, 403, 404, 407, 408, 410, 411, 415, 416, 417, 419, 422, 423, 425, 426, 428, 430, 431, 432, 434, 435, 438, 439, 446, 447, 450, 460, 461, 463, 465, 467, 468, 480, 481, 484, 486, 491, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 526, 527, 529, 530, 531, 532, 534, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 556, 557, 558, 559, 561, 562, 563, 564, 565, 567, 568, 569, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 595, 596, 603, 604, 605, 606, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 638, 641, 642, 643, 654, 655, 656, 657, 658, 664, 672, 674, 677, 678, 679, 681, 682, 683, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 711, 712, 714, 717, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731], "specifi": [0, 2, 5, 6, 9, 10, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 29, 32, 33, 37, 38, 39, 41, 42, 45, 46, 57, 69, 78, 83, 85, 90, 92, 93, 95, 99, 101, 148, 153, 155, 159, 160, 161, 229, 261, 273, 278, 291, 294, 295, 296, 297, 301, 306, 311, 312, 313, 315, 321, 326, 336, 341, 346, 347, 358, 367, 368, 381, 392, 394, 395, 396, 399, 400, 403, 405, 422, 423, 425, 428, 441, 450, 481, 496, 497, 498, 499, 501, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 515, 529, 532, 534, 535, 537, 538, 543, 554, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 572, 574, 575, 578, 579, 588, 590, 591, 598, 599, 600, 601, 604, 605, 606, 608, 609, 610, 612, 615, 616, 617, 618, 622, 623, 624, 628, 630, 632, 633, 644, 654, 655, 656, 682, 684, 688, 691, 692, 697, 698, 699, 701, 702, 703, 704, 709, 712, 713, 730], "eagerli": [0, 2, 672], "otherwis": [0, 1, 2, 4, 5, 6, 8, 9, 10, 13, 14, 16, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 69, 71, 77, 82, 84, 85, 86, 89, 91, 96, 99, 100, 102, 103, 105, 106, 107, 108, 109, 118, 122, 126, 127, 143, 161, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 246, 247, 248, 249, 250, 261, 262, 263, 265, 266, 272, 273, 279, 281, 282, 283, 284, 286, 291, 294, 297, 300, 311, 312, 313, 316, 317, 318, 349, 350, 351, 353, 354, 356, 358, 359, 360, 362, 365, 368, 369, 370, 372, 374, 376, 377, 378, 379, 381, 393, 394, 395, 396, 397, 404, 407, 408, 410, 411, 415, 416, 417, 419, 422, 423, 425, 426, 428, 430, 431, 432, 434, 435, 438, 439, 446, 447, 460, 461, 463, 465, 467, 468, 469, 480, 484, 486, 491, 495, 496, 497, 498, 499, 501, 502, 503, 504, 506, 507, 508, 511, 512, 513, 514, 515, 517, 518, 519, 520, 526, 527, 529, 530, 531, 532, 533, 537, 538, 540, 542, 543, 545, 547, 549, 550, 552, 556, 558, 559, 561, 562, 563, 564, 567, 568, 569, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 596, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 620, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 641, 642, 656, 657, 658, 664, 672, 683, 686, 689, 691, 692, 693, 698, 699, 701, 704, 709], "happen": [0, 2, 239, 499, 672, 676, 682, 683, 701, 704, 712], "lazili": [0, 2, 672], "paramet": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 70, 71, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 304, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 430, 431, 432, 434, 435, 436, 437, 438, 439, 441, 442, 443, 446, 447, 450, 451, 452, 455, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 638, 641, 642, 643, 644, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 664, 668, 672, 681, 686, 694, 695, 697, 698, 702, 703, 704, 705, 709, 711, 712, 716, 725], "creat": [0, 1, 2, 5, 8, 9, 18, 26, 28, 31, 32, 37, 41, 69, 70, 71, 78, 79, 80, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 221, 250, 258, 288, 294, 297, 301, 311, 312, 313, 334, 347, 366, 367, 380, 381, 382, 383, 384, 465, 481, 492, 496, 499, 501, 502, 510, 547, 603, 604, 605, 606, 608, 638, 648, 653, 655, 656, 657, 658, 659, 660, 675, 677, 678, 682, 683, 686, 688, 690, 691, 692, 695, 698, 699, 701, 702, 703, 704, 707, 709, 710, 713, 715, 716, 719, 724, 725, 730], "option": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 69, 70, 71, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 115, 117, 127, 139, 143, 155, 158, 159, 160, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 291, 294, 295, 296, 297, 300, 301, 302, 304, 306, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 328, 329, 330, 331, 332, 334, 336, 337, 338, 339, 341, 343, 344, 345, 346, 349, 350, 351, 353, 354, 356, 358, 359, 360, 361, 362, 364, 365, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 407, 408, 410, 411, 413, 415, 416, 417, 419, 422, 423, 425, 426, 428, 430, 431, 432, 434, 435, 438, 441, 443, 446, 447, 450, 460, 461, 462, 463, 465, 467, 468, 469, 480, 482, 483, 484, 486, 488, 489, 490, 491, 493, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 589, 590, 593, 594, 595, 600, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 638, 642, 648, 653, 655, 657, 659, 660, 670, 681, 682, 683, 689, 690, 691, 692, 693, 694, 695, 697, 698, 701, 702, 703, 704, 705, 707, 709, 714, 717, 724, 730], "list": [0, 4, 5, 6, 8, 9, 10, 13, 16, 17, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 69, 70, 71, 82, 84, 87, 88, 89, 91, 96, 100, 102, 115, 119, 120, 127, 143, 160, 161, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 245, 246, 247, 248, 249, 250, 261, 262, 263, 265, 266, 267, 268, 271, 272, 273, 279, 280, 281, 282, 283, 284, 291, 294, 295, 297, 304, 311, 312, 313, 315, 316, 317, 318, 329, 330, 331, 332, 341, 349, 350, 351, 352, 353, 354, 362, 368, 369, 370, 372, 374, 376, 377, 378, 379, 381, 386, 394, 395, 396, 397, 404, 406, 407, 408, 410, 411, 415, 416, 417, 419, 422, 423, 424, 426, 428, 430, 431, 432, 434, 435, 438, 442, 446, 447, 460, 461, 463, 465, 466, 467, 468, 469, 480, 481, 486, 491, 496, 497, 498, 499, 501, 503, 504, 506, 508, 509, 511, 512, 513, 517, 518, 519, 520, 521, 522, 525, 526, 527, 529, 530, 531, 532, 537, 538, 540, 542, 543, 545, 547, 549, 550, 554, 556, 561, 562, 563, 564, 565, 568, 571, 572, 573, 574, 575, 578, 579, 583, 584, 585, 586, 589, 590, 591, 592, 594, 595, 600, 601, 602, 603, 604, 605, 606, 608, 611, 612, 614, 615, 616, 617, 618, 619, 620, 622, 623, 626, 628, 629, 631, 632, 633, 636, 638, 641, 642, 643, 644, 648, 653, 654, 656, 661, 680, 681, 682, 685, 686, 688, 689, 690, 691, 692, 693, 695, 696, 697, 701, 702, 703, 704, 705, 709, 712, 713, 714, 717, 724, 725, 730], "instanc": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 69, 70, 71, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 112, 115, 118, 119, 120, 122, 127, 144, 156, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 288, 291, 294, 295, 297, 300, 306, 311, 312, 313, 314, 316, 317, 318, 320, 324, 325, 329, 330, 331, 332, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 407, 408, 410, 411, 414, 415, 416, 417, 418, 419, 422, 423, 426, 428, 430, 431, 432, 434, 435, 436, 438, 439, 441, 446, 447, 456, 460, 461, 462, 463, 465, 467, 468, 480, 482, 483, 486, 488, 489, 490, 491, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 648, 653, 678, 681, 682, 683, 685, 686, 691, 693, 694, 695, 697, 698, 699, 700, 701, 704, 712, 713, 714, 719, 725], "consid": [0, 9, 14, 20, 32, 37, 94, 215, 216, 258, 261, 264, 273, 288, 291, 295, 306, 341, 394, 496, 499, 504, 512, 534, 545, 614, 615, 616, 617, 643, 655, 674, 675, 686, 690, 691, 698, 700, 705, 707, 710, 711, 712, 721, 725, 729, 731], "dure": [0, 7, 11, 22, 26, 30, 34, 45, 161, 294, 316, 317, 318, 469, 482, 483, 488, 498, 501, 502, 503, 504, 507, 514, 526, 542, 580, 581, 582, 629, 631, 654, 657, 658, 659, 682, 689, 691, 692, 695, 698, 699, 701, 702, 703, 704, 707, 717, 724, 725, 730], "posit": [0, 4, 8, 9, 10, 14, 15, 16, 31, 32, 33, 37, 38, 39, 80, 82, 94, 112, 167, 168, 169, 173, 176, 187, 194, 201, 202, 208, 210, 220, 221, 228, 229, 233, 234, 238, 250, 258, 261, 264, 273, 288, 291, 295, 297, 339, 365, 409, 419, 481, 494, 496, 497, 499, 501, 504, 505, 506, 510, 511, 515, 531, 534, 556, 561, 567, 572, 607, 612, 632, 633, 638, 641, 648, 653, 672, 681, 683, 685, 689, 702, 704, 705, 712, 716, 726], "argument": [0, 2, 4, 5, 8, 9, 10, 14, 26, 27, 31, 32, 33, 49, 69, 70, 71, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 102, 118, 122, 127, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 190, 192, 193, 194, 198, 199, 200, 201, 202, 203, 207, 209, 210, 211, 212, 214, 215, 216, 217, 220, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 258, 263, 266, 288, 291, 294, 295, 297, 306, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 324, 325, 326, 329, 330, 331, 332, 341, 366, 394, 397, 401, 405, 406, 408, 409, 414, 416, 417, 422, 426, 428, 430, 432, 442, 446, 447, 463, 468, 469, 481, 491, 496, 497, 499, 501, 502, 503, 504, 506, 507, 508, 509, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 560, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 589, 602, 609, 610, 612, 613, 614, 615, 616, 617, 618, 621, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 638, 641, 642, 648, 653, 657, 664, 668, 672, 674, 681, 684, 685, 686, 687, 688, 689, 693, 694, 698, 703, 704, 705, 707, 709, 711, 712, 719, 724], "keyword": [0, 2, 4, 5, 9, 26, 32, 49, 87, 221, 297, 306, 366, 394, 406, 409, 442, 469, 496, 499, 501, 508, 514, 589, 630, 636, 638, 642, 657, 681, 686, 689, 691, 692, 701, 702, 703, 704, 705, 707, 712], "str": [0, 2, 4, 5, 9, 10, 13, 14, 15, 16, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 55, 56, 57, 58, 59, 60, 61, 62, 63, 82, 84, 87, 89, 91, 96, 97, 100, 102, 104, 105, 106, 107, 111, 112, 115, 116, 117, 118, 119, 120, 122, 124, 127, 128, 129, 130, 131, 132, 139, 140, 160, 161, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 245, 246, 247, 248, 249, 250, 261, 262, 263, 265, 272, 273, 279, 281, 282, 283, 284, 294, 295, 296, 297, 300, 306, 311, 312, 313, 315, 316, 317, 318, 320, 321, 325, 326, 329, 330, 331, 332, 334, 335, 336, 338, 341, 346, 349, 350, 351, 353, 358, 368, 369, 370, 374, 375, 376, 377, 378, 379, 381, 383, 394, 395, 396, 397, 403, 404, 405, 407, 408, 410, 411, 413, 415, 416, 417, 419, 422, 423, 426, 428, 430, 431, 432, 434, 435, 438, 443, 446, 447, 449, 458, 460, 461, 463, 465, 467, 468, 480, 484, 491, 496, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 530, 531, 532, 537, 538, 540, 542, 543, 545, 547, 549, 550, 556, 561, 562, 563, 564, 568, 571, 572, 573, 574, 575, 578, 579, 580, 581, 582, 589, 590, 600, 603, 604, 605, 606, 608, 611, 614, 615, 616, 618, 622, 623, 624, 626, 628, 629, 631, 632, 633, 638, 639, 641, 642, 646, 648, 656, 657, 658, 691, 692, 695, 698, 701, 702, 705, 709, 714], "current": [0, 10, 26, 49, 66, 113, 114, 117, 134, 135, 136, 137, 138, 139, 145, 146, 147, 148, 153, 155, 295, 297, 340, 366, 420, 421, 424, 429, 433, 444, 445, 463, 495, 497, 498, 501, 504, 508, 536, 583, 593, 594, 638, 642, 654, 657, 664, 669, 672, 676, 679, 681, 682, 683, 685, 687, 689, 690, 691, 692, 695, 696, 698, 701, 702, 703, 704, 707, 709, 714, 716, 717, 724, 730, 731], "bool": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 70, 71, 77, 82, 83, 84, 85, 86, 87, 89, 91, 96, 99, 100, 102, 103, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 135, 139, 143, 144, 146, 147, 149, 151, 154, 155, 160, 161, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 261, 262, 263, 265, 272, 273, 278, 279, 281, 282, 283, 284, 288, 291, 292, 294, 295, 296, 297, 300, 306, 311, 312, 313, 315, 316, 317, 318, 328, 334, 341, 346, 348, 349, 350, 351, 353, 354, 356, 357, 358, 359, 360, 362, 365, 368, 369, 370, 372, 374, 376, 377, 378, 379, 381, 393, 394, 395, 396, 397, 399, 400, 401, 403, 404, 407, 408, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 446, 447, 450, 459, 460, 461, 463, 465, 467, 468, 480, 483, 484, 486, 488, 489, 490, 491, 493, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 526, 527, 529, 530, 531, 532, 537, 538, 540, 541, 542, 543, 545, 546, 547, 549, 550, 552, 556, 557, 559, 561, 562, 563, 564, 567, 568, 569, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 589, 590, 591, 593, 594, 595, 600, 601, 603, 604, 605, 606, 608, 609, 610, 611, 612, 614, 615, 616, 617, 618, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 638, 639, 641, 642, 643, 656, 658, 659, 670, 691, 693, 695, 701, 702, 704, 705, 707, 709, 714], "includ": [0, 2, 5, 8, 9, 10, 14, 19, 22, 23, 26, 28, 31, 32, 33, 37, 42, 45, 46, 69, 70, 71, 85, 86, 88, 94, 167, 191, 195, 196, 197, 200, 202, 205, 213, 221, 234, 239, 251, 254, 255, 258, 259, 260, 265, 266, 267, 268, 269, 270, 272, 274, 275, 277, 278, 279, 280, 282, 283, 288, 294, 306, 311, 312, 313, 338, 340, 342, 359, 360, 361, 364, 365, 382, 384, 385, 393, 397, 399, 400, 403, 428, 480, 496, 499, 501, 504, 508, 510, 511, 514, 515, 536, 557, 559, 583, 606, 610, 625, 626, 627, 628, 629, 630, 631, 632, 633, 638, 641, 642, 644, 655, 656, 658, 668, 672, 675, 681, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 701, 702, 703, 704, 705, 707, 709, 716, 717, 721, 722, 724, 726, 729, 730, 731], "creation": [0, 9, 26, 32, 49, 688, 691, 692, 697, 699, 702, 703, 704, 705, 709, 724, 726, 730], "constant": [0, 9, 16, 17, 32, 39, 40, 296, 297, 346, 366, 506, 508, 509, 566, 589, 602, 655, 657, 658, 672, 698, 703, 705, 713, 714, 717], "appear": [0, 297, 359, 360, 481, 501, 682, 683, 685, 702, 707], "whether": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 68, 70, 71, 82, 84, 89, 91, 96, 99, 100, 102, 105, 106, 107, 108, 109, 110, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 127, 139, 143, 144, 146, 147, 149, 151, 154, 155, 157, 160, 161, 163, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 248, 249, 250, 261, 262, 263, 265, 272, 273, 279, 281, 282, 283, 284, 291, 294, 296, 297, 306, 311, 312, 313, 315, 316, 317, 318, 334, 346, 348, 349, 350, 351, 353, 354, 356, 358, 359, 360, 362, 365, 368, 369, 370, 372, 374, 376, 377, 378, 379, 381, 394, 395, 396, 397, 404, 407, 408, 410, 411, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 442, 446, 447, 448, 449, 450, 453, 454, 456, 457, 459, 460, 461, 463, 465, 467, 468, 474, 475, 478, 480, 483, 484, 486, 488, 489, 490, 491, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 510, 514, 515, 517, 518, 519, 520, 526, 527, 530, 531, 532, 537, 538, 540, 541, 542, 543, 545, 547, 549, 550, 556, 561, 562, 563, 564, 567, 568, 569, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 589, 590, 591, 593, 594, 595, 596, 600, 601, 603, 604, 605, 606, 608, 611, 614, 615, 616, 617, 618, 622, 623, 626, 628, 629, 631, 632, 633, 636, 638, 653, 656, 657, 658, 659, 672, 677, 681, 682, 686, 689, 691, 693, 697, 698, 701, 702, 704, 705, 706, 707], "appli": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 77, 79, 81, 82, 84, 86, 87, 88, 89, 91, 92, 93, 96, 100, 101, 102, 115, 119, 120, 127, 144, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 291, 292, 294, 295, 296, 297, 300, 306, 308, 309, 311, 312, 313, 314, 316, 317, 318, 320, 324, 325, 326, 328, 329, 330, 331, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 407, 408, 410, 411, 414, 415, 416, 417, 418, 419, 422, 423, 426, 428, 430, 431, 432, 434, 435, 436, 438, 439, 441, 446, 447, 460, 461, 462, 463, 465, 467, 468, 480, 482, 483, 486, 488, 489, 490, 491, 493, 497, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 540, 542, 543, 545, 547, 548, 549, 550, 552, 556, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 589, 592, 595, 596, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 643, 644, 652, 656, 658, 672, 677, 679, 681, 682, 683, 686, 689, 691, 692, 693, 694, 695, 697, 698, 699, 701, 702, 704, 705, 707, 711, 712, 713, 714, 715, 717, 719, 725], "nativ": [0, 2, 4, 5, 7, 10, 27, 30, 33, 48, 51, 88, 97, 98, 104, 105, 106, 107, 108, 109, 123, 126, 141, 142, 143, 144, 154, 162, 166, 432, 434, 438, 445, 466, 496, 497, 498, 501, 638, 648, 653, 664, 672, 683, 687, 691, 695, 698, 699, 701, 702, 703, 704, 709, 711, 712, 719, 722, 731], "e": [0, 5, 9, 14, 18, 20, 21, 22, 24, 31, 32, 37, 41, 44, 45, 47, 48, 77, 86, 87, 90, 91, 94, 98, 127, 140, 167, 168, 169, 173, 175, 176, 179, 181, 183, 187, 188, 190, 193, 194, 200, 201, 208, 209, 210, 211, 218, 219, 220, 221, 223, 225, 227, 229, 230, 233, 234, 238, 244, 258, 288, 294, 295, 301, 306, 311, 312, 315, 329, 330, 332, 345, 380, 381, 382, 383, 384, 395, 396, 494, 496, 497, 498, 499, 503, 504, 506, 508, 510, 512, 513, 514, 529, 532, 537, 538, 542, 543, 545, 548, 551, 552, 553, 556, 559, 567, 575, 586, 590, 591, 592, 600, 601, 604, 605, 606, 614, 615, 616, 617, 618, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 655, 656, 672, 675, 676, 677, 678, 681, 682, 683, 684, 685, 689, 691, 695, 700, 702, 704, 709, 712, 717, 718, 719, 720], "tf": [0, 2, 672, 686, 691, 692, 697, 701, 702, 704, 705, 707, 709, 714, 717, 719, 724], "after": [0, 2, 9, 10, 11, 13, 17, 26, 32, 33, 34, 36, 40, 133, 234, 279, 291, 294, 295, 297, 315, 316, 317, 318, 335, 345, 357, 366, 432, 483, 486, 488, 489, 490, 497, 499, 501, 502, 503, 508, 509, 516, 517, 518, 519, 521, 523, 525, 526, 594, 602, 659, 664, 672, 678, 681, 682, 683, 685, 688, 690, 691, 693, 695, 697, 700, 704, 708, 718, 724], "union": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 70, 71, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 153, 154, 155, 156, 158, 159, 160, 161, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 291, 292, 294, 295, 296, 297, 300, 301, 302, 304, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 328, 329, 330, 331, 332, 334, 335, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 407, 408, 410, 411, 415, 416, 417, 419, 422, 423, 424, 425, 426, 428, 430, 431, 432, 434, 435, 438, 439, 441, 442, 446, 447, 450, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 590, 591, 592, 593, 594, 595, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 638, 641, 655, 659, 660, 686, 689, 691, 692, 693, 695, 697, 698, 701, 705, 707, 709, 714], "int": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 58, 62, 63, 70, 71, 80, 82, 83, 84, 85, 86, 89, 92, 93, 94, 101, 108, 111, 112, 115, 122, 137, 151, 152, 153, 160, 161, 170, 177, 178, 179, 180, 181, 182, 194, 197, 221, 230, 236, 239, 243, 249, 250, 251, 252, 253, 254, 255, 258, 259, 265, 266, 267, 271, 278, 280, 284, 286, 288, 291, 292, 294, 295, 296, 297, 300, 301, 302, 304, 306, 308, 309, 311, 312, 313, 314, 315, 319, 320, 321, 324, 325, 326, 328, 329, 330, 331, 332, 334, 335, 336, 338, 341, 346, 347, 348, 352, 353, 354, 357, 358, 362, 365, 366, 367, 368, 369, 370, 371, 372, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 392, 394, 395, 396, 397, 399, 400, 401, 403, 405, 415, 416, 417, 419, 422, 423, 426, 441, 444, 446, 460, 462, 466, 481, 482, 483, 484, 485, 488, 493, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 529, 532, 534, 535, 543, 544, 554, 556, 557, 558, 559, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 586, 589, 590, 592, 594, 595, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 614, 618, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 641, 642, 643, 644, 655, 656, 689, 691, 692, 693, 695, 697, 698, 701, 703, 704, 705, 707, 709, 714], "iter": [0, 4, 10, 16, 24, 26, 33, 39, 47, 49, 66, 67, 68, 160, 256, 257, 288, 297, 366, 404, 442, 495, 498, 501, 506, 508, 566, 570, 577, 579, 584, 585, 586, 588, 589, 591, 592, 593, 594, 595, 598, 599, 601, 676, 689, 709, 712], "For": [0, 1, 5, 9, 14, 20, 32, 37, 69, 87, 167, 168, 169, 170, 172, 173, 174, 175, 176, 183, 184, 185, 187, 188, 190, 192, 193, 194, 201, 202, 203, 208, 209, 210, 211, 212, 215, 220, 222, 223, 225, 229, 230, 231, 232, 233, 234, 237, 238, 240, 259, 263, 281, 288, 291, 297, 351, 366, 496, 499, 504, 506, 512, 514, 550, 552, 556, 564, 575, 614, 615, 616, 617, 625, 627, 628, 630, 642, 653, 674, 675, 676, 678, 681, 682, 683, 684, 686, 687, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 701, 702, 703, 704, 705, 707, 709, 711, 712, 713, 714, 716, 717, 721, 722, 725, 730, 731], "jax": [0, 2, 9, 10, 20, 33, 271, 291, 408, 432, 463, 481, 501, 512, 614, 615, 616, 617, 664, 672, 675, 676, 680, 681, 682, 683, 685, 687, 691, 692, 695, 697, 700, 701, 702, 703, 704, 705, 707, 709, 711, 714, 717, 725, 727, 730, 731], "jit": [0, 709, 717, 724], "tupl": [0, 2, 4, 5, 6, 8, 9, 10, 13, 14, 16, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 70, 71, 82, 84, 88, 89, 91, 94, 96, 100, 101, 102, 113, 114, 115, 119, 120, 126, 127, 133, 143, 146, 147, 161, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 248, 249, 250, 253, 257, 258, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 273, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 291, 293, 294, 295, 297, 300, 301, 302, 304, 306, 311, 312, 313, 315, 316, 317, 318, 320, 325, 326, 329, 330, 331, 332, 334, 335, 336, 340, 341, 349, 350, 351, 352, 353, 362, 366, 368, 369, 370, 371, 374, 376, 377, 378, 379, 381, 382, 384, 385, 386, 394, 395, 396, 397, 399, 400, 401, 404, 407, 408, 410, 411, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 428, 430, 431, 432, 434, 435, 438, 446, 447, 450, 460, 461, 462, 463, 465, 466, 467, 468, 480, 481, 482, 483, 484, 486, 488, 491, 495, 496, 497, 498, 499, 501, 502, 503, 504, 506, 507, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 536, 537, 538, 540, 541, 542, 543, 545, 547, 548, 549, 550, 552, 554, 555, 556, 559, 561, 562, 563, 564, 565, 566, 568, 569, 571, 572, 573, 574, 575, 578, 579, 580, 581, 582, 583, 584, 586, 588, 590, 591, 592, 593, 594, 595, 598, 599, 600, 601, 603, 604, 605, 606, 608, 611, 612, 614, 615, 616, 617, 618, 619, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 641, 642, 643, 655, 656, 657, 686, 691, 697, 698, 701, 703, 704, 709, 712, 713, 717], "dict": [0, 2, 4, 10, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 82, 84, 89, 91, 96, 100, 102, 113, 114, 115, 119, 120, 127, 143, 146, 147, 161, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 245, 246, 247, 248, 249, 250, 261, 262, 263, 265, 272, 273, 279, 281, 282, 283, 284, 297, 315, 316, 317, 318, 349, 350, 351, 353, 366, 368, 369, 370, 374, 376, 377, 378, 379, 381, 394, 395, 396, 397, 404, 405, 407, 408, 410, 411, 415, 416, 417, 419, 420, 421, 422, 423, 426, 428, 430, 431, 432, 434, 435, 438, 442, 446, 447, 460, 461, 463, 465, 467, 468, 480, 491, 497, 498, 501, 508, 517, 518, 519, 520, 526, 527, 530, 531, 532, 537, 538, 540, 542, 543, 545, 547, 549, 550, 556, 561, 562, 563, 564, 568, 571, 572, 573, 574, 575, 578, 579, 583, 584, 586, 589, 590, 591, 592, 594, 595, 596, 600, 601, 603, 604, 605, 606, 608, 611, 614, 615, 616, 617, 618, 622, 623, 626, 628, 629, 631, 632, 633, 638, 639, 653, 657, 664, 686, 689, 712, 713, 719], "return": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 133, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 304, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 450, 451, 452, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 638, 641, 642, 643, 644, 647, 648, 653, 654, 655, 656, 657, 659, 664, 667, 668, 669, 672, 682, 683, 686, 689, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 711, 712, 713, 714, 717, 725], "type": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 291, 292, 294, 295, 296, 297, 300, 301, 302, 304, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 446, 447, 450, 451, 452, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 638, 641, 642, 643, 644, 647, 648, 655, 656, 657, 661, 664, 667, 670, 672, 678, 681, 682, 683, 684, 685, 686, 689, 692, 693, 694, 695, 697, 699, 701, 703, 704, 705, 707, 709, 711, 712, 724, 725, 728], "lazygraph": [0, 2], "modul": [0, 24, 26, 47, 49, 287, 289, 290, 298, 299, 303, 307, 443, 501, 515, 634, 638, 652, 653, 654, 656, 658, 660, 663, 664, 672, 676, 679, 682, 686, 687, 688, 695, 698, 701, 702, 704, 709, 710, 712, 714, 716, 717, 724, 725, 727], "moduletyp": [0, 2], "A": [0, 1, 2, 5, 6, 9, 10, 16, 18, 22, 23, 26, 29, 31, 32, 33, 36, 37, 39, 41, 43, 46, 49, 66, 67, 68, 80, 88, 94, 100, 141, 160, 222, 224, 228, 250, 258, 259, 261, 270, 273, 277, 278, 288, 291, 294, 295, 297, 300, 301, 306, 321, 335, 341, 345, 353, 356, 368, 370, 374, 375, 376, 377, 380, 381, 382, 383, 384, 392, 401, 403, 407, 409, 430, 431, 460, 461, 462, 465, 492, 495, 496, 497, 498, 499, 501, 502, 503, 504, 506, 508, 510, 514, 515, 526, 535, 537, 540, 541, 546, 547, 551, 552, 564, 567, 569, 573, 575, 583, 586, 588, 590, 591, 592, 593, 594, 598, 599, 600, 601, 603, 604, 605, 606, 608, 614, 624, 632, 633, 636, 638, 639, 641, 642, 643, 644, 648, 654, 655, 670, 673, 674, 675, 676, 680, 681, 682, 684, 689, 691, 692, 695, 697, 698, 702, 703, 704, 709, 712, 717, 719, 724, 725], "non": [0, 2, 6, 8, 9, 14, 18, 19, 22, 23, 29, 31, 32, 37, 41, 42, 45, 46, 82, 99, 117, 126, 195, 215, 216, 221, 265, 269, 291, 295, 297, 306, 341, 350, 351, 397, 400, 496, 497, 499, 504, 508, 510, 511, 514, 515, 532, 533, 543, 545, 552, 554, 558, 559, 596, 605, 609, 610, 611, 612, 625, 626, 627, 628, 629, 631, 632, 633, 655, 657, 659, 686, 689, 691, 693, 709, 724], "initi": [0, 2, 13, 26, 36, 49, 503, 528, 653, 654, 656, 657, 659, 660, 672, 675, 683, 687, 691, 692, 703, 704, 709, 724, 730, 731], "object": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 52, 77, 81, 82, 90, 103, 112, 115, 123, 126, 161, 219, 381, 484, 496, 497, 498, 502, 508, 510, 586, 588, 590, 591, 592, 598, 599, 600, 601, 608, 638, 639, 645, 646, 647, 653, 656, 657, 664, 672, 686, 689, 690, 699, 702, 703, 704, 707, 711, 714, 724, 730], "forward": [0, 9, 32, 294, 315, 320, 321, 325, 326, 336, 653, 655, 657, 659, 672, 682, 687, 694, 700, 704, 705, 707, 714, 716, 717, 724, 725], "pass": [0, 2, 8, 9, 24, 26, 31, 32, 47, 49, 66, 67, 68, 104, 126, 141, 160, 175, 221, 297, 300, 301, 306, 358, 374, 376, 380, 400, 401, 432, 495, 497, 498, 499, 501, 507, 580, 581, 636, 638, 642, 648, 653, 657, 659, 660, 664, 670, 672, 681, 683, 685, 686, 687, 689, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 717, 722], "same": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 16, 18, 20, 21, 22, 26, 28, 29, 31, 32, 33, 34, 36, 37, 39, 41, 43, 45, 48, 61, 69, 79, 84, 86, 87, 89, 91, 92, 93, 94, 96, 99, 100, 101, 112, 115, 160, 167, 168, 169, 170, 172, 174, 178, 180, 183, 187, 193, 194, 220, 222, 224, 227, 229, 230, 231, 240, 244, 250, 258, 259, 263, 268, 283, 286, 288, 291, 294, 295, 297, 300, 302, 304, 306, 311, 312, 313, 329, 330, 331, 332, 334, 335, 336, 340, 353, 366, 369, 374, 376, 385, 387, 392, 393, 394, 395, 396, 397, 398, 403, 439, 491, 496, 497, 498, 499, 501, 502, 503, 504, 506, 507, 508, 510, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 529, 530, 531, 532, 533, 535, 536, 537, 538, 540, 542, 544, 546, 547, 548, 549, 550, 551, 552, 553, 556, 558, 565, 568, 569, 571, 572, 574, 575, 580, 581, 596, 606, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 636, 641, 642, 643, 656, 672, 674, 676, 678, 682, 683, 686, 687, 689, 690, 691, 692, 693, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 711, 713, 714, 717, 721, 723, 730, 731], "copi": [0, 2, 5, 6, 7, 8, 9, 10, 16, 26, 28, 29, 30, 31, 32, 33, 39, 70, 71, 77, 81, 99, 161, 221, 297, 347, 349, 350, 351, 354, 356, 358, 359, 360, 362, 365, 368, 372, 425, 450, 460, 467, 468, 496, 497, 498, 499, 501, 506, 508, 513, 567, 568, 569, 571, 573, 574, 576, 578, 584, 619, 621, 682, 683, 685, 687, 690, 691, 694, 702, 703, 709, 716, 717], "everi": [0, 2, 5, 9, 10, 32, 33, 83, 84, 244, 271, 286, 291, 297, 371, 404, 496, 501, 678, 681, 683, 685, 687, 688, 689, 690, 691, 693, 696, 697, 698, 699, 701, 702, 703, 704, 705, 709, 711, 713, 724], "method": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 77, 79, 81, 82, 84, 86, 87, 88, 89, 91, 92, 93, 96, 99, 100, 101, 102, 112, 115, 119, 120, 127, 144, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 291, 306, 311, 312, 313, 314, 316, 317, 318, 320, 324, 325, 326, 329, 330, 331, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 407, 408, 410, 411, 412, 414, 415, 416, 417, 418, 419, 422, 423, 426, 428, 430, 431, 432, 434, 435, 436, 438, 439, 441, 446, 447, 460, 461, 462, 463, 465, 467, 468, 480, 482, 483, 486, 488, 489, 490, 491, 496, 497, 499, 501, 502, 504, 505, 508, 511, 514, 515, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 530, 531, 532, 534, 535, 536, 537, 538, 540, 542, 543, 545, 546, 547, 548, 549, 550, 552, 553, 556, 557, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 594, 595, 596, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 638, 648, 654, 655, 656, 657, 681, 683, 685, 686, 690, 691, 693, 694, 697, 698, 699, 704, 705, 709, 710, 713, 714, 717, 725, 731], "To": [0, 1, 2, 194, 296, 346, 455, 499, 501, 655, 678, 681, 682, 685, 686, 688, 689, 691, 693, 695, 696, 698, 699, 702, 703, 704, 705, 712, 713, 714], "you": [0, 1, 2, 9, 10, 32, 33, 48, 49, 297, 306, 356, 401, 422, 423, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 529, 652, 653, 655, 656, 657, 658, 659, 660, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731], "need": [0, 1, 2, 9, 10, 16, 32, 33, 39, 294, 295, 306, 315, 320, 321, 325, 340, 401, 410, 411, 432, 501, 503, 504, 506, 508, 529, 536, 564, 567, 594, 642, 672, 676, 678, 679, 681, 682, 683, 685, 686, 688, 689, 690, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 705, 707, 709, 711, 712, 716, 717, 720, 724, 725, 726, 730], "correspond": [0, 2, 6, 8, 9, 10, 13, 16, 19, 20, 22, 26, 29, 31, 32, 36, 39, 45, 49, 100, 112, 115, 175, 225, 239, 259, 267, 268, 288, 291, 294, 295, 297, 300, 306, 315, 321, 332, 336, 338, 340, 341, 342, 359, 360, 367, 374, 375, 376, 395, 396, 460, 481, 497, 499, 501, 503, 504, 506, 510, 511, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 532, 536, 537, 543, 550, 551, 571, 572, 603, 609, 610, 614, 615, 616, 617, 622, 623, 628, 629, 630, 631, 638, 641, 643, 672, 681, 683, 686, 687, 689, 690, 691, 693, 694, 695, 697, 698, 699, 700, 702, 704, 707, 709, 724], "input": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 69, 70, 71, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 115, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 141, 143, 144, 157, 160, 161, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 304, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 328, 329, 330, 331, 332, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 353, 354, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 407, 408, 410, 411, 414, 415, 416, 417, 418, 419, 422, 423, 425, 426, 428, 430, 431, 432, 434, 435, 436, 437, 438, 439, 441, 446, 447, 448, 453, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 474, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 589, 590, 591, 592, 594, 595, 596, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 638, 642, 648, 655, 656, 657, 658, 685, 686, 687, 689, 691, 692, 693, 694, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 711, 712, 713, 714, 717, 725, 728], "let": [0, 2, 10, 22, 33, 167, 168, 169, 170, 173, 176, 185, 188, 190, 192, 201, 202, 203, 208, 210, 223, 231, 233, 234, 238, 422, 423, 499, 501, 504, 514, 556, 626, 628, 629, 630, 631, 672, 676, 678, 683, 686, 688, 689, 691, 692, 693, 694, 695, 702, 703, 704, 705, 706, 707, 709, 711, 712, 713, 714, 731], "start": [0, 1, 2, 5, 9, 26, 28, 32, 36, 69, 82, 85, 86, 275, 284, 291, 292, 294, 297, 335, 358, 496, 643, 654, 672, 677, 678, 681, 682, 683, 684, 690, 691, 693, 694, 696, 697, 702, 704, 707, 708, 709, 711, 712, 713, 716, 717, 724, 730], "simpl": [0, 2, 9, 32, 306, 394, 643, 672, 674, 681, 682, 683, 686, 688, 689, 691, 692, 693, 694, 698, 701, 702, 704, 705, 707, 711, 713, 714, 717, 719, 723, 724, 725, 726], "import": [0, 1, 2, 9, 20, 24, 28, 32, 47, 141, 142, 146, 147, 156, 158, 306, 394, 498, 507, 512, 582, 617, 648, 664, 672, 675, 678, 680, 681, 682, 683, 685, 686, 687, 688, 689, 691, 692, 693, 694, 696, 699, 700, 701, 702, 703, 704, 705, 709, 711, 712, 714, 717, 720, 722, 724, 727, 728, 730], "set_backend": [0, 2, 8, 24, 31, 114, 123, 141, 142, 156, 158, 171, 295, 341, 497, 498, 499, 507, 582, 664, 672, 685, 687, 691, 698, 699, 700, 709, 711, 714], "torch": [0, 2, 5, 10, 14, 24, 33, 37, 77, 114, 141, 142, 156, 158, 230, 432, 463, 496, 497, 498, 499, 501, 504, 507, 552, 582, 638, 653, 664, 672, 682, 683, 685, 686, 687, 688, 690, 691, 692, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 711, 712, 714, 717, 719, 730], "def": [0, 2, 8, 31, 66, 171, 409, 495, 501, 507, 508, 582, 589, 672, 681, 682, 685, 686, 689, 691, 692, 693, 695, 697, 698, 700, 701, 702, 703, 704, 705, 707, 709, 711, 712, 713, 714], "fn": [0, 9, 26, 29, 32, 51, 72, 73, 74, 75, 76, 113, 114, 146, 147, 150, 297, 348, 405, 420, 421, 469, 496, 497, 498, 501, 508, 589, 590, 591, 593, 594, 595, 636, 638, 661, 664, 667, 668, 670, 695, 701, 702, 709], "x": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 69, 70, 71, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 119, 120, 122, 127, 143, 144, 148, 153, 154, 155, 159, 161, 162, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 258, 260, 262, 263, 265, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 286, 288, 291, 292, 294, 295, 296, 297, 300, 304, 305, 306, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 352, 353, 355, 356, 358, 363, 364, 365, 366, 370, 371, 373, 374, 375, 376, 377, 378, 379, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 406, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 428, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 450, 451, 452, 455, 458, 459, 460, 462, 463, 465, 467, 468, 469, 480, 481, 483, 484, 485, 487, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 556, 557, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 586, 589, 590, 591, 592, 593, 594, 595, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 638, 641, 642, 643, 656, 658, 661, 664, 670, 672, 681, 686, 687, 689, 691, 693, 694, 695, 697, 698, 700, 701, 702, 703, 704, 705, 707, 709, 711, 712, 713, 714], "y": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 77, 82, 84, 85, 86, 87, 88, 89, 90, 91, 96, 99, 100, 101, 110, 112, 115, 127, 140, 144, 148, 153, 154, 155, 159, 161, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 201, 203, 204, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 246, 247, 248, 249, 250, 261, 272, 273, 274, 275, 276, 281, 282, 284, 286, 288, 291, 294, 295, 296, 297, 306, 314, 316, 317, 324, 326, 338, 341, 343, 345, 346, 353, 355, 363, 366, 369, 370, 373, 378, 379, 387, 393, 394, 395, 396, 397, 400, 403, 404, 407, 410, 411, 414, 415, 417, 418, 419, 422, 423, 424, 428, 430, 431, 432, 434, 435, 438, 439, 444, 450, 451, 452, 455, 458, 459, 460, 463, 465, 467, 468, 469, 472, 473, 476, 479, 480, 481, 491, 493, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 518, 520, 522, 525, 526, 527, 531, 532, 533, 537, 538, 540, 542, 543, 545, 546, 547, 548, 550, 552, 553, 554, 556, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 586, 589, 590, 592, 600, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 670, 672, 687, 689, 693, 700, 702, 703, 704, 705, 707, 709, 711], "z": [0, 5, 8, 9, 10, 14, 15, 18, 20, 22, 28, 31, 32, 33, 37, 38, 39, 41, 45, 48, 49, 85, 86, 88, 89, 148, 170, 171, 175, 177, 180, 182, 187, 198, 199, 202, 203, 204, 206, 207, 212, 214, 216, 217, 218, 219, 227, 236, 243, 244, 263, 286, 291, 296, 306, 346, 352, 353, 363, 393, 394, 397, 407, 419, 422, 423, 430, 431, 447, 459, 460, 469, 481, 496, 498, 499, 501, 504, 505, 506, 508, 510, 511, 512, 514, 532, 542, 547, 548, 552, 559, 561, 562, 563, 564, 586, 590, 592, 600, 604, 605, 606, 609, 614, 624, 625, 627, 628, 629, 655, 672, 687, 689, 693, 709, 711], "k": [0, 5, 9, 13, 14, 18, 28, 31, 32, 36, 37, 41, 66, 80, 92, 93, 94, 214, 250, 258, 288, 295, 297, 301, 304, 306, 339, 368, 370, 380, 381, 382, 383, 384, 387, 397, 407, 495, 496, 501, 503, 504, 508, 510, 511, 530, 534, 542, 543, 549, 551, 552, 553, 556, 591, 604, 605, 606, 612, 655, 672, 684, 685, 702, 703, 709, 720, 724], "j": [0, 5, 8, 9, 14, 22, 28, 31, 32, 37, 68, 89, 168, 169, 170, 171, 173, 176, 185, 187, 190, 192, 200, 208, 210, 214, 220, 231, 233, 234, 237, 238, 294, 295, 306, 320, 321, 325, 336, 337, 340, 342, 403, 407, 495, 496, 499, 501, 504, 514, 536, 556, 624, 683, 684, 688, 720], "concat": [0, 10, 16, 26, 39, 160, 419, 498, 501, 506, 579, 703, 707, 709], "sum_j": 0, "sum": [0, 2, 8, 9, 10, 13, 14, 15, 22, 26, 31, 32, 33, 36, 37, 38, 45, 48, 49, 160, 170, 212, 236, 278, 291, 296, 306, 335, 346, 400, 401, 416, 446, 447, 498, 499, 501, 503, 504, 505, 514, 526, 530, 543, 552, 556, 559, 561, 562, 563, 623, 624, 655, 672, 689, 691, 698, 700, 701, 702, 709], "1": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 70, 71, 77, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 99, 100, 101, 102, 106, 110, 111, 112, 115, 120, 122, 127, 143, 144, 148, 152, 153, 155, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 291, 292, 294, 295, 296, 297, 300, 301, 302, 304, 306, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 407, 408, 410, 411, 414, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 428, 430, 431, 432, 434, 435, 436, 438, 439, 441, 442, 444, 446, 447, 450, 459, 460, 461, 462, 463, 465, 467, 468, 469, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 584, 586, 589, 590, 591, 592, 594, 595, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 638, 641, 642, 643, 644, 648, 654, 655, 656, 657, 658, 659, 660, 664, 672, 675, 676, 682, 683, 685, 687, 688, 689, 690, 691, 693, 695, 696, 697, 698, 700, 701, 702, 703, 704, 705, 707, 708, 709, 711, 712, 713, 714, 717], "2": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 57, 58, 59, 60, 61, 62, 63, 67, 68, 69, 70, 71, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 99, 100, 101, 102, 106, 110, 112, 120, 122, 127, 143, 144, 145, 148, 151, 153, 155, 158, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 253, 256, 257, 258, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 291, 292, 294, 295, 297, 300, 301, 304, 306, 309, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 324, 325, 326, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 377, 378, 379, 382, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 428, 430, 431, 432, 434, 435, 436, 438, 439, 441, 442, 444, 446, 447, 450, 459, 460, 462, 463, 465, 469, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 584, 586, 589, 590, 591, 592, 594, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 641, 643, 644, 652, 655, 656, 664, 672, 682, 683, 685, 687, 688, 689, 690, 691, 693, 695, 697, 698, 700, 701, 702, 703, 704, 705, 708, 709, 711, 712, 713, 714, 717, 730, 731], "3": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 18, 19, 20, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 69, 70, 71, 80, 82, 84, 85, 87, 88, 89, 90, 91, 94, 95, 96, 99, 100, 101, 102, 106, 110, 112, 120, 122, 127, 141, 143, 144, 155, 158, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 291, 292, 294, 295, 297, 300, 301, 302, 304, 306, 311, 312, 313, 314, 316, 319, 320, 321, 324, 325, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 347, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 377, 378, 379, 382, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 399, 400, 401, 403, 404, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 422, 423, 426, 428, 430, 431, 432, 434, 435, 436, 438, 439, 441, 442, 446, 447, 459, 460, 465, 468, 469, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 550, 552, 553, 554, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 584, 586, 589, 590, 591, 592, 594, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 638, 641, 644, 656, 672, 681, 682, 685, 686, 687, 689, 690, 691, 693, 695, 700, 703, 704, 709, 711, 712, 713, 714, 731], "4": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 62, 63, 69, 70, 71, 77, 80, 82, 84, 85, 86, 87, 88, 89, 91, 94, 96, 100, 101, 102, 110, 112, 115, 120, 122, 127, 144, 145, 153, 158, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 205, 206, 207, 208, 209, 210, 212, 213, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 246, 247, 248, 249, 250, 252, 256, 257, 258, 263, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 281, 284, 286, 288, 291, 292, 294, 295, 297, 300, 301, 302, 304, 306, 311, 312, 314, 316, 317, 319, 320, 321, 324, 325, 329, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 347, 349, 350, 351, 353, 354, 355, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 377, 378, 379, 382, 384, 385, 387, 392, 393, 394, 395, 396, 397, 399, 400, 401, 403, 410, 411, 414, 415, 416, 417, 419, 422, 423, 425, 428, 430, 431, 432, 439, 446, 447, 460, 462, 463, 465, 469, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 530, 531, 533, 534, 535, 536, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 550, 552, 553, 554, 556, 557, 559, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 584, 586, 589, 590, 591, 592, 594, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 638, 641, 642, 644, 655, 656, 659, 672, 676, 681, 682, 687, 688, 689, 690, 691, 693, 700, 703, 704, 707, 709, 711, 712, 713, 714, 724, 730, 731], "compiled_fn": 0, "In": [0, 2, 7, 10, 16, 30, 33, 39, 154, 161, 162, 166, 170, 187, 188, 194, 202, 203, 220, 223, 229, 231, 294, 300, 316, 317, 318, 374, 376, 405, 432, 498, 499, 501, 504, 506, 510, 550, 571, 606, 672, 674, 676, 678, 681, 682, 683, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 711, 712, 713, 714, 716, 717, 720, 722, 724, 725, 727, 730], "case": [0, 2, 4, 5, 9, 10, 16, 22, 26, 28, 32, 33, 39, 49, 71, 87, 113, 114, 141, 146, 147, 154, 162, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 182, 183, 184, 185, 187, 188, 190, 192, 193, 194, 195, 201, 202, 203, 208, 209, 210, 211, 212, 215, 220, 223, 225, 229, 230, 231, 232, 233, 234, 237, 238, 240, 269, 271, 281, 291, 294, 297, 300, 301, 316, 317, 318, 349, 350, 351, 354, 356, 358, 359, 360, 362, 365, 368, 372, 374, 376, 382, 425, 432, 446, 447, 448, 496, 497, 498, 499, 501, 504, 506, 508, 514, 550, 556, 567, 568, 569, 571, 573, 574, 576, 578, 586, 592, 625, 626, 627, 628, 629, 630, 631, 641, 657, 659, 672, 675, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 701, 702, 703, 704, 705, 707, 709, 711, 713, 714, 717, 723, 727], "would": [0, 1, 5, 7, 9, 16, 28, 30, 32, 39, 58, 62, 71, 161, 294, 297, 320, 325, 349, 350, 351, 354, 356, 358, 359, 360, 362, 365, 368, 372, 425, 493, 498, 501, 506, 567, 568, 569, 571, 573, 574, 576, 578, 643, 672, 675, 677, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 693, 694, 697, 699, 701, 702, 703, 704, 707, 708, 709, 711, 713, 714, 717, 724, 730], "can": [0, 1, 2, 5, 6, 9, 10, 14, 16, 18, 20, 28, 29, 32, 33, 37, 39, 41, 43, 70, 71, 86, 88, 102, 141, 158, 159, 160, 245, 286, 294, 300, 301, 304, 306, 315, 328, 353, 374, 381, 382, 387, 394, 439, 481, 484, 496, 497, 498, 501, 502, 503, 504, 506, 510, 529, 535, 542, 552, 556, 571, 575, 604, 605, 606, 614, 638, 641, 642, 643, 644, 648, 655, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 721, 722, 723, 724, 725, 727, 728, 730, 731], "observ": [0, 9, 32, 306, 393, 394, 683, 695, 709, 726], "As": [0, 2, 20, 24, 47, 512, 614, 615, 616, 617, 672, 674, 682, 683, 686, 688, 689, 690, 691, 692, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 707, 711, 712, 713, 717, 724, 729], "variabl": [0, 1, 9, 10, 11, 17, 26, 32, 33, 34, 40, 66, 67, 68, 301, 306, 382, 393, 394, 408, 432, 433, 434, 435, 438, 463, 483, 484, 486, 488, 489, 490, 495, 501, 502, 504, 507, 509, 551, 580, 581, 582, 602, 638, 648, 653, 654, 655, 656, 657, 658, 659, 660, 683, 687, 691, 694, 697, 700, 701, 704, 705, 709, 712, 713, 714, 717, 725], "calcul": [0, 8, 9, 10, 15, 22, 26, 31, 32, 33, 37, 38, 45, 49, 167, 168, 169, 170, 171, 172, 173, 174, 175, 184, 185, 187, 190, 191, 192, 208, 209, 210, 211, 212, 213, 218, 219, 220, 225, 232, 233, 234, 236, 237, 238, 271, 281, 291, 294, 295, 297, 300, 306, 311, 312, 313, 341, 366, 374, 376, 401, 439, 499, 501, 504, 505, 514, 538, 547, 550, 561, 562, 563, 625, 626, 627, 628, 629, 630, 631, 641, 643, 655, 656, 658, 675, 681, 694, 709], "valu": [0, 5, 6, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 26, 28, 29, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 63, 66, 67, 68, 69, 80, 83, 84, 85, 86, 89, 94, 99, 116, 120, 126, 159, 160, 167, 168, 169, 170, 172, 174, 175, 176, 183, 187, 188, 189, 190, 192, 193, 194, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 245, 249, 250, 256, 258, 259, 261, 262, 263, 265, 266, 267, 270, 271, 273, 274, 276, 279, 281, 282, 283, 284, 286, 288, 291, 292, 294, 295, 297, 300, 301, 305, 306, 315, 328, 330, 335, 339, 341, 357, 361, 366, 367, 369, 370, 371, 374, 376, 380, 381, 383, 384, 390, 392, 395, 396, 397, 400, 401, 403, 408, 409, 410, 411, 412, 414, 419, 422, 423, 425, 427, 430, 431, 432, 439, 446, 447, 450, 451, 452, 455, 463, 468, 472, 473, 476, 479, 480, 481, 482, 483, 484, 488, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 534, 537, 538, 543, 544, 545, 548, 549, 550, 551, 552, 553, 556, 559, 564, 565, 566, 570, 571, 579, 580, 581, 585, 587, 588, 589, 590, 591, 596, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 636, 638, 641, 642, 643, 644, 647, 654, 655, 656, 657, 658, 659, 682, 683, 685, 688, 689, 691, 692, 693, 694, 695, 697, 698, 701, 702, 704, 706, 707, 709, 711, 717, 724, 725], "wa": [0, 2, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 55, 56, 57, 58, 59, 60, 61, 62, 63, 82, 84, 89, 91, 96, 100, 102, 127, 161, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 248, 249, 250, 261, 262, 263, 265, 272, 273, 279, 280, 281, 282, 283, 284, 291, 316, 317, 318, 349, 350, 351, 353, 368, 369, 370, 374, 376, 377, 378, 379, 381, 394, 395, 396, 397, 404, 407, 408, 410, 411, 415, 416, 417, 419, 422, 423, 426, 428, 430, 431, 432, 434, 435, 438, 446, 447, 460, 461, 463, 465, 467, 468, 469, 480, 486, 491, 499, 501, 508, 514, 515, 517, 518, 519, 520, 526, 527, 530, 531, 532, 537, 538, 540, 542, 543, 545, 547, 549, 550, 556, 561, 562, 563, 564, 568, 571, 572, 573, 574, 575, 578, 579, 596, 603, 604, 605, 606, 608, 611, 614, 615, 616, 617, 618, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 664, 672, 675, 683, 685, 690, 693, 698, 700, 702, 709, 711, 723, 724, 726], "like": [0, 2, 5, 8, 9, 16, 28, 31, 32, 36, 39, 44, 86, 103, 126, 171, 191, 197, 200, 213, 231, 266, 268, 280, 291, 294, 295, 297, 304, 335, 336, 340, 350, 351, 358, 386, 387, 496, 497, 499, 504, 506, 510, 513, 536, 571, 606, 619, 672, 675, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 696, 697, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 711, 712, 713, 714, 716, 717, 724, 729], "were": [0, 26, 29, 115, 119, 120, 194, 499, 683, 691, 695, 696, 700, 701, 703, 704, 705, 707, 709, 724, 725, 730], "exclud": [0, 22, 32, 45, 69, 94, 258, 288, 395, 396, 496, 510, 606, 622, 641, 644, 664, 693, 709], "process": [0, 154, 166, 498, 675, 676, 677, 682, 683, 688, 689, 690, 696, 698, 700, 702, 703, 704, 707, 709, 714, 722, 723, 724, 727, 728, 730, 731], "tensor": [0, 2, 5, 8, 9, 10, 13, 15, 16, 18, 26, 28, 31, 32, 33, 36, 37, 38, 39, 41, 77, 85, 86, 89, 94, 110, 126, 218, 219, 245, 258, 262, 286, 288, 291, 294, 297, 306, 311, 312, 315, 319, 328, 329, 330, 358, 400, 446, 447, 496, 497, 499, 501, 503, 504, 505, 506, 510, 526, 528, 529, 541, 554, 561, 571, 573, 603, 656, 664, 672, 674, 686, 687, 691, 692, 697, 698, 701, 702, 703, 704, 705, 707, 709, 711, 712, 714, 717, 719, 721, 722, 725, 727, 728, 731], "shape": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 69, 70, 71, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 155, 161, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 257, 258, 262, 263, 264, 266, 268, 270, 272, 274, 275, 276, 277, 281, 283, 286, 288, 291, 294, 295, 296, 297, 300, 301, 302, 304, 306, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 325, 326, 328, 329, 330, 331, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 351, 352, 353, 356, 365, 366, 368, 369, 370, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 392, 393, 394, 395, 396, 397, 410, 411, 415, 416, 417, 419, 422, 423, 426, 432, 439, 446, 447, 456, 464, 466, 477, 481, 482, 483, 486, 488, 489, 490, 491, 493, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 583, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 618, 619, 621, 622, 623, 624, 626, 628, 629, 631, 632, 633, 638, 641, 643, 655, 656, 658, 672, 683, 689, 691, 692, 693, 694, 695, 697, 701, 702, 703, 704, 705, 706, 709, 711, 712, 713, 714], "indic": [0, 5, 9, 10, 13, 14, 16, 17, 19, 20, 21, 26, 28, 29, 32, 33, 36, 37, 39, 40, 42, 43, 44, 70, 71, 89, 92, 94, 115, 119, 120, 231, 258, 271, 288, 291, 294, 295, 297, 302, 304, 311, 312, 313, 315, 319, 320, 321, 325, 326, 329, 330, 331, 332, 336, 341, 349, 350, 351, 354, 356, 358, 359, 360, 362, 365, 367, 368, 369, 370, 371, 372, 385, 386, 387, 407, 422, 423, 425, 446, 447, 450, 481, 484, 485, 496, 499, 501, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 517, 519, 520, 521, 522, 525, 529, 545, 559, 567, 568, 569, 571, 572, 573, 574, 576, 578, 583, 586, 588, 590, 591, 592, 594, 598, 599, 600, 601, 602, 603, 609, 610, 611, 612, 614, 616, 618, 620, 621, 638, 639, 641, 643, 654, 656, 657, 661, 668, 690, 697, 700, 702, 714], "trace": [0, 2, 10, 14, 26, 33, 37, 434, 435, 438, 449, 457, 471, 478, 501, 504, 672, 685, 691, 706, 709, 717, 719, 725, 730], "doesn": [0, 432, 501, 682, 687, 689, 690, 691, 693, 696, 700, 704, 707, 709, 717, 722], "impos": 0, "addit": [0, 7, 9, 10, 17, 30, 32, 33, 40, 67, 68, 161, 170, 230, 306, 393, 398, 415, 416, 417, 481, 495, 498, 499, 501, 507, 509, 582, 602, 656, 681, 682, 683, 687, 689, 691, 693, 694, 696, 698, 700, 701, 702, 704, 705, 707, 711, 712, 714, 724, 725, 726, 730], "restrict": [0, 689, 690, 702, 709, 721], "datatyp": [0, 5, 26, 28, 71, 84, 88, 104, 125, 129, 496, 497, 636, 705], "out": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 69, 70, 71, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 99, 101, 110, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 288, 291, 294, 295, 296, 297, 300, 301, 302, 304, 306, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 328, 329, 330, 331, 332, 334, 336, 337, 338, 339, 340, 343, 344, 345, 346, 352, 353, 355, 356, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 410, 411, 415, 416, 417, 419, 422, 423, 432, 442, 446, 447, 482, 483, 486, 488, 489, 490, 491, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 579, 583, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 641, 648, 652, 653, 655, 656, 657, 658, 659, 660, 672, 674, 675, 676, 677, 678, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 716, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731], "differ": [0, 1, 2, 8, 9, 10, 22, 26, 32, 33, 45, 48, 49, 112, 170, 187, 194, 195, 220, 236, 261, 266, 268, 269, 273, 291, 294, 297, 306, 326, 336, 359, 360, 368, 395, 396, 403, 422, 423, 497, 499, 501, 503, 504, 506, 514, 526, 527, 550, 565, 575, 622, 623, 628, 630, 631, 657, 672, 674, 675, 676, 680, 681, 682, 683, 684, 686, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 700, 701, 702, 703, 704, 705, 707, 709, 710, 711, 712, 713, 714, 717, 721, 722, 723, 724, 727, 730, 731], "b": [0, 3, 8, 9, 10, 13, 22, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 70, 71, 77, 80, 82, 83, 84, 86, 89, 91, 96, 99, 100, 101, 102, 110, 120, 122, 127, 144, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 291, 294, 295, 297, 301, 304, 306, 311, 312, 313, 314, 316, 317, 320, 324, 325, 326, 329, 330, 331, 335, 341, 343, 345, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 372, 373, 378, 379, 381, 382, 384, 385, 387, 394, 395, 396, 397, 399, 401, 403, 404, 407, 408, 410, 411, 414, 415, 416, 417, 418, 419, 422, 423, 426, 428, 430, 431, 432, 434, 435, 438, 439, 446, 447, 460, 463, 467, 468, 480, 482, 483, 484, 486, 488, 490, 491, 493, 496, 497, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 530, 531, 532, 533, 535, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 550, 551, 552, 553, 554, 556, 557, 559, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 586, 589, 590, 591, 592, 594, 600, 601, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 672, 673, 676, 677, 683, 684, 685, 687, 689, 690, 693, 698, 700, 703, 708, 709, 710, 712, 713, 714, 715, 720], "new": [0, 1, 9, 10, 11, 16, 17, 26, 28, 32, 33, 34, 37, 39, 40, 43, 78, 81, 83, 84, 89, 90, 91, 95, 96, 133, 176, 222, 224, 228, 261, 264, 273, 278, 291, 297, 306, 347, 353, 365, 367, 401, 415, 416, 417, 419, 422, 423, 425, 446, 447, 451, 458, 460, 461, 467, 483, 486, 488, 489, 490, 496, 497, 499, 501, 502, 506, 508, 509, 547, 567, 571, 575, 588, 600, 601, 602, 617, 653, 656, 658, 659, 664, 672, 674, 675, 676, 677, 681, 682, 683, 684, 686, 687, 689, 690, 691, 693, 694, 699, 701, 702, 703, 704, 705, 707, 708, 711, 714, 716, 719, 722, 726, 730, 731], "run": [0, 2, 9, 11, 32, 34, 300, 374, 376, 482, 483, 488, 502, 507, 580, 581, 582, 638, 639, 656, 657, 658, 672, 678, 679, 681, 682, 684, 686, 687, 690, 693, 695, 696, 697, 699, 702, 703, 709, 710, 711, 712, 713, 714, 716, 717, 718, 722, 724, 725, 726, 727, 729, 730, 731], "under": [0, 2, 296, 346, 672, 681, 682, 683, 684, 685, 689, 693, 694, 698, 702, 703, 704, 707, 708, 709, 712, 714, 717, 724, 727, 731], "hood": [0, 2, 672, 684, 689, 693, 698, 702, 704, 707, 708, 709, 712, 714, 731], "track": [0, 508, 595, 654, 657, 682, 683, 685, 700, 701, 724], "befor": [0, 2, 9, 13, 14, 16, 20, 22, 26, 32, 36, 37, 157, 160, 165, 294, 297, 306, 320, 325, 335, 359, 360, 366, 395, 396, 498, 503, 504, 506, 507, 508, 512, 514, 516, 517, 518, 519, 521, 523, 525, 529, 530, 542, 559, 565, 580, 581, 595, 614, 615, 616, 617, 622, 623, 628, 630, 654, 664, 681, 682, 683, 685, 686, 688, 691, 692, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 709, 712, 717, 724], "instead": [0, 2, 8, 9, 14, 31, 32, 37, 141, 229, 253, 288, 306, 394, 397, 498, 499, 504, 545, 641, 681, 682, 683, 685, 688, 689, 690, 691, 693, 694, 695, 697, 698, 699, 701, 702, 703, 704, 707, 709, 711, 712, 717, 722, 724, 730, 731], "allow": [0, 2, 9, 32, 85, 225, 306, 397, 401, 442, 496, 499, 501, 513, 620, 641, 642, 643, 644, 654, 657, 670, 672, 675, 678, 681, 683, 686, 687, 690, 691, 695, 696, 699, 700, 701, 702, 703, 704, 707, 709, 711, 717, 719, 722, 724, 728, 729], "dynam": [0, 506, 571, 664, 684, 687, 690, 691, 692, 701, 702, 706, 709, 724, 728], "done": [0, 2, 504, 538, 680, 681, 682, 683, 685, 688, 690, 693, 696, 701, 702, 704, 712, 724], "first": [0, 1, 2, 5, 8, 9, 14, 16, 18, 19, 20, 22, 28, 31, 32, 33, 37, 39, 41, 43, 45, 48, 49, 66, 67, 85, 86, 94, 125, 133, 143, 170, 175, 177, 179, 180, 181, 182, 188, 194, 195, 196, 197, 198, 199, 205, 206, 207, 212, 213, 214, 216, 217, 220, 223, 225, 236, 237, 245, 250, 258, 259, 261, 269, 271, 272, 273, 279, 282, 283, 286, 288, 291, 294, 295, 297, 304, 306, 315, 340, 341, 343, 354, 358, 364, 366, 368, 371, 381, 383, 387, 395, 396, 397, 403, 407, 495, 496, 497, 498, 499, 501, 503, 504, 506, 507, 508, 511, 512, 513, 514, 529, 532, 535, 536, 537, 539, 542, 547, 549, 550, 552, 554, 558, 571, 572, 575, 576, 580, 581, 582, 583, 584, 593, 594, 596, 608, 609, 610, 614, 615, 616, 619, 620, 622, 623, 638, 655, 656, 657, 659, 664, 672, 674, 675, 678, 679, 680, 681, 682, 683, 685, 686, 688, 689, 693, 696, 697, 698, 699, 701, 702, 704, 707, 709, 711, 712, 714, 722, 724, 725, 729], "invok": [0, 2, 9, 294, 315, 672, 696, 698], "onc": [0, 1, 14, 18, 37, 41, 160, 295, 340, 498, 504, 510, 536, 537, 538, 552, 603, 676, 681, 682, 683, 689, 690, 691, 692, 693, 696, 701, 702, 704, 707, 709, 712, 717], "been": [0, 1, 10, 18, 33, 41, 143, 230, 415, 416, 417, 498, 499, 501, 510, 603, 681, 683, 685, 687, 689, 690, 691, 692, 694, 695, 697, 698, 701, 704, 709, 711, 716, 717, 719, 724, 731], "directli": [0, 1, 2, 508, 595, 672, 676, 683, 685, 686, 689, 690, 691, 692, 694, 696, 698, 699, 701, 702, 703, 705, 706, 709, 711, 713, 714, 716, 717, 728, 729, 730], "here": [0, 2, 230, 499, 672, 680, 681, 682, 683, 685, 688, 689, 690, 691, 693, 696, 697, 699, 700, 701, 702, 703, 704, 705, 709, 710, 711, 712, 713, 714, 716, 717, 724, 725], "eager_graph": [0, 2, 672], "doe": [0, 8, 9, 10, 16, 26, 31, 32, 39, 94, 182, 221, 223, 231, 258, 288, 295, 296, 306, 340, 346, 400, 401, 432, 496, 499, 501, 504, 506, 536, 573, 636, 675, 681, 683, 684, 687, 690, 691, 693, 694, 697, 698, 701, 702, 703, 704, 707, 709, 711, 712, 717, 719, 720, 724, 725, 731], "lazy_graph": [0, 2, 672], "up": [0, 9, 10, 32, 33, 294, 297, 315, 328, 360, 439, 501, 503, 526, 654, 674, 675, 676, 677, 678, 681, 683, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 710, 711, 712, 713, 714, 716, 717, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731], "enabl": [0, 9, 14, 26, 37, 49, 294, 296, 315, 346, 504, 545, 672, 675, 682, 683, 686, 689, 691, 698, 699, 700, 701, 702, 704, 705, 708, 710, 712, 714, 717, 719, 722, 723, 724, 725, 726, 727, 730, 731], "delai": [0, 683], "until": [0, 675, 683, 701, 705, 709, 717, 731], "have": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 69, 70, 71, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 99, 100, 101, 112, 161, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 248, 249, 250, 262, 263, 270, 272, 274, 275, 276, 277, 281, 283, 286, 288, 291, 294, 295, 296, 297, 300, 301, 302, 304, 306, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 325, 326, 328, 329, 330, 331, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 350, 351, 353, 354, 356, 368, 370, 377, 378, 379, 380, 381, 383, 384, 385, 387, 394, 395, 396, 397, 401, 410, 411, 415, 416, 417, 422, 423, 432, 446, 447, 482, 483, 486, 488, 489, 490, 491, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 579, 583, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 641, 652, 653, 654, 655, 656, 657, 658, 659, 660, 672, 673, 674, 675, 676, 678, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731], "necessari": [0, 2, 5, 9, 16, 28, 32, 39, 71, 187, 220, 297, 349, 350, 351, 354, 356, 358, 359, 360, 362, 365, 368, 372, 425, 454, 475, 499, 501, 506, 567, 568, 569, 571, 573, 574, 576, 578, 672, 682, 686, 687, 689, 693, 701, 702, 704, 706, 707], "particularli": [0, 683, 712, 717, 722], "librari": [0, 7, 20, 30, 161, 192, 194, 210, 215, 216, 238, 498, 499, 504, 512, 514, 537, 538, 614, 615, 616, 617, 625, 626, 627, 629, 672, 674, 675, 676, 677, 679, 681, 682, 685, 714, 715, 717, 719, 720, 721, 722, 724, 728, 731], "where": [0, 5, 8, 9, 10, 14, 16, 18, 19, 22, 23, 26, 28, 31, 32, 33, 37, 39, 41, 42, 45, 46, 83, 84, 87, 89, 94, 175, 185, 187, 190, 192, 194, 195, 204, 209, 210, 211, 218, 219, 220, 225, 227, 231, 233, 237, 243, 245, 258, 259, 269, 273, 280, 286, 288, 291, 294, 295, 297, 300, 301, 306, 308, 309, 315, 320, 321, 325, 340, 341, 349, 350, 351, 361, 366, 374, 375, 376, 380, 381, 383, 384, 394, 403, 432, 446, 481, 496, 499, 501, 503, 504, 506, 508, 510, 511, 514, 515, 529, 532, 536, 537, 541, 543, 545, 547, 548, 549, 552, 553, 556, 558, 564, 566, 567, 569, 575, 579, 594, 603, 604, 605, 606, 611, 612, 629, 631, 632, 633, 655, 658, 672, 674, 675, 676, 677, 682, 683, 685, 686, 687, 688, 689, 691, 692, 694, 695, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 712, 713, 714, 717, 718, 722, 731], "feasibl": [0, 675, 681, 690], "provid": [0, 2, 5, 9, 10, 14, 16, 19, 22, 23, 26, 28, 32, 33, 37, 39, 42, 45, 46, 66, 87, 89, 105, 106, 107, 108, 109, 117, 127, 139, 143, 239, 297, 300, 354, 362, 372, 374, 376, 409, 414, 446, 447, 495, 496, 497, 498, 499, 501, 503, 504, 506, 511, 514, 515, 529, 544, 547, 558, 567, 568, 575, 609, 629, 631, 632, 633, 642, 656, 659, 664, 672, 674, 681, 682, 683, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 704, 707, 711, 713, 716, 717, 722, 723, 724, 725, 726, 727, 728, 731], "valid": [0, 9, 13, 23, 32, 36, 46, 104, 294, 295, 311, 312, 313, 329, 330, 331, 332, 334, 335, 345, 435, 497, 501, 503, 506, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 567, 575, 632, 633, 641, 642, 656, 682, 687, 691, 693, 696, 700, 703, 704, 725], "look": [0, 672, 674, 678, 681, 682, 683, 687, 688, 689, 691, 692, 693, 695, 696, 697, 698, 702, 703, 704, 705, 706, 707, 709, 711, 713, 714, 718, 720, 724], "find": [0, 1, 14, 20, 26, 37, 504, 508, 512, 545, 585, 614, 615, 616, 617, 672, 674, 677, 680, 681, 682, 683, 685, 688, 690, 700, 704, 707, 709, 712, 719], "abl": [0, 26, 682, 683, 685, 691, 698, 701, 702, 709, 714, 727, 730], "through": [0, 9, 32, 175, 306, 400, 401, 499, 508, 586, 592, 657, 672, 677, 680, 681, 683, 684, 687, 688, 689, 690, 693, 695, 696, 698, 699, 701, 702, 703, 704, 706, 707, 708, 709, 712, 713, 714, 716, 722, 724, 725, 726], "flag": [0, 2, 26, 143, 306, 394, 498, 503, 529, 638, 648, 658, 683, 691, 701, 702, 703, 704], "reduc": [0, 9, 10, 14, 19, 22, 23, 26, 32, 33, 37, 42, 45, 46, 160, 278, 291, 292, 306, 399, 400, 401, 403, 416, 498, 501, 504, 511, 514, 515, 549, 609, 610, 625, 626, 627, 628, 629, 630, 631, 632, 633, 690, 695, 702, 707, 709, 711, 722, 726, 727, 728], "time": [0, 1, 2, 9, 11, 14, 20, 32, 34, 43, 82, 266, 291, 294, 297, 306, 321, 326, 366, 368, 394, 483, 488, 496, 502, 503, 504, 506, 507, 511, 512, 526, 528, 542, 577, 580, 581, 582, 609, 610, 614, 615, 656, 657, 674, 675, 676, 681, 682, 683, 687, 689, 690, 691, 693, 697, 698, 699, 701, 702, 704, 705, 709, 712, 714, 717, 722, 724, 725, 728, 729, 730], "comp_func": 0, "default": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 69, 70, 71, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 119, 120, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 143, 144, 146, 147, 151, 154, 155, 156, 158, 159, 160, 161, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 291, 292, 294, 295, 296, 297, 300, 301, 302, 304, 306, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 348, 349, 350, 351, 353, 354, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 407, 408, 409, 410, 411, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 430, 431, 432, 434, 435, 438, 439, 442, 443, 446, 447, 450, 455, 459, 460, 461, 463, 465, 467, 468, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 493, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 589, 590, 591, 593, 594, 595, 596, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 638, 641, 642, 643, 644, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 681, 682, 683, 687, 688, 691, 692, 693, 694, 695, 697, 698, 702, 704, 707, 709, 713, 719, 724], "follow": [0, 9, 10, 11, 13, 14, 20, 26, 32, 33, 34, 36, 37, 82, 115, 160, 170, 187, 194, 220, 222, 229, 230, 294, 297, 300, 315, 328, 356, 366, 367, 374, 376, 430, 431, 432, 460, 461, 483, 486, 488, 489, 490, 496, 497, 498, 499, 501, 502, 503, 504, 508, 512, 529, 530, 543, 549, 559, 589, 595, 614, 615, 616, 617, 656, 659, 672, 674, 675, 679, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 717, 718, 721, 724, 727], "show": [0, 449, 457, 478, 501, 654, 672, 681, 682, 683, 688, 690, 693, 696, 701, 702, 704, 706, 716, 717, 724], "simpler": [0, 681, 683, 725, 731], "obtain": [0, 294, 332, 503, 529, 643, 702], "howev": [0, 14, 37, 194, 237, 238, 300, 374, 376, 499, 504, 550, 552, 664, 675, 681, 682, 683, 685, 686, 687, 689, 691, 692, 693, 694, 695, 697, 698, 701, 702, 703, 704, 707, 709, 711, 712, 713, 714, 717, 723, 724, 730], "desir": [0, 6, 7, 9, 19, 26, 29, 30, 32, 42, 99, 101, 102, 161, 306, 400, 403, 497, 498, 504, 511, 554, 611, 655, 656, 674, 683, 687, 690, 691, 702, 709, 724], "below": [0, 2, 5, 14, 37, 45, 92, 93, 94, 194, 204, 227, 258, 263, 288, 291, 496, 499, 504, 535, 556, 631, 672, 677, 681, 682, 684, 685, 689, 690, 691, 692, 693, 695, 698, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 720, 722, 727, 729], "ultim": 0, "trade": 0, "off": [0, 13, 14, 36, 37, 316, 317, 318, 503, 504, 526, 535, 556, 655, 656, 676, 682, 708, 730], "between": [0, 2, 8, 9, 10, 13, 14, 15, 16, 20, 26, 31, 32, 36, 38, 39, 49, 69, 112, 175, 188, 223, 225, 239, 261, 273, 275, 291, 296, 297, 306, 316, 317, 318, 346, 366, 403, 496, 497, 499, 503, 505, 506, 508, 510, 512, 526, 547, 561, 562, 563, 567, 575, 589, 604, 615, 616, 617, 642, 659, 674, 686, 687, 689, 693, 697, 698, 699, 701, 702, 703, 704, 707, 708, 710, 711, 712, 714, 716, 720, 721, 723, 724, 725, 730], "memori": [0, 5, 9, 16, 28, 32, 39, 71, 87, 142, 154, 160, 162, 166, 297, 306, 349, 350, 351, 354, 356, 358, 359, 360, 362, 365, 368, 372, 401, 425, 445, 496, 498, 501, 503, 506, 528, 567, 568, 569, 571, 573, 574, 576, 578, 672, 690, 691, 692, 701, 702, 707, 709, 715, 717, 724, 726, 727, 728], "store": [0, 6, 10, 14, 16, 26, 29, 33, 37, 39, 43, 80, 91, 96, 101, 294, 336, 419, 496, 501, 504, 506, 556, 573, 617, 638, 639, 657, 679, 683, 686, 687, 689, 694, 699, 701, 702, 703, 709, 711, 712, 713, 719], "thei": [0, 9, 14, 18, 20, 26, 37, 41, 43, 125, 239, 268, 291, 497, 499, 504, 507, 510, 512, 557, 580, 581, 603, 614, 636, 660, 672, 680, 681, 684, 685, 687, 688, 689, 690, 691, 692, 693, 695, 696, 698, 699, 701, 702, 704, 705, 707, 709, 711, 712, 713, 714, 717, 721, 724, 726, 727, 730, 731], "By": [0, 9, 15, 16, 22, 23, 32, 38, 39, 45, 46, 234, 260, 271, 278, 288, 291, 294, 296, 304, 306, 315, 346, 387, 394, 397, 499, 504, 505, 506, 514, 515, 532, 558, 561, 570, 622, 625, 626, 627, 628, 629, 630, 631, 632, 633, 682, 691, 693, 695, 698, 700, 701, 702, 709, 713, 714], "choos": [0, 7, 19, 20, 30, 161, 187, 194, 215, 216, 220, 498, 499, 511, 512, 514, 613, 614, 615, 616, 617, 625, 626, 627, 629, 681, 682, 683, 704, 710, 714], "node": [0, 2, 26, 33, 408, 463, 508, 593, 594, 655, 663, 675, 688, 689, 702, 725], "bake": 0, "randint": [0, 13, 18, 20, 36, 41, 510, 512, 525, 528, 614, 691], "0": [0, 2, 3, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 67, 68, 69, 77, 80, 82, 83, 84, 85, 86, 89, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 110, 112, 115, 116, 120, 122, 127, 140, 143, 145, 148, 153, 154, 155, 156, 158, 159, 160, 162, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 286, 288, 291, 292, 294, 295, 296, 297, 300, 301, 304, 306, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 329, 331, 332, 335, 336, 338, 339, 340, 341, 342, 344, 346, 348, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 407, 409, 410, 411, 414, 415, 416, 418, 419, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 434, 435, 436, 438, 439, 442, 444, 446, 447, 450, 455, 459, 460, 463, 465, 467, 468, 476, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 540, 542, 543, 544, 545, 546, 548, 550, 552, 553, 554, 556, 557, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 584, 586, 589, 590, 591, 592, 594, 595, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 638, 641, 642, 643, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 672, 682, 683, 685, 687, 689, 690, 691, 693, 694, 695, 700, 701, 702, 703, 704, 705, 709, 711, 712, 713, 714, 717], "100": [0, 5, 8, 28, 31, 33, 86, 94, 181, 221, 234, 258, 273, 288, 291, 294, 316, 317, 423, 431, 447, 496, 499, 501, 504, 508, 540, 589, 672, 675, 676, 690, 691, 704, 712, 713, 714, 717], "size": [0, 9, 10, 13, 14, 16, 18, 19, 26, 32, 33, 36, 37, 39, 41, 42, 48, 49, 82, 85, 158, 159, 160, 252, 259, 260, 265, 278, 284, 288, 291, 292, 294, 295, 297, 300, 301, 304, 306, 308, 309, 310, 311, 312, 328, 329, 330, 332, 333, 341, 354, 370, 375, 376, 382, 387, 399, 400, 401, 403, 441, 446, 496, 498, 501, 503, 504, 506, 510, 511, 515, 530, 532, 535, 539, 543, 547, 549, 552, 558, 567, 572, 573, 574, 603, 609, 612, 632, 633, 641, 643, 644, 656, 672, 701, 703, 704, 707, 712], "rand": [0, 672], "And": [0, 29, 672, 688, 696, 704], "final": [0, 2, 5, 10, 32, 33, 68, 85, 86, 294, 336, 419, 495, 496, 501, 503, 529, 681, 683, 685, 686, 688, 690, 691, 693, 694, 698, 700, 701, 702, 707, 708, 712, 720, 730], "__setattr__": [0, 689], "__getattr__": [0, 689], "arbitrari": [0, 2, 5, 6, 9, 26, 29, 87, 100, 127, 349, 350, 351, 484, 496, 497, 502, 689, 697, 698, 700, 701, 702, 704, 713, 717, 725, 730], "class": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 82, 91, 96, 112, 115, 128, 130, 131, 190, 227, 263, 291, 305, 306, 312, 330, 340, 400, 401, 406, 408, 415, 432, 442, 463, 496, 497, 498, 499, 501, 503, 505, 508, 509, 511, 512, 528, 530, 536, 547, 561, 583, 584, 595, 602, 612, 616, 617, 628, 629, 638, 639, 645, 646, 647, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 670, 672, 681, 688, 689, 691, 692, 693, 694, 697, 699, 700, 703, 704, 707, 709, 710, 712, 713, 714, 715, 716, 717, 719, 722, 724, 725, 731], "cont": 0, "new_attribut": 0, "contain": [0, 3, 4, 5, 6, 8, 9, 10, 14, 15, 16, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 69, 70, 71, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 110, 112, 113, 114, 115, 118, 119, 120, 122, 124, 127, 144, 146, 147, 148, 153, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 291, 293, 294, 295, 296, 297, 300, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 324, 325, 326, 328, 329, 330, 331, 332, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 415, 416, 417, 418, 419, 420, 421, 422, 423, 426, 428, 430, 431, 432, 434, 435, 436, 438, 439, 441, 446, 447, 450, 453, 455, 460, 461, 462, 463, 465, 467, 468, 474, 480, 481, 482, 483, 484, 486, 488, 489, 490, 491, 493, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 586, 590, 591, 592, 596, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 638, 641, 647, 648, 654, 656, 657, 659, 660, 664, 672, 674, 678, 679, 681, 682, 684, 685, 686, 688, 690, 691, 693, 694, 697, 698, 699, 700, 701, 704, 706, 707, 708, 709, 710, 713, 717, 718, 719, 724, 725, 730], "cont_deep_copi": [0, 26, 712], "some": [0, 2, 26, 34, 192, 194, 210, 294, 316, 317, 318, 482, 483, 486, 488, 489, 490, 498, 499, 502, 508, 594, 656, 672, 675, 676, 681, 682, 683, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 711, 712, 713, 716, 717, 718, 719, 720, 721, 723, 724, 725, 730, 731], "still": [0, 2, 14, 26, 37, 504, 552, 675, 681, 683, 686, 691, 694, 695, 701, 702, 704, 707, 713, 717, 721, 724, 730], "develop": [0, 2, 672, 674, 675, 676, 677, 678, 680, 681, 682, 683, 685, 688, 690, 705, 716, 717, 719, 722, 723, 724, 725, 726, 729, 730, 731], "account": [0, 9, 16, 32, 39, 234, 297, 358, 499, 506, 571, 655, 682, 690, 694, 702], "point": [0, 6, 8, 9, 14, 18, 20, 22, 29, 31, 32, 37, 41, 45, 69, 70, 71, 78, 80, 83, 90, 91, 95, 99, 112, 116, 120, 127, 167, 168, 169, 170, 172, 173, 174, 175, 176, 182, 183, 184, 185, 187, 188, 190, 192, 193, 194, 200, 201, 202, 203, 208, 209, 210, 211, 212, 220, 222, 223, 225, 227, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 250, 252, 275, 276, 279, 281, 288, 291, 294, 295, 301, 306, 316, 317, 318, 340, 380, 381, 382, 383, 384, 394, 395, 396, 403, 494, 496, 497, 499, 504, 510, 511, 512, 513, 514, 531, 533, 536, 537, 538, 540, 543, 544, 545, 548, 549, 550, 551, 552, 553, 554, 556, 559, 605, 606, 612, 614, 615, 616, 617, 620, 622, 623, 625, 626, 627, 628, 629, 630, 631, 664, 676, 681, 682, 683, 685, 686, 688, 690, 693, 694, 697, 701, 702, 704, 705, 707, 709, 711, 712, 716, 730], "wip": [0, 696], "ll": [0, 1, 2, 672, 676, 677, 682, 683, 688, 693, 696, 700, 701, 712], "soon": [0, 683, 690, 691, 715, 717], "control": [0, 9, 32, 94, 242, 258, 286, 288, 294, 297, 316, 317, 318, 369, 496, 504, 534, 654, 689, 691, 700, 701, 702, 703, 707, 711, 712, 716, 719, 724, 730], "flow": [0, 689, 716, 724, 725], "built": [0, 69, 496, 656, 657, 672, 682, 683, 688, 689, 704, 710, 718, 719, 723, 724, 728], "moment": [0, 2, 11, 34, 482, 483, 488, 502, 659, 681, 687, 717], "condit": [0, 19, 32, 42, 67, 295, 338, 495, 508, 511, 593, 594, 613, 643, 685, 691, 693, 695, 698, 699, 701, 704, 716], "branch": [0, 175, 187, 190, 192, 220, 232, 233, 234, 237, 499, 682, 683, 685, 690, 717, 724], "loop": [0, 24, 47, 66, 68, 495, 507, 580, 581, 582, 672, 687, 717], "regist": [0, 683], "correctli": [0, 2, 9, 14, 19, 32, 37, 42, 265, 291, 306, 400, 401, 403, 504, 511, 543, 609, 681, 682, 683, 686, 689, 691, 693, 695, 696, 697, 703, 704, 707, 713, 717], "while": [0, 1, 9, 13, 26, 32, 36, 49, 68, 89, 126, 194, 195, 215, 216, 269, 291, 294, 295, 336, 345, 393, 495, 496, 497, 499, 503, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 614, 626, 629, 639, 674, 675, 681, 682, 683, 686, 687, 688, 690, 691, 693, 697, 700, 701, 702, 703, 704, 707, 711, 713, 714, 717, 724, 730, 731], "your": [0, 1, 2, 672, 675, 676, 677, 678, 680, 681, 682, 685, 688, 690, 694, 696, 700, 702, 705, 707, 712, 713, 717, 718, 724], "depend": [0, 5, 6, 10, 14, 20, 21, 29, 37, 44, 45, 67, 77, 99, 167, 168, 169, 172, 173, 174, 175, 184, 185, 187, 190, 192, 208, 209, 210, 211, 220, 222, 225, 232, 233, 237, 238, 281, 291, 295, 340, 463, 495, 496, 497, 499, 501, 504, 511, 513, 536, 537, 549, 550, 551, 552, 613, 618, 621, 631, 672, 675, 678, 679, 681, 682, 683, 688, 691, 694, 699, 701, 702, 703, 704, 707, 709, 717, 718, 722, 724, 725], "chang": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 77, 79, 81, 82, 84, 86, 87, 88, 89, 91, 92, 93, 96, 100, 101, 102, 115, 119, 120, 127, 144, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 291, 297, 306, 311, 312, 313, 314, 316, 317, 318, 320, 324, 325, 326, 329, 330, 331, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 407, 408, 410, 411, 414, 415, 416, 417, 418, 419, 422, 423, 426, 428, 430, 431, 432, 434, 435, 436, 438, 439, 441, 446, 447, 460, 461, 462, 463, 465, 467, 468, 480, 482, 483, 486, 488, 489, 490, 491, 499, 506, 508, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 530, 531, 532, 534, 535, 536, 537, 538, 540, 542, 543, 548, 549, 550, 552, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 584, 595, 600, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 638, 672, 676, 678, 681, 682, 683, 685, 687, 688, 689, 690, 691, 693, 694, 696, 702, 703, 704, 705, 706, 707, 709, 713, 717, 718, 727, 730], "number": [0, 5, 6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 22, 23, 26, 28, 29, 31, 32, 33, 36, 37, 38, 39, 41, 42, 43, 45, 46, 48, 49, 51, 69, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 94, 100, 105, 106, 107, 108, 109, 111, 112, 115, 118, 119, 120, 122, 124, 127, 151, 152, 153, 167, 168, 169, 170, 171, 173, 175, 176, 183, 185, 187, 188, 190, 192, 193, 194, 200, 201, 202, 204, 208, 210, 218, 219, 220, 221, 222, 223, 225, 227, 229, 230, 231, 233, 234, 238, 240, 258, 259, 261, 263, 264, 265, 266, 273, 278, 288, 291, 294, 295, 297, 300, 306, 326, 336, 338, 340, 349, 350, 351, 366, 368, 370, 371, 374, 375, 376, 392, 394, 395, 396, 397, 419, 426, 444, 460, 461, 468, 480, 481, 494, 496, 497, 498, 499, 501, 503, 504, 505, 506, 507, 510, 511, 512, 514, 515, 516, 523, 524, 526, 529, 532, 536, 537, 538, 545, 550, 552, 556, 557, 558, 561, 564, 566, 567, 569, 570, 572, 573, 575, 577, 579, 580, 581, 582, 603, 607, 612, 614, 615, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 638, 641, 642, 643, 648, 654, 655, 656, 658, 672, 673, 674, 682, 683, 689, 690, 691, 692, 693, 700, 701, 704, 705, 706, 707, 709, 712], "underli": [0, 9, 16, 32, 39, 177, 180, 182, 217, 297, 358, 499, 504, 506, 550, 571, 689, 707, 724], "piec": [0, 683, 686, 698, 699, 709, 720, 722], "insid": [0, 14, 37, 49, 297, 370, 504, 545, 639, 682, 683, 686, 689, 691, 698, 699, 704, 705, 730], "said": [0, 643, 676], "other": [0, 2, 6, 8, 9, 10, 16, 22, 26, 29, 31, 32, 33, 39, 45, 48, 49, 69, 89, 100, 126, 187, 192, 194, 210, 219, 220, 227, 262, 266, 291, 297, 353, 367, 404, 405, 496, 497, 499, 501, 510, 514, 565, 575, 606, 629, 631, 672, 675, 678, 681, 682, 683, 685, 686, 689, 690, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 711, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 730, 731], "numpi": [0, 2, 8, 9, 10, 22, 31, 32, 33, 94, 123, 141, 171, 231, 258, 288, 306, 394, 401, 408, 432, 460, 463, 467, 496, 497, 498, 499, 501, 514, 624, 636, 638, 664, 672, 674, 675, 680, 681, 682, 683, 685, 686, 687, 690, 691, 692, 695, 697, 701, 703, 704, 705, 707, 709, 711, 714, 718, 719, 726, 731], "len": [0, 5, 9, 14, 32, 37, 87, 253, 288, 294, 306, 326, 336, 403, 496, 504, 557, 672, 689, 690, 695, 701, 702, 704, 711, 714], "incorrectli": [0, 694], "There": [0, 287, 289, 290, 298, 299, 303, 307, 643, 672, 674, 681, 682, 683, 685, 686, 688, 689, 691, 693, 695, 696, 698, 700, 702, 703, 706, 709, 712, 717, 725, 726, 730, 731], "succe": [0, 682], "hide": 0, "shouldn": [0, 705], "realli": [0, 682, 689, 717, 729, 730], "check": [0, 4, 6, 10, 14, 26, 29, 33, 37, 103, 104, 113, 114, 117, 119, 120, 121, 124, 139, 146, 147, 154, 166, 408, 418, 420, 421, 428, 434, 435, 436, 437, 438, 453, 463, 474, 480, 497, 498, 501, 504, 508, 537, 538, 545, 583, 584, 593, 594, 595, 636, 643, 654, 672, 679, 680, 681, 682, 683, 685, 689, 690, 693, 695, 698, 699, 701, 702, 703, 704, 705, 706, 708, 709, 711, 712, 713, 718], "recommend": [0, 215, 216, 229, 499, 514, 626, 629, 682, 687, 688, 696, 699, 700], "nois": [0, 2, 672], "anoth": [0, 2, 81, 100, 102, 496, 497, 672, 675, 681, 682, 683, 687, 689, 691, 695, 698, 701, 702, 704, 709, 711, 714, 719, 724, 730], "right": [0, 14, 26, 37, 49, 64, 65, 179, 181, 234, 272, 291, 294, 297, 327, 359, 415, 495, 499, 501, 504, 513, 552, 557, 620, 677, 681, 682, 683, 684, 685, 693, 707, 712], "feel": [0, 1, 48, 49, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 652, 653, 655, 656, 657, 658, 659, 660, 672, 678, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731], "free": [0, 1, 48, 49, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 652, 653, 655, 656, 657, 658, 659, 660, 672, 678, 680, 681, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 716, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731], "open": [0, 1, 2, 10, 18, 41, 69, 496, 510, 604, 606, 672, 674, 675, 676, 677, 682, 683, 688, 691, 694, 702, 703, 707, 716, 722, 723, 724, 726, 727], "issu": [0, 655, 676, 677, 680, 682, 685, 687, 690, 691, 693, 695, 702, 704, 705, 707, 709, 713, 717], "minim": [0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 77, 79, 81, 82, 84, 86, 87, 88, 89, 91, 92, 93, 96, 100, 101, 102, 115, 119, 120, 127, 144, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 306, 311, 312, 313, 314, 316, 317, 318, 320, 324, 325, 326, 329, 330, 331, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 407, 408, 410, 411, 414, 415, 416, 417, 418, 419, 422, 423, 426, 428, 430, 431, 432, 434, 435, 436, 438, 439, 441, 446, 447, 460, 461, 462, 463, 465, 467, 468, 480, 482, 483, 486, 488, 489, 490, 491, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 530, 531, 532, 534, 535, 536, 537, 538, 540, 542, 543, 548, 549, 550, 552, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 694, 701, 703, 707, 709, 722, 730], "resnet50": 0, "hug": 0, "face": [0, 682, 700, 707, 709, 724, 730], "classifi": [0, 2, 672], "breed": 0, "cat": [0, 2, 703, 707, 709, 714], "transform": [0, 2, 9, 13, 32, 36, 294, 314, 315, 320, 321, 324, 325, 326, 336, 503, 527, 641, 644, 656, 672, 699, 704, 714, 716, 719, 722, 724, 725, 726], "autoimageprocessor": [0, 2], "resnetforimageclassif": [0, 2], "dataset": [0, 2, 26, 672, 712, 715], "load_dataset": [0, 2], "download": [0, 2, 682, 704], "imag": [0, 2, 8, 9, 13, 31, 32, 36, 167, 168, 169, 170, 173, 176, 185, 188, 190, 192, 201, 202, 203, 208, 210, 223, 230, 231, 233, 234, 238, 294, 311, 312, 328, 329, 330, 332, 415, 499, 501, 503, 516, 517, 518, 519, 520, 523, 524, 525, 656, 672, 678, 682, 707, 709, 710, 712, 714, 716, 718, 724], "huggingfac": [0, 2], "test": [0, 2, 8, 10, 23, 31, 33, 46, 68, 118, 122, 201, 202, 203, 204, 227, 294, 316, 317, 318, 439, 495, 497, 499, 501, 515, 632, 633, 636, 639, 642, 672, 676, 680, 681, 684, 688, 691, 693, 695, 696, 699, 702, 705, 717, 718, 724], "image_processor": [0, 2], "from_pretrain": [0, 2], "microsoft": [0, 2, 675, 724, 729, 731], "resnet": [0, 2], "50": [0, 2, 9, 22, 31, 32, 33, 186, 226, 279, 291, 294, 321, 343, 417, 423, 430, 431, 447, 460, 499, 501, 504, 508, 511, 514, 540, 547, 584, 586, 612, 624, 641, 644, 700, 711], "preprocess": 0, "return_tensor": [0, 2], "pt": 0, "normal": [0, 9, 17, 18, 32, 40, 41, 281, 291, 294, 300, 306, 314, 315, 320, 321, 324, 325, 326, 336, 374, 375, 376, 377, 378, 379, 394, 397, 506, 509, 510, 565, 575, 602, 603, 605, 655, 656, 658, 672, 681, 701, 702, 707, 712, 722], "feed": [0, 160, 498, 724, 725], "itself": [0, 8, 221, 405, 469, 499, 501, 508, 595, 674, 682, 683, 685, 688, 689, 690, 691, 695, 701, 702, 713, 716, 717, 723, 724, 725, 730], "without": [0, 20, 26, 455, 469, 501, 506, 508, 512, 571, 584, 614, 615, 616, 617, 641, 644, 683, 686, 689, 690, 691, 692, 693, 695, 696, 697, 698, 702, 704, 705, 707, 711, 712, 713, 716, 717, 721, 724, 725, 726, 730], "pytorch": [0, 2, 230, 499, 659, 672, 675, 676, 680, 681, 686, 691, 692, 695, 697, 698, 701, 702, 703, 705, 707, 709, 714, 717, 719, 725, 727, 728, 730, 731], "no_grad": 0, "logit": [0, 9, 15, 32, 38, 286, 301, 380, 383, 505, 561, 563, 652, 672], "With": [0, 3, 5, 6, 8, 9, 10, 11, 13, 14, 16, 19, 22, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 70, 71, 77, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96, 99, 100, 101, 102, 104, 110, 111, 112, 115, 122, 127, 128, 129, 130, 131, 141, 144, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 193, 194, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 246, 247, 248, 249, 250, 252, 263, 265, 270, 273, 274, 275, 277, 278, 281, 286, 288, 291, 294, 295, 297, 306, 314, 316, 317, 324, 338, 339, 341, 342, 345, 358, 359, 360, 361, 364, 365, 366, 368, 370, 371, 385, 394, 395, 396, 397, 399, 400, 401, 403, 404, 408, 409, 410, 411, 414, 415, 416, 417, 418, 422, 423, 426, 428, 430, 431, 432, 446, 447, 460, 463, 465, 467, 468, 480, 481, 482, 483, 484, 486, 487, 488, 490, 491, 492, 493, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 525, 526, 527, 530, 531, 532, 533, 534, 535, 537, 538, 540, 542, 543, 544, 545, 546, 550, 552, 553, 554, 556, 557, 561, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 584, 586, 589, 590, 591, 592, 594, 600, 601, 602, 603, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 675, 676, 682, 693, 702, 704, 707, 709, 724, 727], "compiled_graph": 0, "our": [0, 24, 47, 48, 49, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 643, 652, 653, 655, 656, 657, 658, 659, 660, 672, 674, 675, 677, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 691, 693, 695, 696, 699, 702, 703, 704, 705, 707, 708, 709, 711, 712, 713, 714, 717, 729, 730], "predicted_label": 0, "argmax": [0, 19, 42, 511, 672, 702], "item": [0, 4, 10, 24, 26, 28, 31, 32, 33, 82, 106, 143, 197, 213, 221, 266, 267, 280, 412, 422, 423, 427, 460, 461, 496, 497, 498, 501, 508, 515, 588, 589, 590, 591, 595, 600, 601, 635, 657, 672, 681, 689, 691, 709, 711, 712, 714], "config": [0, 26, 508, 596, 672, 678, 682, 685, 688, 690, 696, 703, 712, 725], "id2label": 0, "us": [1, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 18, 19, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 39, 41, 42, 47, 49, 55, 86, 89, 99, 111, 113, 114, 125, 126, 146, 147, 149, 154, 158, 159, 160, 161, 163, 166, 172, 180, 208, 209, 211, 212, 214, 215, 216, 218, 219, 221, 230, 234, 239, 251, 252, 254, 255, 271, 274, 275, 278, 288, 291, 294, 295, 297, 300, 301, 302, 304, 306, 311, 312, 313, 315, 316, 317, 318, 319, 321, 326, 328, 334, 336, 341, 358, 361, 366, 374, 376, 379, 380, 381, 382, 383, 384, 385, 386, 387, 394, 401, 403, 409, 420, 421, 430, 431, 442, 451, 452, 454, 460, 461, 472, 473, 475, 482, 483, 488, 489, 494, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 514, 527, 529, 530, 535, 537, 545, 553, 559, 561, 570, 571, 572, 576, 580, 581, 582, 583, 585, 586, 592, 593, 594, 596, 603, 604, 605, 606, 608, 609, 610, 611, 612, 614, 616, 624, 639, 641, 642, 643, 644, 648, 653, 654, 655, 656, 657, 658, 659, 664, 670, 676, 677, 678, 680, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 716, 717, 719, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731], "compil": [1, 2, 238, 499, 638, 648, 657, 659, 672, 689, 702, 705, 707, 708, 710, 717, 718, 719, 720, 723, 724, 725, 728, 731], "grant": [1, 672], "pilot": [1, 672, 680], "access": [1, 2, 26, 672, 681, 682, 683, 690, 691, 701, 702, 724, 726, 728], "user": [1, 221, 238, 297, 366, 499, 654, 656, 657, 672, 674, 675, 678, 682, 683, 684, 686, 687, 689, 690, 691, 695, 699, 700, 701, 702, 704, 706, 707, 708, 709, 717, 718, 722, 724, 730, 731], "join": [1, 16, 26, 32, 39, 353, 506, 565, 575, 672], "waitlist": [1, 672], "want": [1, 2, 9, 24, 32, 47, 187, 220, 297, 356, 499, 654, 657, 672, 675, 677, 679, 681, 682, 683, 688, 690, 695, 696, 698, 699, 700, 701, 704, 707, 712, 713, 714, 717, 718], "get": [1, 2, 7, 14, 26, 30, 37, 43, 48, 110, 111, 112, 115, 143, 144, 145, 148, 154, 159, 162, 166, 406, 424, 445, 462, 497, 498, 501, 504, 508, 559, 585, 617, 654, 655, 656, 672, 676, 677, 680, 681, 682, 684, 687, 690, 691, 692, 698, 699, 700, 701, 702, 703, 704, 705, 709, 710, 711, 712, 713, 719, 724, 730], "one": [1, 2, 5, 9, 10, 13, 14, 16, 19, 20, 22, 26, 28, 31, 32, 33, 34, 36, 37, 39, 40, 42, 43, 44, 45, 69, 77, 87, 89, 90, 91, 100, 102, 160, 181, 187, 194, 195, 212, 218, 219, 220, 239, 245, 252, 253, 261, 265, 269, 270, 273, 274, 275, 277, 278, 284, 286, 288, 291, 292, 294, 295, 297, 300, 301, 306, 314, 316, 317, 320, 321, 324, 325, 328, 337, 338, 349, 350, 351, 358, 359, 360, 364, 365, 374, 375, 376, 380, 385, 395, 396, 399, 400, 401, 403, 404, 442, 446, 447, 449, 465, 467, 468, 480, 482, 483, 486, 488, 490, 491, 496, 497, 498, 499, 501, 502, 503, 504, 506, 509, 511, 512, 514, 517, 518, 519, 520, 521, 522, 525, 539, 542, 543, 547, 549, 558, 559, 567, 568, 569, 572, 574, 578, 602, 609, 612, 614, 615, 616, 617, 622, 624, 641, 643, 658, 661, 664, 669, 672, 675, 676, 681, 682, 683, 685, 686, 687, 688, 689, 691, 693, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 711, 712, 714, 717, 724, 725, 727, 730], "directori": [1, 458, 479, 498, 501, 678, 679, 681, 682, 683, 688, 690, 702, 704], "keep": [1, 2, 16, 26, 39, 506, 578, 680, 681, 682, 683, 685, 688, 689, 690, 695, 701, 702, 704, 705, 707, 712, 714, 718], "locat": [1, 89, 306, 395, 496, 510, 513, 603, 620, 681, 683, 687, 688, 692, 702, 703, 704, 705, 722], "ivy_root": 1, "environ": [1, 672, 677, 678, 683, 716, 718, 724, 726], "path": [1, 638, 648, 663, 682, 688, 701, 702, 703, 724], "either": [1, 2, 8, 9, 10, 13, 22, 26, 31, 32, 33, 36, 37, 67, 81, 82, 167, 168, 169, 170, 175, 185, 187, 188, 190, 192, 194, 201, 202, 208, 209, 210, 211, 212, 220, 229, 231, 232, 234, 237, 238, 262, 281, 291, 294, 306, 314, 324, 334, 335, 395, 396, 414, 434, 442, 443, 450, 469, 495, 496, 499, 501, 503, 504, 507, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 542, 547, 550, 554, 580, 581, 582, 622, 623, 628, 630, 643, 654, 656, 657, 664, 681, 682, 683, 687, 689, 691, 692, 693, 694, 695, 696, 698, 701, 702, 703, 704, 707, 709, 712, 717, 724], "manual": [1, 508, 583, 593, 594, 681, 682, 683, 691, 696, 704, 713], "automat": [1, 676, 681, 682, 683, 684, 688, 689, 690, 691, 696, 698, 701, 704, 707, 708, 710, 713, 714, 719, 724, 727, 731], "past": [1, 683, 685, 703, 704, 724], "content": [1, 9, 26, 32, 306, 401, 681, 683, 688, 701, 709, 712], "pem": 1, "file": [1, 10, 26, 458, 479, 501, 657, 681, 682, 683, 685, 686, 687, 688, 689, 690, 694, 695, 696, 698, 702, 703, 704, 705, 709, 712, 720, 723, 724, 725], "refer": [1, 9, 16, 22, 23, 32, 34, 39, 45, 46, 80, 94, 192, 210, 250, 258, 280, 288, 291, 294, 295, 297, 321, 326, 336, 339, 358, 482, 483, 496, 499, 502, 504, 506, 514, 515, 532, 534, 558, 571, 629, 631, 632, 633, 656, 672, 680, 681, 682, 683, 685, 686, 688, 690, 691, 697, 698, 699, 700, 701, 702, 703, 704, 717, 719, 724], "equival": [1, 2, 14, 37, 69, 181, 194, 215, 216, 229, 230, 297, 371, 496, 499, 504, 545, 548, 551, 559, 664, 701, 702, 707, 712, 714], "echo": [1, 682, 690], "n": [1, 2, 5, 8, 9, 13, 14, 16, 18, 19, 22, 23, 31, 32, 36, 37, 39, 41, 42, 45, 46, 48, 87, 92, 93, 94, 167, 237, 239, 258, 266, 288, 291, 294, 295, 297, 300, 301, 304, 306, 308, 309, 314, 315, 320, 321, 324, 325, 326, 334, 335, 336, 341, 342, 351, 354, 357, 362, 368, 372, 374, 375, 376, 380, 381, 382, 383, 384, 387, 394, 403, 496, 499, 503, 504, 506, 508, 510, 511, 514, 515, 516, 517, 518, 519, 521, 523, 525, 532, 535, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 556, 557, 558, 559, 566, 567, 569, 575, 579, 591, 604, 605, 606, 612, 626, 628, 629, 630, 631, 632, 633, 655, 656, 658, 672, 684, 688, 690, 704], "api_kei": 1, "bug": [1, 194, 499, 672, 681, 683, 688, 696, 702, 704, 705], "pleas": [1, 48, 49, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 652, 653, 655, 656, 657, 658, 659, 660, 672, 674, 675, 676, 678, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 710, 711, 712, 713, 714, 716, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731], "rais": [1, 5, 9, 10, 16, 18, 20, 23, 26, 28, 32, 33, 39, 41, 43, 46, 71, 101, 190, 225, 268, 291, 294, 297, 301, 306, 326, 336, 349, 350, 351, 354, 356, 358, 359, 360, 362, 365, 367, 368, 372, 381, 400, 401, 408, 425, 432, 451, 461, 463, 469, 472, 497, 499, 501, 504, 506, 510, 511, 512, 514, 515, 542, 544, 558, 567, 568, 569, 571, 573, 574, 575, 576, 578, 604, 605, 606, 612, 617, 625, 627, 632, 633, 636, 643, 655, 657, 659, 672, 675, 683, 685, 687, 691, 695, 701, 702, 705, 706, 709, 711], "github": [1, 672, 674, 678, 679, 680, 683, 685, 690, 691, 693, 694, 696, 704, 718], "add": [1, 8, 9, 17, 24, 26, 31, 32, 40, 47, 48, 49, 284, 292, 294, 335, 442, 469, 499, 501, 504, 509, 514, 556, 602, 630, 638, 648, 656, 658, 672, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 694, 696, 697, 698, 699, 701, 702, 704, 705, 707, 709, 711, 717, 720, 722, 724], "label": [1, 15, 38, 296, 346, 505, 561, 562, 563, 672, 681, 685, 702, 708, 709, 710, 714, 724], "accordingli": [1, 14, 19, 20, 22, 23, 37, 42, 45, 46, 87, 187, 192, 194, 210, 220, 234, 496, 499, 504, 511, 512, 514, 515, 559, 610, 614, 615, 616, 617, 625, 626, 627, 628, 629, 630, 631, 632, 633, 702, 709], "member": [1, 675, 681, 683, 702], "team": [1, 672, 677, 681, 682, 683, 702, 726], "back": [1, 9, 16, 32, 39, 297, 358, 448, 470, 501, 503, 506, 529, 571, 655, 657, 659, 675, 682, 686, 691, 695, 699, 700, 706, 708, 717, 722, 726], "asap": 1, "haven": [1, 724], "found": [1, 14, 16, 20, 26, 32, 37, 39, 43, 49, 148, 306, 353, 395, 498, 508, 535, 542, 575, 594, 614, 654, 678, 681, 682, 683, 686, 687, 688, 689, 691, 694, 698, 699, 701, 702, 726], "ask": [1, 672, 676, 681, 682, 693, 709, 711, 717], "suggest": [1, 681, 682, 683, 688, 691, 700, 702, 704, 705, 706], "someth": [1, 672, 683, 696, 705, 712, 713, 717, 730], "help": [1, 405, 501, 514, 630, 655, 672, 677, 678, 679, 681, 682, 686, 687, 688, 689, 690, 691, 693, 696, 699, 701, 702, 704, 705, 711, 712, 713, 715, 719, 720, 724, 726, 730], "post": [1, 17, 40, 509, 602, 682, 700, 714], "forum": [1, 48, 49, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 652, 653, 655, 656, 657, 658, 659, 660, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731], "discord": [1, 48, 49, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 652, 653, 655, 656, 657, 658, 659, 660, 672, 674, 675, 676, 678, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 710, 711, 712, 713, 714, 716, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731], "server": [1, 672, 682, 683, 688, 724], "convert": [2, 4, 5, 8, 26, 27, 28, 31, 70, 71, 88, 97, 98, 140, 141, 142, 143, 154, 162, 166, 186, 226, 297, 302, 349, 350, 351, 385, 448, 464, 466, 467, 468, 470, 496, 497, 498, 499, 501, 504, 508, 560, 584, 595, 596, 638, 664, 672, 676, 681, 686, 687, 699, 700, 702, 704, 706, 709, 717, 719, 722, 723, 730], "written": [2, 10, 672, 674, 682, 685, 686, 694, 696, 697, 701, 702, 705, 709, 711, 714, 717, 722, 724, 728, 730, 731], "choic": [2, 22, 45, 514, 629, 631, 672, 676, 682, 690, 701, 702, 712, 724, 731], "preserv": [2, 9, 10, 11, 26, 32, 33, 34, 49, 294, 297, 306, 328, 349, 350, 351, 359, 360, 401, 432, 491, 501, 502, 506, 568, 641, 698, 704, 714, 717], "logic": [2, 23, 46, 151, 187, 188, 214, 215, 216, 220, 223, 498, 499, 515, 632, 633, 681, 686, 690, 691, 692, 695, 699, 700, 701, 702, 704, 707, 711], "target": [2, 142, 296, 346, 498, 656, 657, 663, 672, 682, 684, 703, 705, 708, 712, 713, 714, 720, 722, 723, 724, 727, 729, 730], "optim": [2, 11, 34, 296, 346, 406, 490, 501, 502, 507, 580, 581, 582, 655, 672, 676, 691, 701, 707, 710, 712, 714, 716, 722, 723, 724, 725, 726, 727, 728, 731], "tool": [2, 672, 673, 676, 682, 683, 693, 696, 710, 714, 716, 717, 722, 723, 724, 725, 727, 730, 731], "make": [2, 664, 672, 675, 676, 681, 682, 683, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 711, 712, 714, 718, 722, 724, 725, 726, 727, 730, 731], "ml": [2, 672, 673, 675, 676, 677, 680, 702, 708, 709, 710, 712, 713, 714, 716, 720, 721, 722, 723, 724, 727, 729, 731], "relat": [2, 194, 499, 672, 678, 680, 681, 682, 683, 695, 702, 704, 705, 706, 707, 716, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731], "project": [2, 503, 529, 656, 672, 674, 675, 676, 679, 681, 682, 683, 686, 687, 688, 704, 713, 716, 717, 720, 722, 724, 727, 731], "independ": [2, 9, 18, 32, 41, 170, 187, 220, 230, 301, 380, 499, 504, 510, 532, 551, 603, 672, 685, 691, 693, 699, 709, 714, 722], "research": [2, 672, 674, 716, 724, 731], "deploi": [2, 672, 690, 719, 722, 723, 724, 726, 730], "system": [2, 504, 551, 672, 682, 683, 687, 690, 691, 717, 722, 724, 727, 729, 731], "build": [2, 20, 512, 614, 615, 616, 617, 656, 657, 672, 675, 677, 678, 682, 684, 690, 691, 698, 700, 708, 710, 713, 714, 717, 719, 722, 724, 726, 729, 730, 731], "block": [2, 295, 343, 672, 683, 689, 691, 695, 698, 704, 708, 710, 714, 717, 719, 729, 731], "neural": [2, 503, 652, 656, 672, 716, 720, 722, 723, 724, 728, 730, 731], "network": [2, 503, 527, 652, 654, 655, 656, 657, 672, 675, 689, 698, 709, 713, 716, 720, 722, 723, 724, 728, 730, 731], "layer": [2, 9, 17, 32, 40, 509, 528, 529, 602, 653, 654, 655, 657, 658, 659, 660, 672, 674, 694, 702, 705, 707, 709, 710, 713, 722, 724, 728, 731], "activ": [2, 9, 10, 24, 32, 47, 55, 56, 57, 58, 59, 60, 61, 62, 63, 242, 246, 247, 248, 249, 463, 503, 529, 655, 672, 678, 682, 683, 691, 696, 705, 706, 713, 724, 727], "train": [2, 9, 11, 13, 32, 34, 36, 294, 300, 316, 317, 318, 374, 376, 482, 483, 488, 502, 503, 526, 529, 655, 656, 658, 672, 676, 689, 692, 698, 712, 713, 714, 715, 716, 717, 719, 722, 723, 728, 730, 731], "pipelin": [2, 672, 674, 679, 684, 685, 686, 703, 714, 719, 724, 725, 730], "publish": [2, 672, 676, 717], "ex": [2, 641, 642, 643, 644, 648, 690], "haiku": [2, 653, 672, 676, 714, 724], "latest": [2, 8, 31, 102, 190, 200, 201, 216, 306, 394, 497, 499, 504, 506, 514, 550, 579, 629, 656, 672, 681, 682, 683, 687, 690, 694, 705, 717, 718, 729], "integr": [2, 6, 8, 9, 29, 31, 32, 99, 239, 277, 291, 306, 397, 497, 499, 672, 680, 682, 684, 699, 722, 724, 726, 727, 728], "kornia": [2, 672], "advantag": [2, 672, 683, 698, 701, 702, 718, 724], "featur": [2, 9, 32, 294, 308, 309, 316, 317, 318, 655, 656, 672, 681, 682, 683, 686, 687, 690, 697, 705, 707, 712, 717, 724, 725, 726, 730], "tensorflow": [2, 8, 9, 10, 31, 32, 94, 141, 171, 258, 288, 295, 341, 463, 496, 498, 499, 501, 636, 648, 664, 672, 675, 676, 680, 681, 682, 683, 685, 690, 691, 692, 697, 701, 702, 703, 704, 705, 707, 709, 714, 717, 719, 722, 725, 727, 728, 730, 731], "deploy": [2, 682, 723, 726, 727, 730, 731], "definit": [2, 8, 14, 31, 37, 239, 499, 504, 531, 672, 683, 686, 691, 698, 711], "job": [2, 672, 688, 690], "graph": [2, 20, 512, 614, 615, 616, 617, 648, 657, 672, 676, 689, 698, 702, 707, 710, 717, 719, 720, 724, 727], "leverag": [2, 672, 682, 698, 701, 722, 724], "frontend": [2, 449, 501, 638, 639, 642, 645, 648, 672, 680, 683, 684, 690, 691, 695, 700, 704, 705, 707, 708, 710, 719, 724], "link": [2, 672, 678, 681, 682, 683, 688, 690, 691, 696, 702, 720, 722], "swap": [2, 16, 39, 506, 576, 664], "replac": [2, 8, 10, 16, 18, 26, 31, 33, 39, 41, 80, 221, 250, 288, 446, 447, 450, 496, 499, 501, 506, 510, 564, 603, 641, 675, 683, 688, 689, 691, 692, 693, 699, 702, 704, 711, 714, 717, 731], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 641, 643, 645, 646, 647, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 674, 675, 676, 677, 678, 681, 682, 683, 685, 686, 688, 689, 690, 702, 723, 724, 725, 726, 727], "debug_mod": 2, "params_v": [2, 672], "must": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 69, 70, 71, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 99, 100, 101, 160, 161, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 245, 246, 247, 248, 249, 250, 252, 259, 262, 263, 264, 266, 268, 270, 272, 274, 275, 276, 277, 281, 283, 286, 288, 291, 294, 295, 296, 297, 300, 301, 304, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 328, 329, 330, 331, 334, 336, 337, 338, 339, 340, 343, 344, 345, 346, 349, 350, 351, 353, 354, 356, 358, 359, 360, 362, 365, 368, 369, 370, 372, 377, 378, 379, 380, 381, 383, 384, 387, 394, 395, 396, 397, 403, 410, 411, 415, 416, 417, 422, 423, 425, 432, 446, 447, 481, 482, 483, 486, 488, 489, 490, 491, 493, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 638, 655, 656, 659, 661, 674, 676, 678, 680, 681, 682, 683, 685, 686, 690, 691, 692, 693, 694, 695, 697, 698, 699, 701, 702, 704, 705, 706, 707, 709, 713, 714, 725, 731], "unless": [2, 5, 9, 14, 28, 32, 89, 220, 261, 273, 278, 291, 496, 499, 504, 545, 687, 692, 701, 717], "explicitli": [2, 504, 537, 538, 554, 638, 656, 657, 685, 686, 687, 689, 691, 694, 695, 698, 699, 700, 701, 703, 704, 709, 717, 724], "nn": [2, 87, 496, 672, 698, 703, 707, 714, 725], "kera": [2, 653, 672, 676, 730], "hk": [2, 672, 714], "trainabl": [2, 653, 657, 660, 672, 694, 710, 712, 713], "transpile_kwarg": 2, "It": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 69, 70, 71, 77, 78, 79, 80, 81, 83, 84, 85, 86, 89, 90, 91, 92, 93, 95, 96, 99, 101, 161, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 248, 249, 250, 262, 263, 270, 272, 274, 275, 276, 277, 281, 286, 288, 291, 294, 295, 296, 297, 300, 301, 306, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 325, 326, 328, 329, 330, 331, 334, 337, 338, 339, 343, 344, 345, 346, 353, 356, 368, 374, 377, 378, 379, 380, 381, 383, 384, 394, 395, 396, 397, 410, 411, 415, 416, 417, 422, 423, 432, 446, 447, 448, 482, 483, 486, 488, 489, 490, 491, 493, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 551, 553, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 579, 582, 583, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 617, 618, 621, 622, 623, 626, 628, 629, 631, 632, 633, 655, 672, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 699, 701, 702, 703, 704, 705, 706, 707, 709, 711, 712, 713, 722, 724, 725, 727, 728, 729, 730, 731], "alia": [2, 494, 645, 681, 702], "similar": [2, 229, 499, 503, 529, 656, 674, 681, 682, 689, 690, 691, 692, 695, 696, 698, 699, 700, 702, 703, 704, 705, 712, 717, 720, 721, 722, 723, 730], "instantli": [2, 672], "proper": [2, 672, 681, 702], "arrai": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 71, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 112, 115, 116, 118, 119, 120, 122, 124, 125, 126, 127, 133, 143, 144, 148, 153, 155, 157, 160, 161, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 291, 292, 294, 295, 296, 297, 300, 301, 302, 304, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 410, 411, 414, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 441, 442, 444, 445, 446, 447, 448, 450, 456, 457, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 477, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 595, 596, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 638, 643, 648, 655, 656, 660, 664, 668, 672, 681, 682, 683, 684, 687, 688, 689, 691, 692, 693, 694, 695, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 717, 719, 722, 723, 724, 726, 730, 731], "snippet": [2, 704], "test_fn": [2, 68, 495, 639, 672], "x1": [2, 6, 8, 9, 10, 14, 19, 29, 31, 32, 33, 37, 42, 44, 48, 49, 52, 80, 91, 96, 100, 110, 126, 133, 153, 170, 175, 177, 179, 180, 181, 182, 187, 188, 194, 195, 196, 197, 198, 199, 205, 206, 207, 212, 213, 214, 216, 217, 218, 219, 220, 223, 225, 229, 236, 241, 250, 261, 264, 268, 269, 270, 272, 274, 279, 282, 288, 291, 297, 306, 361, 394, 404, 407, 496, 497, 498, 499, 501, 504, 511, 513, 532, 539, 542, 547, 551, 554, 555, 558, 613, 620, 638, 661, 672, 685, 691, 693, 695, 697, 701, 702], "effici": [2, 14, 37, 296, 346, 504, 545, 672, 682, 683, 689, 698, 699, 701, 704, 709, 712, 717, 724, 726, 727], "ret": [2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 70, 71, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 291, 292, 293, 294, 295, 296, 297, 300, 301, 302, 304, 306, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 446, 447, 450, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 589, 590, 591, 592, 593, 594, 595, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 638, 641, 642, 643, 644, 653, 654, 657, 659, 664, 668, 672, 691, 694, 695, 700, 701, 702, 703, 705, 709, 714], "entir": [2, 9, 22, 23, 26, 32, 33, 45, 46, 160, 190, 192, 232, 233, 294, 297, 306, 316, 317, 318, 366, 397, 428, 498, 499, 514, 515, 625, 626, 627, 628, 629, 630, 631, 632, 633, 656, 675, 676, 681, 682, 683, 685, 686, 689, 691, 693, 695, 701, 702, 703, 704, 707, 709, 712, 713, 714, 717, 724, 730, 731], "just": [2, 14, 22, 37, 94, 258, 288, 496, 504, 514, 545, 624, 648, 656, 672, 675, 676, 682, 683, 685, 687, 690, 691, 693, 694, 698, 699, 701, 702, 703, 704, 709, 711, 712, 717, 724, 725, 730], "line": [2, 237, 499, 672, 676, 682, 685, 686, 690, 693, 695, 702, 704, 707, 710, 711, 712, 713, 715, 727], "request": [2, 9, 151, 301, 384, 498, 672, 676, 677, 681, 693, 696, 705, 707], "jnp": [2, 672, 691, 692, 695, 697, 701, 705, 709, 714], "pil": [2, 672], "jax_kornia": [2, 672], "url": [2, 672], "http": [2, 8, 31, 34, 94, 102, 190, 200, 201, 216, 258, 288, 306, 394, 482, 483, 496, 497, 499, 502, 504, 506, 514, 550, 579, 629, 672, 678, 679, 682, 685, 688, 690, 691, 694, 718], "cocodataset": [2, 672], "org": [2, 8, 31, 34, 94, 102, 190, 200, 201, 216, 258, 288, 306, 394, 482, 483, 496, 497, 499, 502, 504, 506, 514, 550, 579, 629, 672, 694], "train2017": [2, 672], "000000000034": [2, 672], "jpg": [2, 672], "raw_img": [2, 672], "stream": [2, 7, 30, 161, 498, 672, 728], "raw": [2, 26, 672, 694, 725], "format": [2, 7, 10, 22, 25, 26, 27, 30, 63, 110, 144, 294, 305, 334, 390, 415, 493, 497, 498, 501, 503, 514, 515, 516, 523, 524, 624, 634, 635, 636, 672, 684, 690, 691, 692, 693, 694, 695, 702, 705, 709, 711, 712, 720, 722, 724, 725], "img": [2, 672, 712], "transpos": [2, 9, 13, 14, 26, 32, 36, 37, 48, 295, 337, 393, 503, 504, 516, 518, 520, 522, 523, 524, 542, 546, 548, 554, 643, 656, 672, 701, 711, 714], "expand_dim": [2, 16, 39, 503, 506, 525, 672, 702, 709, 712], "255": [2, 13, 32, 36, 181, 499, 525, 672], "version": [2, 3, 9, 32, 55, 238, 265, 291, 306, 399, 403, 481, 499, 501, 504, 537, 538, 638, 664, 672, 674, 675, 676, 682, 683, 688, 690, 691, 694, 701, 703, 709, 730, 731], "enhanc": [2, 672], "5": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 69, 70, 71, 82, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96, 100, 101, 102, 106, 110, 112, 120, 122, 127, 144, 153, 158, 161, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 204, 205, 206, 207, 208, 209, 210, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 246, 247, 249, 250, 251, 252, 254, 255, 260, 263, 265, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 286, 288, 291, 292, 294, 295, 297, 302, 304, 306, 311, 312, 313, 314, 316, 317, 319, 320, 321, 324, 325, 329, 330, 331, 332, 334, 335, 336, 340, 342, 347, 349, 350, 351, 353, 354, 355, 358, 359, 361, 362, 363, 365, 366, 367, 368, 369, 370, 372, 373, 378, 379, 382, 384, 385, 387, 392, 394, 395, 396, 397, 398, 399, 401, 403, 408, 409, 410, 411, 414, 415, 416, 417, 419, 422, 423, 425, 428, 430, 431, 432, 446, 447, 450, 460, 462, 463, 465, 469, 481, 482, 483, 485, 486, 487, 488, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 538, 540, 542, 543, 544, 546, 547, 548, 550, 552, 553, 554, 556, 557, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 584, 586, 589, 590, 591, 592, 594, 600, 601, 602, 603, 604, 605, 606, 608, 610, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 641, 642, 643, 644, 656, 672, 681, 682, 683, 685, 687, 689, 690, 693, 695, 697, 700, 703, 704, 711, 712, 713], "last": [2, 5, 9, 13, 14, 15, 16, 19, 21, 22, 23, 26, 28, 32, 36, 37, 38, 39, 44, 45, 46, 48, 85, 86, 89, 143, 250, 266, 288, 291, 294, 296, 297, 304, 306, 321, 326, 336, 346, 358, 366, 387, 395, 396, 496, 498, 503, 504, 505, 506, 511, 513, 514, 515, 528, 529, 532, 535, 547, 556, 558, 562, 563, 565, 568, 571, 572, 573, 575, 609, 610, 618, 620, 621, 622, 623, 632, 633, 656, 664, 672, 676, 683, 685, 687, 688, 691, 693, 701, 703, 704, 707, 709, 717, 724], "least": [2, 8, 9, 14, 31, 32, 187, 205, 220, 294, 297, 306, 320, 325, 349, 350, 351, 357, 359, 394, 499, 504, 511, 542, 612, 672, 683, 686, 690, 691, 693, 698, 701, 704], "support": [2, 7, 9, 10, 14, 30, 32, 33, 37, 94, 113, 117, 139, 146, 161, 170, 187, 194, 215, 216, 220, 230, 245, 258, 271, 286, 288, 291, 294, 295, 328, 340, 408, 420, 429, 432, 433, 463, 496, 497, 498, 499, 501, 503, 504, 527, 536, 537, 538, 541, 543, 552, 559, 636, 642, 659, 664, 672, 674, 675, 676, 678, 681, 682, 683, 685, 686, 689, 692, 693, 694, 697, 698, 700, 701, 703, 704, 707, 708, 709, 711, 712, 714, 718, 719, 721, 723, 724, 727, 729, 730, 731], "timm": [2, 672], "pretrain": [2, 672], "mlp_encod": [2, 672], "create_model": [2, 672], "mixer_b16_224": [2, 672], "num_class": [2, 672, 714], "randn": [2, 672], "224": [2, 672], "encod": [2, 10, 15, 33, 38, 419, 501, 505, 561, 672, 675, 712], "__init__": [2, 26, 48, 49, 50, 51, 639, 645, 646, 647, 652, 655, 656, 657, 658, 659, 660, 663, 664, 667, 670, 672, 681, 686, 687, 691, 695, 702, 705, 709, 711, 712, 713, 714], "self": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 77, 79, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 99, 100, 101, 102, 110, 112, 115, 118, 119, 120, 122, 124, 127, 144, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 407, 408, 410, 411, 414, 415, 416, 417, 418, 419, 422, 423, 426, 428, 430, 431, 432, 434, 435, 436, 438, 439, 441, 446, 447, 460, 461, 462, 463, 465, 467, 468, 480, 482, 483, 486, 488, 489, 490, 491, 503, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 659, 672, 683, 686, 689, 695, 702, 703, 709, 711, 712, 713, 714], "1000": [2, 5, 28, 86, 496, 672, 712], "super": [2, 9, 32, 295, 341, 672, 695, 698, 709, 712, 713, 714], "fc": [2, 672, 713], "linear": [2, 9, 10, 13, 25, 32, 33, 36, 55, 57, 59, 60, 63, 246, 247, 248, 249, 275, 286, 291, 294, 297, 306, 328, 366, 402, 403, 419, 442, 493, 501, 503, 508, 529, 551, 590, 641, 643, 644, 655, 656, 672, 689, 694, 698, 699, 701, 702, 704, 707, 709, 712, 713, 714, 722, 723, 724, 727], "output_s": [2, 9, 32, 294, 308, 309, 656, 672], "with_bia": [2, 656, 672, 713], "__call__": [2, 638, 656, 657, 672], "_forward_classifi": [2, 672], "standard": [2, 8, 14, 17, 18, 22, 31, 40, 41, 45, 69, 70, 71, 78, 79, 80, 81, 83, 84, 85, 87, 90, 91, 92, 93, 95, 96, 102, 112, 115, 127, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 190, 192, 193, 194, 198, 199, 200, 201, 202, 203, 207, 209, 210, 211, 212, 214, 215, 216, 217, 220, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 263, 291, 306, 394, 481, 496, 497, 499, 501, 504, 506, 509, 510, 511, 512, 513, 514, 515, 531, 532, 533, 534, 535, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 565, 567, 568, 569, 571, 572, 574, 575, 579, 602, 605, 609, 610, 612, 613, 614, 615, 616, 617, 618, 621, 625, 626, 627, 628, 629, 630, 631, 632, 633, 643, 655, 658, 672, 673, 684, 685, 686, 689, 691, 694, 697, 701, 704, 705, 717, 720, 722, 723, 726, 727, 729], "rng_kei": [2, 672], "random": [2, 9, 13, 26, 32, 36, 380, 381, 382, 383, 384, 503, 526, 603, 604, 605, 606, 607, 608, 641, 643, 655, 672, 681, 692, 703, 704, 705, 714, 716, 724], "prngkei": [2, 672, 714], "42": [2, 3, 18, 25, 34, 40, 41, 63, 181, 294, 314, 324, 482, 486, 493, 499, 502, 504, 509, 510, 514, 543, 547, 602, 603, 604, 605, 606, 607, 622, 624, 672, 709, 714], "uniform": [2, 9, 18, 32, 41, 306, 397, 510, 603, 604, 606, 655, 672, 713, 731], "kei": [2, 4, 9, 13, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 82, 84, 89, 91, 96, 100, 102, 115, 119, 120, 127, 161, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 248, 249, 250, 261, 263, 265, 272, 273, 279, 281, 282, 283, 284, 304, 316, 317, 318, 353, 368, 370, 374, 376, 377, 378, 379, 381, 387, 394, 395, 396, 397, 404, 405, 407, 408, 410, 411, 412, 415, 416, 417, 419, 422, 423, 426, 428, 430, 431, 432, 434, 435, 438, 446, 447, 460, 461, 463, 465, 467, 468, 480, 486, 491, 501, 503, 507, 508, 517, 518, 519, 520, 526, 527, 529, 530, 531, 532, 537, 538, 540, 542, 543, 545, 547, 549, 550, 556, 561, 562, 563, 564, 568, 571, 572, 573, 574, 575, 578, 579, 580, 581, 586, 592, 596, 603, 604, 605, 606, 608, 611, 614, 615, 616, 617, 618, 622, 623, 626, 628, 629, 631, 632, 633, 641, 642, 647, 653, 654, 656, 659, 672, 688, 689, 690, 698, 701, 702, 703, 704, 712, 718, 724, 727, 731], "dtype": [2, 5, 6, 9, 10, 13, 14, 18, 19, 22, 28, 29, 31, 32, 33, 36, 37, 41, 42, 45, 48, 50, 51, 52, 69, 70, 71, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 95, 96, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 155, 221, 250, 251, 252, 253, 254, 255, 260, 263, 265, 278, 288, 291, 294, 301, 306, 314, 324, 336, 380, 381, 382, 383, 384, 394, 395, 396, 397, 400, 403, 419, 420, 421, 423, 432, 441, 467, 496, 497, 498, 501, 503, 504, 507, 508, 510, 511, 513, 514, 515, 519, 526, 543, 559, 582, 583, 604, 605, 606, 609, 610, 611, 620, 621, 622, 623, 628, 630, 632, 633, 636, 638, 641, 643, 644, 655, 656, 657, 658, 660, 661, 672, 685, 687, 691, 692, 693, 695, 698, 699, 701, 702, 703, 704, 705, 709, 711], "float32": [2, 5, 6, 10, 13, 28, 29, 33, 36, 45, 86, 89, 91, 96, 97, 98, 102, 106, 107, 110, 111, 112, 113, 116, 119, 120, 122, 127, 130, 136, 200, 227, 260, 268, 288, 291, 294, 306, 314, 324, 336, 397, 432, 467, 496, 497, 499, 501, 503, 504, 507, 519, 521, 525, 550, 552, 553, 559, 582, 638, 641, 642, 672, 691, 693, 703, 704, 705], "forward_classifi": [2, 672], "param": [2, 26, 33, 49, 405, 422, 423, 501, 661, 672, 714], "init": [2, 655, 672, 685, 714], "rng": [2, 672, 714], "mention": [2, 675, 681, 682, 683, 686, 693, 697, 698, 701, 702, 704, 707, 724], "abov": [2, 5, 8, 9, 14, 18, 25, 31, 32, 37, 41, 63, 69, 70, 71, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 102, 118, 122, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 190, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 211, 212, 214, 215, 216, 217, 220, 222, 223, 224, 225, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 249, 250, 258, 263, 266, 286, 288, 291, 294, 295, 297, 306, 311, 312, 313, 314, 316, 317, 318, 324, 326, 329, 330, 331, 332, 336, 340, 341, 366, 394, 397, 422, 426, 428, 430, 432, 468, 491, 493, 496, 497, 499, 501, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 558, 559, 560, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 602, 604, 609, 610, 612, 613, 614, 615, 616, 617, 618, 621, 625, 626, 627, 628, 629, 630, 631, 632, 633, 672, 681, 682, 683, 686, 687, 688, 689, 690, 691, 693, 694, 695, 697, 698, 700, 701, 702, 703, 704, 707, 709, 711, 712, 713, 714, 724, 729], "exactli": [2, 237, 499, 674, 676, 689, 690, 691, 692, 693, 695, 704, 707], "wai": [2, 672, 674, 675, 679, 680, 682, 685, 686, 687, 688, 690, 691, 701, 702, 703, 704, 707, 711, 712, 713, 714, 717, 718, 726, 730, 731], "transpiled_func": 2, "unified_func": 2, "fashion": [2, 643, 704], "rough": 2, "edg": [2, 9, 16, 32, 39, 294, 297, 306, 328, 366, 397, 506, 564, 566, 579, 644, 685, 704, 724, 726, 730], "These": [2, 9, 32, 295, 297, 306, 340, 365, 394, 503, 504, 529, 536, 537, 672, 674, 675, 676, 678, 680, 681, 682, 683, 685, 689, 691, 693, 694, 697, 698, 701, 702, 704, 705, 709, 710, 712, 713, 714, 717, 719, 724, 728, 730, 731], "subclass": [2, 699, 702, 707], "within": [2, 4, 9, 32, 69, 261, 273, 291, 349, 350, 351, 496, 510, 606, 672, 681, 683, 686, 690, 691, 702, 703, 704, 713, 717, 720, 721, 725], "sequenti": [2, 672, 688, 689, 713], "more": [2, 9, 14, 16, 20, 32, 37, 39, 43, 69, 100, 192, 194, 210, 225, 284, 292, 295, 296, 297, 337, 338, 345, 346, 349, 350, 351, 353, 368, 496, 497, 499, 504, 506, 512, 535, 541, 542, 545, 548, 550, 552, 559, 568, 575, 614, 615, 616, 617, 643, 672, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 722, 723, 724, 725, 726, 727, 730, 731], "complex": [2, 8, 9, 14, 29, 31, 32, 37, 90, 91, 105, 119, 128, 134, 167, 168, 169, 170, 171, 172, 173, 176, 184, 185, 187, 188, 190, 192, 200, 201, 202, 203, 204, 208, 209, 210, 211, 220, 222, 225, 227, 230, 231, 232, 233, 234, 237, 238, 263, 291, 294, 295, 315, 326, 336, 337, 340, 341, 342, 460, 496, 497, 499, 501, 504, 511, 514, 536, 537, 538, 543, 550, 552, 554, 556, 559, 612, 628, 630, 642, 678, 681, 688, 691, 693, 702, 704, 705, 707, 712, 713, 714, 717, 719, 720, 722, 724, 726, 730, 731], "should": [2, 3, 5, 8, 9, 10, 11, 13, 14, 16, 18, 19, 20, 22, 25, 26, 28, 31, 32, 33, 34, 36, 37, 39, 41, 42, 44, 45, 47, 48, 49, 58, 62, 68, 87, 89, 92, 93, 101, 126, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 190, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 220, 222, 223, 224, 225, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 245, 250, 270, 274, 275, 276, 277, 281, 285, 286, 288, 291, 293, 294, 297, 301, 306, 316, 317, 318, 320, 325, 365, 366, 380, 381, 394, 395, 396, 409, 432, 481, 483, 486, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 523, 524, 529, 530, 531, 532, 533, 535, 537, 538, 539, 540, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 554, 556, 558, 559, 571, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 622, 623, 624, 625, 626, 627, 628, 630, 631, 638, 639, 643, 652, 653, 654, 655, 656, 657, 658, 659, 660, 673, 675, 678, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 711, 712, 713, 720, 721, 724, 726, 731], "util": [2, 9, 32, 145, 498, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 678, 682, 688, 692, 695, 698, 701, 704, 705, 722, 730, 731], "requir": [2, 8, 9, 26, 31, 32, 221, 234, 238, 295, 297, 340, 341, 366, 499, 504, 506, 536, 537, 538, 575, 641, 648, 653, 678, 679, 681, 682, 686, 688, 690, 691, 692, 693, 694, 695, 696, 697, 699, 702, 703, 704, 705, 707, 709, 711, 717, 724, 730], "state": [2, 13, 36, 134, 135, 136, 137, 138, 220, 470, 474, 476, 477, 497, 499, 501, 503, 528, 639, 652, 653, 654, 655, 656, 657, 658, 659, 660, 672, 675, 682, 688, 691, 694, 695, 696, 697, 702, 704, 708, 709, 710, 712, 716, 730, 731], "mean": [2, 9, 10, 13, 15, 16, 18, 22, 24, 26, 28, 32, 33, 36, 38, 39, 41, 45, 47, 82, 160, 265, 291, 294, 295, 296, 297, 300, 301, 306, 321, 326, 339, 346, 353, 358, 366, 374, 376, 381, 400, 401, 416, 484, 485, 487, 492, 496, 498, 501, 502, 503, 504, 505, 506, 507, 508, 510, 514, 518, 520, 521, 522, 525, 526, 534, 561, 571, 580, 581, 582, 589, 604, 605, 641, 643, 644, 655, 656, 658, 672, 682, 683, 684, 685, 687, 689, 691, 692, 693, 698, 700, 701, 702, 704, 705, 707, 709, 711, 712, 713, 714, 716, 717, 719, 721, 724], "transformed_with_st": 2, "map": [2, 9, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 82, 84, 89, 91, 96, 100, 102, 115, 119, 120, 127, 161, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 248, 249, 250, 261, 262, 263, 265, 272, 273, 279, 281, 282, 283, 284, 291, 294, 316, 317, 318, 349, 350, 351, 353, 368, 369, 370, 374, 376, 377, 378, 379, 381, 394, 395, 396, 397, 404, 407, 408, 410, 411, 415, 416, 417, 419, 422, 423, 426, 428, 430, 431, 432, 434, 435, 438, 446, 447, 460, 461, 463, 465, 467, 468, 480, 481, 486, 491, 501, 508, 517, 518, 519, 520, 526, 527, 530, 531, 532, 537, 538, 540, 542, 543, 545, 547, 549, 550, 556, 561, 562, 563, 564, 568, 571, 572, 573, 574, 575, 578, 579, 590, 591, 595, 596, 603, 604, 605, 606, 608, 611, 614, 615, 616, 617, 618, 622, 623, 626, 628, 629, 631, 632, 633, 686, 689, 691, 697, 698, 702, 704, 705, 712, 716, 717, 719, 725], "convolut": [2, 9, 13, 32, 36, 294, 313, 331, 503, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 643, 656, 722, 724], "c": [2, 5, 9, 10, 11, 13, 16, 22, 28, 29, 31, 32, 33, 34, 36, 37, 39, 43, 45, 61, 70, 71, 86, 89, 112, 115, 170, 181, 187, 188, 208, 209, 220, 223, 231, 238, 294, 295, 297, 300, 306, 308, 309, 320, 325, 337, 338, 340, 342, 345, 349, 350, 351, 352, 358, 374, 375, 376, 396, 407, 415, 416, 417, 426, 430, 431, 468, 482, 483, 486, 488, 489, 490, 493, 496, 497, 499, 501, 502, 503, 504, 506, 508, 511, 512, 514, 517, 518, 519, 520, 521, 522, 536, 538, 540, 571, 575, 583, 586, 590, 591, 592, 594, 600, 601, 612, 617, 623, 624, 629, 631, 658, 673, 675, 676, 677, 682, 684, 688, 689, 693, 698, 700, 708, 709, 710, 712, 717, 719, 720, 724, 728, 729, 731], "h": [2, 9, 10, 13, 32, 33, 36, 294, 312, 313, 330, 331, 415, 417, 501, 503, 508, 516, 519, 520, 521, 522, 523, 524, 525, 586, 590, 592, 600, 684, 688, 689, 690, 720], "w": [2, 9, 10, 11, 13, 26, 31, 32, 33, 34, 36, 214, 271, 285, 291, 293, 294, 295, 311, 312, 313, 315, 329, 330, 331, 332, 342, 393, 415, 417, 460, 482, 483, 484, 486, 488, 489, 490, 501, 502, 503, 508, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 589, 672, 684, 700, 709, 712, 713], "bigger": 2, "permut": [2, 16, 39, 48, 304, 386, 506, 569, 576], "infer": [2, 5, 9, 10, 13, 16, 28, 32, 33, 36, 39, 69, 71, 79, 83, 84, 88, 91, 96, 105, 106, 107, 108, 109, 250, 301, 382, 426, 459, 496, 497, 501, 503, 506, 526, 571, 664, 684, 687, 691, 692, 704, 709, 714, 722, 723, 726, 728], "correct": [2, 22, 45, 133, 497, 506, 514, 564, 629, 631, 638, 672, 681, 683, 684, 689, 690, 691, 692, 695, 697, 698, 701, 703, 704], "mind": [2, 681, 686, 689, 704, 718], "well": [2, 33, 296, 346, 428, 501, 504, 551, 643, 672, 679, 683, 688, 690, 691, 695, 701, 702, 703, 704, 713, 714, 716, 723, 724, 725, 729], "hf": 2, "tf_model": 2, "tf_input": 2, "data_class": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52], "_arraywithactiv": [3, 48], "base": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 86, 94, 126, 190, 191, 208, 209, 210, 211, 225, 258, 262, 265, 268, 275, 288, 291, 294, 304, 335, 386, 451, 461, 472, 496, 497, 499, 501, 504, 506, 512, 514, 543, 567, 614, 615, 616, 617, 624, 639, 642, 645, 646, 647, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 667, 670, 672, 682, 683, 685, 687, 689, 690, 691, 695, 697, 699, 700, 701, 703, 704, 705, 706, 707, 709, 716, 724, 729, 731], "abc": [3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 51, 418, 501, 508, 601, 654, 655, 659, 711], "_abc_impl": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52], "_abc": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52], "_abc_data": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 52], "gelu": [3, 25, 493, 652, 672], "approxim": [3, 8, 9, 14, 25, 31, 32, 37, 55, 168, 169, 172, 173, 174, 175, 184, 185, 190, 192, 194, 208, 209, 210, 211, 225, 232, 233, 237, 238, 239, 271, 281, 291, 296, 346, 493, 499, 504, 545, 548, 652, 694, 702], "variant": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 77, 79, 81, 82, 84, 86, 87, 88, 89, 91, 92, 93, 96, 100, 101, 102, 112, 115, 119, 120, 127, 144, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 306, 311, 312, 313, 314, 316, 317, 318, 320, 324, 325, 326, 329, 330, 331, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 407, 408, 410, 411, 414, 415, 416, 417, 418, 419, 422, 423, 426, 428, 430, 431, 432, 434, 435, 436, 438, 439, 441, 446, 447, 460, 461, 462, 463, 465, 467, 468, 480, 482, 483, 486, 488, 489, 490, 491, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 530, 531, 532, 534, 535, 536, 537, 538, 540, 542, 543, 545, 548, 549, 550, 552, 556, 557, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 686, 693, 694, 707], "simpli": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 77, 79, 81, 82, 84, 86, 87, 88, 89, 91, 92, 93, 96, 100, 101, 102, 115, 119, 120, 127, 144, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 306, 311, 312, 313, 314, 316, 317, 318, 320, 324, 325, 326, 329, 330, 331, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 407, 408, 410, 411, 414, 415, 416, 417, 418, 419, 422, 423, 426, 428, 430, 432, 434, 435, 436, 438, 439, 441, 446, 447, 460, 461, 462, 463, 465, 467, 468, 480, 482, 483, 486, 488, 489, 490, 491, 499, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 530, 531, 532, 534, 535, 536, 537, 538, 540, 542, 543, 548, 549, 550, 552, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 672, 681, 682, 683, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 701, 702, 703, 704, 707, 709, 713, 714, 717, 719, 725, 730], "docstr": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 69, 70, 71, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 100, 101, 102, 112, 115, 119, 120, 127, 144, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 254, 255, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 291, 306, 311, 312, 313, 314, 316, 317, 318, 320, 324, 325, 326, 329, 330, 331, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 407, 408, 410, 411, 414, 415, 416, 417, 418, 419, 422, 423, 426, 428, 430, 431, 432, 434, 435, 436, 438, 439, 441, 446, 447, 460, 461, 462, 463, 465, 467, 468, 480, 481, 482, 483, 486, 488, 489, 490, 491, 496, 497, 499, 501, 504, 506, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 680, 681, 684, 688, 696, 697, 698, 702, 705], "write": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 69, 70, 71, 77, 78, 79, 80, 81, 83, 84, 85, 86, 89, 90, 91, 92, 93, 95, 96, 99, 101, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 246, 247, 248, 249, 250, 251, 252, 254, 255, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 274, 275, 276, 277, 280, 281, 286, 288, 291, 294, 295, 296, 297, 300, 301, 302, 304, 306, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 328, 329, 330, 331, 332, 334, 336, 337, 338, 339, 343, 344, 345, 346, 353, 356, 357, 358, 359, 360, 361, 364, 365, 368, 369, 370, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 394, 395, 396, 397, 398, 399, 400, 401, 403, 410, 411, 415, 416, 417, 422, 423, 432, 446, 447, 482, 483, 486, 488, 489, 490, 491, 493, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 551, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 579, 583, 602, 603, 604, 605, 606, 608, 610, 611, 613, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 639, 672, 676, 680, 681, 683, 684, 685, 687, 688, 690, 691, 693, 694, 695, 698, 701, 703, 705, 709, 711, 714, 724, 731], "broadcast": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 69, 70, 71, 77, 78, 79, 80, 81, 83, 84, 85, 86, 89, 90, 91, 92, 93, 95, 96, 99, 100, 101, 161, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 245, 246, 247, 248, 249, 250, 262, 263, 264, 265, 268, 270, 272, 274, 275, 276, 277, 281, 286, 288, 291, 294, 295, 296, 297, 300, 301, 306, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 325, 326, 328, 329, 330, 331, 334, 337, 338, 339, 343, 344, 346, 352, 353, 356, 368, 370, 374, 377, 378, 379, 380, 381, 383, 384, 394, 395, 396, 397, 400, 401, 403, 410, 411, 415, 416, 417, 422, 423, 432, 446, 447, 482, 483, 486, 488, 489, 490, 491, 493, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 549, 551, 553, 554, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 579, 583, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 617, 618, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 641, 689, 691, 693, 694, 695, 704, 705, 709], "element": [3, 5, 8, 9, 10, 13, 14, 16, 18, 19, 20, 22, 25, 26, 28, 29, 31, 32, 33, 36, 37, 39, 41, 42, 43, 45, 48, 49, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 69, 77, 83, 84, 92, 93, 94, 110, 112, 115, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 246, 247, 248, 249, 258, 259, 261, 262, 263, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 288, 291, 294, 295, 297, 306, 316, 317, 318, 321, 326, 335, 336, 340, 341, 349, 350, 351, 358, 359, 360, 361, 364, 370, 371, 392, 393, 395, 396, 397, 398, 399, 400, 407, 410, 411, 422, 423, 439, 441, 460, 461, 463, 467, 468, 493, 496, 499, 501, 503, 504, 506, 508, 510, 511, 512, 513, 514, 515, 526, 532, 534, 536, 537, 542, 547, 549, 550, 552, 556, 564, 567, 568, 569, 570, 571, 572, 573, 574, 583, 586, 592, 603, 611, 612, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 638, 641, 643, 656, 694, 703, 704, 707, 709, 728], "wise": [3, 8, 9, 14, 25, 31, 32, 37, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 167, 168, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 182, 186, 187, 188, 189, 191, 194, 195, 196, 197, 198, 199, 205, 206, 207, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 225, 226, 228, 229, 236, 241, 242, 244, 246, 247, 248, 249, 261, 262, 267, 268, 269, 272, 273, 274, 275, 279, 280, 282, 283, 286, 291, 294, 297, 316, 317, 318, 355, 361, 363, 364, 373, 493, 499, 506, 532, 564, 659, 707], "exampl": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 70, 71, 77, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 123, 124, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 291, 292, 294, 295, 296, 297, 300, 301, 302, 304, 306, 311, 312, 313, 314, 316, 317, 319, 320, 321, 324, 325, 326, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 377, 378, 379, 382, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 406, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 419, 422, 423, 424, 425, 426, 428, 430, 431, 432, 434, 435, 436, 438, 439, 441, 442, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 550, 552, 553, 554, 556, 557, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 584, 586, 589, 590, 591, 592, 594, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 638, 641, 642, 648, 664, 670, 676, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 698, 699, 701, 702, 704, 705, 709, 711, 712, 713, 714, 716, 717, 721, 722, 725, 727, 730, 731], "6": [3, 5, 8, 9, 10, 11, 13, 14, 16, 18, 19, 21, 22, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 55, 57, 62, 66, 70, 71, 83, 84, 87, 88, 91, 96, 100, 101, 110, 112, 166, 167, 169, 170, 172, 173, 174, 175, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 210, 212, 213, 215, 217, 218, 219, 220, 222, 223, 224, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 242, 244, 246, 247, 248, 249, 250, 263, 265, 271, 272, 274, 275, 276, 278, 284, 286, 288, 291, 292, 294, 295, 297, 300, 302, 304, 306, 314, 316, 319, 320, 324, 325, 329, 332, 335, 336, 342, 343, 347, 349, 350, 351, 354, 358, 359, 362, 363, 365, 366, 367, 368, 369, 372, 373, 378, 379, 382, 384, 385, 387, 392, 394, 395, 396, 397, 399, 401, 403, 408, 410, 411, 414, 415, 416, 422, 423, 430, 431, 432, 447, 460, 462, 463, 465, 469, 482, 483, 484, 485, 486, 487, 488, 490, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 530, 532, 533, 534, 535, 537, 538, 542, 543, 544, 547, 550, 552, 553, 554, 556, 557, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 583, 584, 594, 601, 602, 603, 604, 605, 606, 608, 609, 610, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 641, 655, 672, 685, 687, 689, 690, 693, 700, 704, 707, 709, 711, 712, 713], "138": [3, 55, 493], "165": [3, 55, 493, 503, 527], "hardswish": [3, 25, 493, 652], "leaky_relu": [3, 25, 493, 642], "alpha": [3, 8, 9, 25, 31, 32, 52, 57, 170, 236, 242, 251, 286, 288, 295, 301, 341, 381, 382, 383, 493, 499, 652, 697, 702, 703], "float": [3, 5, 6, 8, 9, 10, 11, 13, 14, 15, 17, 18, 20, 22, 25, 28, 29, 31, 32, 33, 34, 36, 37, 38, 40, 41, 45, 48, 57, 63, 69, 70, 71, 78, 80, 82, 83, 84, 85, 86, 90, 91, 95, 99, 103, 107, 112, 116, 120, 126, 127, 130, 136, 145, 154, 158, 159, 162, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 182, 183, 184, 185, 187, 188, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 206, 208, 209, 210, 211, 212, 213, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 249, 250, 251, 252, 254, 255, 261, 262, 267, 268, 273, 275, 276, 279, 280, 281, 283, 284, 286, 288, 291, 292, 294, 295, 297, 300, 301, 306, 316, 317, 318, 335, 338, 340, 341, 357, 374, 375, 376, 379, 380, 381, 382, 383, 384, 394, 395, 396, 397, 403, 409, 410, 411, 419, 428, 451, 452, 455, 460, 461, 480, 482, 483, 486, 488, 489, 490, 493, 494, 496, 497, 498, 499, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 514, 526, 529, 530, 531, 533, 536, 537, 538, 540, 543, 544, 545, 548, 549, 550, 551, 552, 553, 554, 556, 559, 561, 562, 563, 580, 581, 582, 589, 602, 605, 606, 612, 614, 615, 616, 617, 622, 623, 625, 626, 627, 628, 629, 630, 631, 638, 641, 642, 644, 652, 655, 658, 659, 685, 689, 691, 694, 695, 697, 698, 700, 701, 703, 704, 705, 707, 709, 711, 713], "slope": [3, 9, 25, 32, 57, 242, 245, 286, 493, 652], "neg": [3, 8, 9, 14, 16, 18, 23, 25, 31, 32, 37, 39, 41, 46, 57, 69, 80, 82, 94, 187, 194, 201, 202, 220, 221, 225, 229, 234, 250, 258, 259, 288, 295, 301, 339, 384, 493, 496, 499, 504, 506, 510, 515, 532, 534, 552, 556, 558, 559, 565, 567, 568, 572, 605, 632, 633, 641, 643, 652, 689, 701], "section": [3, 9, 20, 32, 57, 294, 297, 326, 336, 354, 362, 372, 512, 614, 615, 616, 617, 672, 677, 678, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 701, 702, 703, 704, 705, 707, 708, 712, 713, 720, 727, 730], "leaki": [3, 25, 57, 493, 652], "relu": [3, 9, 24, 25, 32, 57, 245, 246, 249, 286, 493, 652, 672, 703, 712, 713], "39": [3, 8, 9, 18, 25, 31, 32, 34, 41, 57, 173, 208, 210, 212, 242, 286, 294, 306, 312, 314, 331, 334, 395, 482, 493, 499, 502, 504, 514, 547, 605, 624], "85": [3, 9, 18, 25, 31, 32, 34, 36, 41, 49, 57, 172, 181, 182, 226, 242, 286, 306, 395, 460, 486, 493, 499, 501, 502, 503, 510, 527, 604, 605, 606], "17": [3, 9, 25, 31, 32, 33, 34, 36, 41, 49, 57, 58, 86, 170, 187, 212, 220, 294, 297, 311, 312, 314, 320, 321, 324, 325, 329, 330, 332, 335, 358, 416, 431, 482, 484, 493, 496, 499, 501, 502, 503, 504, 508, 510, 517, 526, 527, 535, 553, 591, 604, 605, 606, 608, 689, 693], "log_softmax": [3, 25, 493], "axi": [3, 5, 8, 9, 10, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 28, 31, 32, 33, 37, 38, 39, 41, 42, 43, 44, 45, 46, 58, 62, 85, 86, 89, 160, 234, 239, 265, 266, 271, 278, 291, 294, 296, 297, 300, 304, 306, 314, 315, 321, 324, 326, 336, 346, 348, 353, 354, 355, 358, 359, 360, 362, 366, 367, 368, 369, 370, 371, 372, 377, 378, 379, 387, 392, 395, 396, 397, 399, 400, 401, 402, 403, 415, 422, 481, 493, 496, 498, 499, 501, 503, 504, 505, 506, 507, 510, 511, 512, 513, 514, 515, 525, 532, 535, 543, 558, 559, 561, 562, 563, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 608, 609, 610, 614, 618, 619, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 641, 643, 656, 661, 689, 691, 693, 695, 697, 698, 701, 702, 704, 707, 709, 711, 714, 716], "ax": [3, 9, 14, 16, 19, 22, 23, 25, 32, 37, 39, 42, 45, 46, 48, 51, 58, 62, 160, 265, 266, 278, 284, 291, 292, 294, 297, 300, 306, 321, 326, 336, 365, 366, 368, 377, 399, 400, 401, 403, 415, 481, 498, 501, 504, 506, 511, 514, 515, 532, 543, 551, 554, 555, 559, 566, 568, 569, 572, 574, 576, 579, 609, 610, 625, 626, 627, 628, 629, 630, 631, 632, 633, 641, 643, 656, 691, 693, 704, 705, 709, 711], "along": [3, 5, 8, 9, 10, 14, 15, 16, 18, 19, 21, 22, 23, 25, 26, 28, 31, 32, 33, 37, 38, 39, 41, 42, 43, 44, 45, 46, 58, 62, 66, 85, 86, 160, 234, 237, 239, 259, 265, 266, 278, 284, 288, 291, 292, 294, 296, 297, 300, 306, 314, 320, 321, 324, 325, 326, 336, 346, 353, 354, 355, 359, 360, 366, 367, 370, 377, 378, 379, 395, 396, 397, 399, 400, 401, 403, 415, 422, 495, 496, 498, 499, 501, 504, 505, 506, 507, 510, 511, 513, 514, 515, 532, 547, 556, 558, 559, 561, 562, 563, 565, 568, 569, 570, 572, 573, 575, 577, 578, 580, 581, 582, 608, 609, 610, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 638, 656, 672, 681, 684, 693, 701, 705, 707, 709, 724], "98": [3, 11, 18, 25, 31, 34, 41, 58, 182, 185, 233, 242, 286, 486, 493, 499, 502, 504, 508, 511, 514, 547, 584, 604, 606, 613, 624], "37": [3, 8, 9, 25, 31, 32, 36, 48, 58, 173, 181, 230, 233, 237, 302, 335, 385, 499, 503, 504, 508, 510, 527, 544, 591, 605, 690], "35": [3, 13, 25, 31, 32, 36, 37, 41, 58, 175, 234, 294, 314, 324, 499, 503, 504, 511, 514, 527, 530, 532, 605, 613, 624], "0719": [3, 25, 58], "62": [3, 25, 31, 40, 41, 58, 205, 233, 499, 509, 510, 602, 604, 606], "221": [3, 58], "7": [3, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 57, 58, 59, 60, 69, 70, 71, 85, 88, 89, 106, 112, 115, 145, 167, 170, 173, 177, 178, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 193, 194, 197, 198, 199, 204, 205, 206, 207, 208, 209, 210, 212, 215, 217, 218, 219, 220, 222, 223, 224, 226, 227, 230, 231, 232, 234, 237, 238, 240, 241, 242, 244, 246, 247, 248, 249, 250, 252, 255, 261, 263, 265, 266, 271, 272, 273, 275, 277, 278, 284, 286, 288, 291, 292, 294, 295, 296, 297, 302, 306, 311, 312, 313, 314, 319, 320, 324, 325, 329, 332, 334, 335, 344, 346, 349, 350, 351, 354, 358, 362, 363, 365, 366, 367, 368, 369, 372, 373, 382, 384, 385, 392, 395, 396, 398, 399, 403, 408, 410, 411, 415, 416, 430, 431, 432, 439, 446, 447, 460, 463, 482, 483, 485, 486, 487, 488, 490, 492, 493, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 517, 518, 520, 522, 525, 526, 527, 530, 532, 533, 534, 535, 538, 542, 544, 547, 550, 552, 553, 554, 556, 557, 561, 562, 563, 564, 567, 568, 573, 575, 576, 578, 583, 584, 591, 602, 603, 604, 605, 606, 608, 613, 614, 616, 618, 619, 621, 622, 623, 624, 626, 628, 630, 631, 641, 682, 683, 689, 690, 693, 698, 700, 701, 704], "82": [3, 8, 34, 41, 58, 173, 306, 395, 482, 502, 605, 606], "mish": [3, 25, 493, 652], "30340147": [3, 59, 493], "86509842": [3, 25, 59, 493], "sigmoid": [3, 9, 25, 32, 244, 286, 301, 380, 493, 652, 709, 712, 713], "269": [3, 61, 493], "731": [3, 61, 493], "881": [3, 8, 31, 61, 173, 186, 226, 493, 499], "softmax": [3, 13, 24, 25, 36, 493, 503, 529, 530, 652, 672], "422": [3, 62, 493], "155": [3, 36, 62, 493, 503, 527], "softplu": [3, 25, 493, 652, 707], "beta": [3, 9, 17, 25, 32, 40, 63, 251, 254, 255, 288, 295, 301, 341, 382, 383, 493, 509, 602, 707], "threshold": [3, 8, 9, 25, 31, 32, 63, 218, 219, 249, 262, 286, 291, 493, 499, 707], "3461": [3, 25, 63, 493], "6491": [3, 25, 63, 493], "535": [3, 25, 63, 493, 695], "22": [3, 8, 9, 10, 18, 22, 25, 32, 33, 36, 41, 58, 63, 182, 190, 294, 302, 306, 311, 312, 313, 314, 329, 330, 331, 332, 335, 385, 395, 416, 447, 480, 493, 499, 503, 504, 508, 511, 514, 526, 527, 535, 540, 547, 591, 601, 604, 605, 606, 613, 623, 624, 689, 695], "09": [3, 8, 34, 41, 63, 225, 235, 482, 493, 499, 502, 503, 530, 605], "31": [3, 8, 9, 31, 32, 33, 36, 41, 58, 63, 86, 181, 212, 220, 294, 306, 313, 314, 395, 410, 493, 496, 499, 501, 504, 527, 553, 605, 606, 712], "55": [3, 32, 41, 63, 181, 240, 306, 395, 430, 499, 501, 504, 510, 514, 540, 547, 553, 605, 606, 624, 685], "13": [3, 8, 9, 13, 18, 22, 31, 32, 33, 34, 36, 39, 41, 45, 48, 63, 115, 145, 170, 182, 185, 194, 205, 225, 234, 271, 278, 291, 294, 297, 314, 324, 335, 354, 358, 362, 372, 384, 395, 396, 410, 411, 415, 416, 431, 452, 460, 482, 493, 497, 498, 499, 501, 502, 503, 504, 506, 507, 511, 512, 514, 517, 518, 526, 527, 530, 535, 547, 553, 578, 582, 604, 605, 606, 613, 614, 622, 623, 624, 689, 693, 702], "collect": [4, 26, 27, 493, 498, 501, 502, 503, 505, 508, 509, 510, 596, 652, 656, 658, 659, 690, 695, 699, 700, 703, 704, 716, 722, 724, 727], "accept": [4, 5, 8, 9, 14, 27, 31, 32, 69, 70, 71, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 102, 118, 122, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 190, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 211, 212, 214, 215, 216, 217, 220, 222, 223, 224, 225, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 258, 263, 266, 285, 288, 291, 293, 294, 295, 297, 306, 311, 312, 313, 314, 316, 317, 318, 324, 329, 330, 331, 332, 341, 366, 394, 397, 401, 408, 416, 417, 422, 426, 428, 430, 432, 446, 463, 468, 491, 496, 497, 499, 501, 502, 503, 504, 506, 508, 509, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 560, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 602, 609, 610, 612, 613, 614, 615, 616, 617, 618, 621, 625, 626, 627, 628, 629, 630, 631, 632, 633, 672, 682, 683, 686, 689, 692, 693, 694, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 711, 719, 722], "_to_ivi": 4, "_to_n": 4, "inplac": [4, 10, 26, 33, 406, 408, 429, 432, 433, 450, 501, 508, 590, 591, 595, 600, 601, 647, 648, 653, 659, 684, 686, 693, 697, 699, 702, 707, 711, 713], "to_ignor": [4, 24, 47, 508, 594, 595], "args_to_ivi": 4, "include_deriv": [4, 27, 508, 584, 595, 638], "form": [4, 5, 14, 26, 28, 37, 70, 71, 88, 92, 93, 252, 263, 288, 291, 295, 297, 340, 355, 363, 366, 373, 405, 464, 466, 496, 501, 503, 504, 508, 531, 533, 535, 536, 537, 538, 540, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 556, 584, 595, 641, 655, 675, 677, 681, 683, 698, 704, 707, 713, 714, 724, 725, 730], "nest": [4, 26, 27, 49, 51, 190, 437, 465, 481, 484, 499, 501, 502, 507, 580, 581, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 654, 657, 659, 686, 688, 689, 698, 700, 705, 712, 713, 717, 719, 724], "unchang": [4, 8, 227, 294, 297, 336, 358, 503, 526], "recurs": [4, 26, 27, 113, 114, 146, 147, 420, 421, 497, 498, 501, 508, 583, 584, 593, 594, 595, 682, 685, 688, 689, 698, 701, 713, 717], "deriv": [4, 5, 9, 11, 27, 28, 32, 34, 79, 84, 91, 96, 250, 254, 288, 482, 483, 486, 487, 488, 489, 490, 496, 502, 507, 508, 582, 584, 595, 657, 659, 660, 691, 692, 711, 713], "word": [4, 69, 496, 510, 606, 653, 689, 702, 719], "args_to_n": [4, 701], "cont_inplac": 4, "updat": [4, 10, 11, 26, 33, 34, 432, 446, 447, 450, 482, 483, 486, 488, 489, 490, 501, 502, 503, 507, 508, 526, 528, 580, 581, 582, 590, 591, 595, 600, 601, 648, 653, 658, 659, 664, 672, 681, 682, 683, 684, 685, 686, 689, 690, 691, 693, 697, 699, 700, 702, 703, 704, 707, 709, 711, 712, 714, 717], "place": [4, 5, 8, 9, 10, 14, 16, 26, 28, 30, 31, 32, 33, 39, 69, 70, 71, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 102, 118, 122, 161, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 190, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 211, 212, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 253, 258, 261, 263, 266, 270, 272, 273, 274, 275, 277, 278, 279, 282, 283, 288, 291, 294, 295, 297, 306, 311, 312, 313, 314, 316, 317, 318, 324, 329, 330, 331, 332, 341, 358, 366, 367, 381, 394, 397, 401, 408, 416, 417, 422, 426, 428, 430, 431, 432, 446, 463, 468, 491, 496, 497, 498, 499, 501, 502, 503, 504, 506, 508, 509, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 560, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 602, 609, 610, 612, 613, 614, 615, 616, 617, 618, 621, 625, 626, 627, 628, 629, 630, 631, 632, 633, 659, 672, 678, 680, 683, 684, 685, 688, 689, 690, 692, 693, 694, 697, 698, 702, 703, 704, 705, 707, 714, 719, 726], "ignor": [4, 5, 9, 26, 32, 87, 294, 295, 316, 317, 318, 341, 496, 503, 504, 508, 529, 541, 594, 595, 659, 688, 690, 693, 704, 717, 730], "decid": [4, 26, 508, 583, 584, 593, 594, 595, 672, 681, 682, 691, 707], "go": [4, 9, 36, 294, 335, 508, 583, 584, 593, 594, 595, 672, 677, 678, 681, 682, 683, 684, 687, 688, 690, 691, 693, 696, 702, 703, 704, 705, 708, 712, 717, 720, 724, 725, 729, 731], "deeper": [4, 508, 583, 584, 593, 594, 595, 674, 683, 684, 704, 708], "to_ivi": [4, 27, 508, 596, 701], "leaf": [4, 26, 45, 508, 593, 594, 596, 623, 689, 698, 712], "nativearrai": [4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 20, 22, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 70, 71, 77, 79, 84, 85, 86, 87, 88, 89, 91, 92, 93, 96, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 112, 115, 118, 119, 120, 122, 124, 126, 127, 133, 143, 144, 160, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 259, 260, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 291, 292, 294, 295, 296, 297, 300, 301, 302, 304, 306, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 328, 329, 330, 331, 332, 334, 335, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 353, 354, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 394, 395, 396, 397, 398, 404, 407, 408, 410, 411, 415, 416, 417, 419, 422, 423, 424, 425, 426, 428, 430, 431, 432, 435, 438, 439, 441, 446, 447, 448, 450, 459, 460, 461, 462, 463, 465, 467, 468, 470, 480, 482, 483, 484, 486, 488, 489, 490, 491, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 584, 585, 586, 590, 591, 592, 595, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 660, 686, 689, 693, 695, 697, 698, 699, 701, 702, 705, 706, 709, 711, 719], "manner": [4, 27, 508, 595, 674, 682, 692, 694, 698, 702, 705, 712, 716, 717, 720, 722, 730, 731], "travers": [4, 27, 508, 595, 689, 691, 695, 709], "lowest": [4, 9, 18, 27, 32, 41, 306, 397, 508, 510, 595, 604, 698, 717, 719, 721, 725, 729], "leav": [4, 27, 29, 31, 32, 33, 36, 37, 39, 45, 49, 112, 115, 187, 243, 244, 353, 358, 377, 378, 379, 395, 396, 401, 419, 465, 506, 508, 522, 530, 535, 552, 566, 570, 575, 577, 578, 583, 584, 593, 594, 595, 596, 622, 623, 672, 681, 689, 690, 691, 693, 694, 697, 698, 701, 702, 704, 712, 713], "search": [4, 9, 27, 32, 609, 610, 648, 674, 680, 682, 689, 693, 704, 705], "to_n": [4, 27, 709], "mayb": [4, 672, 682, 690, 709, 711], "_arraywithcr": [5, 48], "asarrai": [5, 9, 10, 21, 28, 32, 33, 44, 70, 304, 386, 387, 415, 426, 430, 431, 460, 496, 501, 503, 512, 513, 517, 615, 619, 695, 699, 702, 703], "devic": [5, 9, 18, 26, 28, 32, 41, 48, 50, 51, 52, 69, 70, 71, 78, 79, 80, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 140, 141, 142, 143, 144, 145, 146, 147, 148, 153, 154, 155, 156, 158, 159, 160, 161, 162, 164, 166, 250, 258, 288, 301, 356, 380, 381, 383, 384, 406, 420, 421, 496, 501, 510, 603, 604, 605, 606, 636, 638, 639, 653, 655, 656, 657, 658, 659, 660, 661, 664, 672, 675, 683, 684, 687, 691, 695, 698, 699, 703, 704, 705, 707, 709, 714, 717, 718, 719, 723, 724, 726, 727, 728, 729], "data": [5, 8, 9, 10, 13, 14, 16, 18, 19, 20, 21, 22, 23, 26, 28, 31, 32, 33, 36, 37, 39, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 69, 70, 71, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 104, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 133, 139, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 220, 222, 223, 224, 225, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 243, 245, 250, 251, 252, 253, 254, 255, 259, 260, 262, 276, 281, 286, 288, 291, 294, 295, 297, 301, 305, 306, 316, 317, 318, 334, 339, 340, 367, 369, 380, 381, 382, 383, 384, 390, 394, 395, 396, 400, 403, 419, 432, 434, 435, 438, 463, 496, 498, 499, 501, 503, 504, 506, 510, 511, 513, 514, 515, 516, 523, 524, 526, 527, 531, 532, 533, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 558, 559, 565, 568, 569, 571, 572, 574, 575, 579, 604, 605, 606, 608, 609, 610, 612, 613, 618, 620, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 638, 639, 641, 642, 643, 644, 648, 655, 656, 657, 661, 672, 673, 675, 682, 684, 685, 686, 688, 689, 692, 694, 697, 698, 699, 701, 703, 705, 707, 709, 711, 719, 724, 725, 726, 728, 729, 730], "ndarrai": [5, 9, 10, 28, 32, 70, 71, 88, 294, 297, 306, 336, 367, 400, 401, 467, 496, 501, 664, 681, 686, 691, 692, 695, 697, 701, 702, 703, 705, 707, 709, 711, 714, 719], "boolean": [5, 6, 8, 9, 10, 16, 19, 22, 26, 28, 29, 31, 32, 33, 39, 42, 45, 48, 49, 67, 68, 70, 71, 77, 83, 99, 115, 117, 119, 120, 123, 139, 149, 157, 163, 177, 178, 179, 180, 181, 182, 214, 215, 216, 217, 273, 291, 297, 349, 350, 351, 354, 356, 358, 359, 360, 362, 365, 368, 372, 404, 407, 425, 428, 429, 433, 434, 435, 436, 437, 438, 439, 448, 450, 453, 454, 456, 457, 480, 495, 496, 497, 498, 499, 501, 506, 507, 508, 511, 514, 567, 568, 569, 571, 573, 574, 576, 578, 580, 581, 593, 611, 612, 613, 625, 627, 641, 642, 643, 644, 648, 658, 689, 691, 702, 704, 707], "never": [5, 9, 16, 28, 32, 39, 71, 297, 349, 350, 351, 354, 356, 358, 359, 360, 362, 365, 368, 372, 425, 501, 506, 567, 568, 569, 571, 573, 574, 576, 578, 683, 691, 701, 702, 704], "valueerror": [5, 9, 16, 28, 32, 39, 43, 71, 294, 297, 326, 336, 349, 350, 351, 354, 356, 358, 359, 360, 362, 365, 367, 368, 372, 425, 501, 506, 567, 568, 569, 571, 573, 574, 576, 578, 617, 667, 695], "reus": [5, 9, 16, 28, 32, 39, 71, 297, 349, 350, 351, 354, 356, 358, 359, 360, 362, 365, 368, 372, 425, 501, 506, 567, 568, 569, 571, 573, 574, 576, 578, 695, 704, 729], "exist": [5, 9, 10, 16, 26, 28, 32, 39, 71, 297, 349, 350, 351, 353, 354, 356, 358, 359, 360, 362, 365, 368, 372, 414, 425, 501, 506, 565, 567, 568, 569, 571, 573, 574, 576, 578, 659, 661, 672, 674, 675, 681, 682, 685, 687, 693, 694, 698, 699, 701, 702, 704, 707, 709, 717, 719, 722, 724, 727, 730], "buffer": [5, 9, 16, 28, 32, 39, 71, 82, 297, 349, 350, 351, 354, 356, 358, 359, 360, 362, 365, 368, 372, 425, 496, 501, 506, 567, 568, 569, 571, 573, 574, 576, 578, 701, 717], "possibl": [5, 9, 16, 28, 32, 39, 71, 194, 237, 294, 297, 315, 349, 350, 351, 354, 356, 358, 359, 360, 362, 365, 368, 372, 425, 442, 499, 501, 503, 506, 514, 526, 567, 568, 569, 571, 573, 574, 576, 578, 625, 627, 669, 672, 675, 677, 681, 682, 683, 685, 688, 689, 691, 693, 694, 698, 700, 701, 702, 703, 704, 707, 709, 712, 716, 717, 722, 724, 730], "nativedtyp": [5, 6, 9, 13, 14, 18, 19, 22, 28, 32, 37, 41, 42, 45, 69, 70, 71, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 95, 96, 98, 99, 104, 105, 106, 107, 108, 109, 110, 111, 116, 117, 121, 123, 125, 129, 139, 250, 251, 252, 253, 254, 255, 260, 265, 278, 288, 291, 301, 306, 380, 381, 382, 383, 384, 394, 395, 396, 397, 400, 496, 497, 503, 504, 510, 511, 513, 514, 526, 559, 604, 605, 606, 609, 610, 620, 622, 623, 628, 630, 655, 691, 692, 697, 705, 709], "nativedevic": [5, 7, 9, 18, 28, 30, 32, 41, 69, 70, 71, 78, 79, 80, 83, 84, 85, 86, 88, 89, 90, 91, 94, 95, 96, 141, 142, 143, 144, 145, 148, 153, 154, 155, 156, 158, 159, 160, 161, 162, 166, 250, 258, 288, 301, 380, 381, 383, 384, 496, 498, 510, 603, 604, 605, 606, 655, 659, 660, 691, 692, 695, 697, 705], "interpret": [5, 9, 28, 32, 70, 71, 82, 88, 306, 394, 496, 690, 725], "9": [5, 6, 8, 9, 10, 11, 13, 14, 16, 18, 20, 21, 22, 25, 29, 31, 32, 33, 34, 36, 37, 39, 41, 43, 44, 45, 48, 49, 55, 69, 70, 71, 88, 105, 106, 107, 108, 109, 112, 115, 168, 170, 172, 173, 176, 177, 178, 181, 187, 188, 194, 201, 207, 208, 209, 215, 216, 218, 219, 220, 223, 225, 226, 230, 231, 234, 235, 236, 241, 243, 246, 247, 267, 271, 277, 278, 284, 286, 291, 292, 294, 297, 304, 306, 311, 312, 314, 319, 320, 324, 325, 329, 330, 332, 334, 335, 343, 349, 350, 351, 354, 358, 362, 367, 368, 370, 372, 382, 384, 387, 396, 411, 415, 416, 417, 419, 422, 430, 431, 434, 435, 438, 446, 447, 460, 462, 482, 483, 484, 488, 493, 496, 497, 499, 501, 502, 503, 504, 506, 508, 510, 511, 512, 513, 514, 517, 518, 519, 522, 525, 526, 527, 532, 533, 535, 538, 542, 543, 544, 547, 550, 552, 553, 554, 556, 557, 564, 568, 572, 573, 575, 576, 578, 583, 584, 589, 591, 594, 603, 604, 605, 606, 608, 613, 614, 616, 618, 619, 621, 623, 624, 626, 628, 630, 631, 641, 659, 689, 693, 700, 704, 712, 713, 720], "39999998": [5, 70, 71, 496, 512, 615], "5999999": [5, 70, 71, 496, 503, 526], "0999999": [5, 22, 70, 71, 275, 291, 496, 626], "10000038": [5, 70, 71, 496], "np": [5, 8, 9, 31, 32, 33, 70, 71, 77, 88, 123, 200, 204, 294, 295, 320, 325, 337, 460, 496, 497, 499, 501, 508, 589, 638, 664, 672, 681, 686, 691, 692, 695, 697, 701, 702, 703, 704, 705, 707, 709, 711, 712, 714, 719], "order": [5, 9, 10, 13, 14, 16, 20, 21, 26, 32, 36, 37, 39, 43, 44, 48, 49, 70, 71, 87, 94, 175, 194, 237, 258, 271, 288, 291, 295, 297, 300, 304, 338, 340, 341, 342, 345, 358, 359, 360, 364, 370, 374, 375, 376, 387, 496, 499, 503, 504, 506, 507, 511, 512, 513, 517, 518, 519, 520, 521, 522, 525, 536, 537, 543, 552, 553, 557, 559, 568, 571, 580, 581, 612, 614, 615, 616, 617, 618, 620, 621, 638, 654, 657, 658, 660, 672, 674, 681, 682, 683, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 702, 703, 704, 705, 706, 707, 712, 714, 717, 720, 723, 724, 725, 727, 730], "90786433e": [5, 70, 71, 496], "310": [5, 70, 71, 496], "copy_arrai": [5, 28, 496], "to_ivy_arrai": [5, 28, 77, 496], "empty_lik": [5, 28, 496], "deafult": [5, 19, 42, 79, 496, 511, 609], "uniniti": [5, 78, 79, 496], "from_dlpack": [5, 28, 496], "full_lik": [5, 28, 496, 705], "fill_valu": [5, 9, 19, 28, 32, 42, 83, 84, 199, 207, 301, 384, 496, 499, 511, 612, 661, 691, 703, 705], "scalar": [5, 8, 9, 10, 14, 25, 28, 31, 32, 33, 37, 57, 84, 89, 170, 191, 236, 263, 264, 266, 268, 271, 273, 275, 280, 291, 295, 297, 341, 349, 350, 351, 361, 468, 480, 496, 499, 501, 504, 559, 691, 700, 702, 717, 724], "fill": [5, 8, 9, 18, 19, 26, 28, 31, 32, 41, 42, 78, 83, 84, 86, 89, 90, 91, 95, 96, 221, 250, 288, 297, 301, 357, 369, 381, 383, 384, 496, 499, 510, 511, 604, 612, 655, 681, 683, 703], "equal": [5, 6, 8, 9, 10, 14, 15, 16, 18, 20, 21, 22, 26, 29, 31, 32, 33, 37, 38, 39, 41, 44, 48, 49, 80, 82, 83, 84, 90, 91, 99, 179, 181, 185, 190, 192, 201, 202, 223, 225, 230, 233, 234, 238, 259, 261, 273, 288, 291, 294, 297, 300, 306, 315, 354, 362, 372, 377, 378, 379, 397, 404, 407, 481, 496, 497, 499, 501, 504, 505, 506, 510, 511, 512, 513, 514, 535, 544, 545, 548, 550, 556, 561, 564, 566, 571, 573, 579, 606, 612, 614, 615, 616, 617, 618, 621, 626, 628, 629, 630, 631, 648, 655, 656, 688, 689, 691, 693, 695, 703, 704], "000123": [5, 84, 496], "ones": [5, 9, 11, 13, 18, 26, 28, 32, 36, 41, 80, 84, 89, 91, 96, 146, 147, 183, 250, 288, 482, 496, 498, 499, 502, 503, 521, 604, 605, 606, 642, 672, 681, 686, 690, 693, 697, 698, 704, 711, 712, 724], "linspac": [5, 28, 69, 496, 672, 697, 707, 709, 731], "stop": [5, 11, 28, 34, 69, 85, 86, 160, 448, 483, 486, 488, 489, 490, 491, 496, 498, 501, 502, 507, 508, 580, 581, 582, 594, 659, 697, 700, 707, 709, 717, 724], "num": [5, 28, 85, 86, 496, 641, 683, 697, 709], "endpoint": [5, 28, 85, 86, 496, 655, 697], "logspac": [5, 28, 496, 709], "10": [5, 8, 9, 10, 11, 13, 14, 18, 20, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 69, 84, 85, 86, 169, 177, 178, 181, 185, 192, 197, 199, 205, 207, 209, 220, 226, 233, 234, 239, 244, 261, 264, 268, 270, 271, 273, 274, 275, 277, 278, 284, 291, 294, 297, 306, 311, 312, 314, 324, 329, 330, 332, 334, 335, 336, 351, 354, 358, 362, 368, 372, 392, 395, 396, 399, 401, 403, 409, 415, 416, 417, 419, 422, 423, 425, 430, 431, 439, 447, 450, 455, 460, 462, 473, 476, 488, 496, 499, 501, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 517, 518, 520, 526, 533, 535, 540, 542, 543, 544, 547, 552, 553, 554, 568, 573, 574, 575, 576, 578, 589, 591, 594, 602, 603, 604, 605, 606, 612, 614, 620, 622, 623, 624, 625, 627, 628, 630, 631, 641, 643, 659, 672, 675, 682, 685, 689, 690, 691, 693, 700, 703, 704, 709, 711, 712, 729], "rang": [5, 9, 22, 28, 32, 69, 85, 86, 234, 295, 306, 341, 395, 396, 397, 415, 481, 496, 499, 501, 512, 514, 614, 622, 623, 628, 630, 641, 643, 644, 655, 672, 691, 695, 698, 704, 709, 712, 713, 714, 724, 730], "log": [5, 8, 9, 14, 28, 31, 32, 37, 86, 210, 212, 225, 243, 244, 276, 282, 286, 291, 296, 301, 346, 380, 496, 499, 550, 641, 643, 644, 652, 683, 689, 690, 693, 698, 701, 702, 703, 704, 706, 707, 709, 712], "space": [5, 8, 9, 10, 28, 31, 32, 33, 69, 85, 86, 239, 271, 291, 415, 419, 496, 499, 501, 675, 707], "sequenc": [5, 9, 13, 14, 16, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 55, 56, 57, 58, 59, 60, 61, 62, 63, 80, 82, 84, 86, 89, 91, 96, 100, 102, 115, 119, 120, 127, 161, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 246, 247, 248, 249, 250, 253, 261, 262, 263, 265, 272, 273, 279, 281, 282, 283, 284, 288, 292, 294, 295, 297, 301, 306, 309, 316, 317, 318, 320, 321, 325, 326, 328, 335, 336, 345, 347, 349, 350, 351, 353, 354, 355, 362, 363, 365, 368, 369, 370, 372, 373, 374, 376, 377, 378, 379, 381, 382, 394, 395, 396, 397, 403, 404, 407, 408, 410, 411, 415, 416, 417, 419, 422, 423, 426, 428, 430, 431, 432, 434, 435, 438, 442, 446, 447, 460, 461, 463, 465, 467, 468, 480, 481, 484, 485, 486, 491, 496, 499, 501, 502, 503, 504, 506, 508, 514, 515, 516, 517, 518, 519, 520, 521, 523, 525, 526, 527, 529, 530, 531, 532, 537, 538, 540, 542, 543, 545, 547, 549, 550, 556, 559, 561, 562, 563, 564, 565, 567, 568, 570, 571, 572, 573, 574, 575, 578, 579, 583, 590, 600, 603, 604, 605, 606, 608, 611, 614, 615, 616, 617, 618, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 656, 658, 660, 683, 690, 691, 692, 693, 695, 704, 705, 707, 709, 714, 716, 727], "gener": [5, 8, 9, 13, 18, 24, 28, 31, 32, 36, 41, 47, 69, 85, 86, 94, 102, 187, 190, 200, 201, 216, 220, 229, 252, 256, 257, 258, 288, 301, 306, 382, 394, 496, 497, 499, 503, 504, 506, 510, 514, 526, 550, 554, 557, 579, 603, 604, 606, 607, 629, 641, 644, 648, 659, 681, 682, 683, 684, 685, 686, 688, 689, 691, 692, 693, 694, 695, 697, 698, 701, 702, 703, 705, 708, 709, 711, 713, 714, 716, 717, 719, 722, 723, 724, 725, 726, 727, 728, 729, 730], "relev": [5, 28, 86, 496, 659, 672, 675, 681, 682, 683, 686, 689, 690, 691, 693, 699, 700, 703, 704, 712, 718, 722, 729, 730], "sampl": [5, 8, 9, 18, 22, 28, 31, 32, 41, 45, 85, 86, 239, 294, 301, 316, 317, 318, 328, 380, 381, 382, 383, 384, 496, 499, 510, 514, 603, 604, 605, 606, 629, 631, 655, 656, 703, 704], "on_valu": [5, 28, 86, 89, 496], "off_valu": [5, 28, 86, 89, 496], "cuda": [5, 9, 18, 28, 32, 41, 85, 86, 89, 140, 141, 142, 156, 158, 301, 380, 381, 383, 384, 496, 498, 510, 603, 604, 605, 606, 655, 656, 657, 658, 659, 660, 672, 709, 717, 719, 729], "cpu": [5, 7, 9, 18, 28, 30, 32, 41, 69, 80, 83, 85, 86, 89, 90, 91, 96, 141, 143, 144, 145, 146, 151, 154, 156, 158, 161, 162, 164, 166, 301, 380, 381, 383, 384, 496, 498, 504, 510, 541, 603, 604, 605, 606, 638, 655, 656, 657, 658, 659, 660, 672, 682, 683, 688, 692, 702, 704, 717, 722, 724, 727, 729], "evenli": [5, 8, 9, 13, 16, 26, 28, 31, 36, 39, 69, 85, 86, 239, 294, 335, 496, 499, 503, 506, 516, 517, 518, 519, 521, 523, 525, 573], "descript": [5, 8, 9, 14, 31, 32, 37, 69, 70, 71, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 95, 96, 102, 118, 122, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 190, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 211, 212, 214, 215, 216, 217, 220, 222, 223, 224, 225, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 263, 266, 288, 291, 294, 295, 297, 306, 311, 312, 313, 314, 316, 317, 318, 324, 329, 330, 331, 332, 341, 366, 394, 397, 422, 426, 428, 430, 468, 491, 496, 497, 499, 501, 502, 503, 504, 506, 508, 509, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 560, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 602, 609, 610, 612, 613, 614, 615, 616, 617, 618, 621, 625, 626, 627, 628, 629, 630, 631, 632, 633, 681, 683, 694, 700, 701], "hint": [5, 8, 9, 14, 31, 32, 69, 70, 71, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 95, 96, 102, 118, 122, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 190, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 211, 212, 214, 215, 216, 217, 220, 222, 223, 224, 225, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 263, 266, 288, 291, 294, 295, 297, 306, 311, 312, 313, 314, 316, 317, 318, 324, 329, 330, 331, 332, 341, 366, 394, 397, 422, 426, 428, 430, 468, 491, 496, 497, 499, 501, 502, 503, 504, 506, 508, 509, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 560, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 602, 609, 610, 612, 613, 614, 615, 616, 617, 618, 621, 625, 626, 627, 628, 629, 630, 631, 632, 633, 681, 686, 694, 697, 698, 701, 702, 705], "assum": [5, 8, 9, 10, 14, 15, 31, 32, 33, 37, 38, 69, 70, 71, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 95, 96, 102, 118, 122, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 190, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 211, 212, 214, 215, 216, 217, 220, 222, 223, 224, 225, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 250, 263, 266, 281, 288, 291, 294, 295, 297, 306, 311, 312, 313, 314, 316, 317, 318, 324, 329, 330, 331, 332, 341, 366, 394, 397, 422, 426, 428, 430, 439, 468, 491, 496, 497, 499, 501, 502, 503, 504, 505, 506, 508, 509, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 602, 609, 610, 612, 613, 614, 615, 616, 617, 618, 621, 625, 626, 627, 628, 629, 630, 631, 632, 633, 656, 672, 682, 685, 687, 690, 691, 694, 703, 704, 707, 711, 712, 717], "simplic": [5, 8, 9, 14, 31, 32, 69, 70, 71, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 95, 96, 102, 118, 122, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 190, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 207, 209, 210, 211, 212, 214, 215, 216, 217, 220, 222, 223, 224, 225, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 263, 266, 288, 291, 294, 295, 297, 306, 311, 312, 313, 314, 316, 317, 318, 324, 329, 330, 331, 332, 341, 366, 394, 397, 422, 426, 428, 430, 468, 491, 496, 497, 499, 501, 502, 503, 504, 506, 508, 509, 511, 512, 513, 514, 517, 518, 519, 520, 521, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 560, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 602, 609, 610, 612, 613, 614, 615, 616, 617, 618, 621, 625, 626, 627, 628, 629, 630, 631, 694, 707, 713, 716], "nestabl": [5, 8, 9, 14, 31, 32, 69, 70, 71, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 102, 118, 122, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 190, 192, 193, 194, 198, 199, 200, 201, 202, 203, 207, 209, 210, 211, 212, 214, 215, 216, 217, 220, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 258, 263, 266, 288, 291, 294, 295, 297, 306, 311, 312, 313, 314, 316, 317, 318, 324, 329, 330, 331, 332, 341, 366, 394, 397, 401, 408, 416, 417, 422, 426, 428, 430, 432, 446, 463, 468, 491, 496, 497, 499, 501, 502, 503, 504, 506, 508, 509, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 560, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 602, 609, 610, 612, 613, 614, 615, 616, 617, 618, 621, 625, 626, 627, 628, 629, 630, 631, 632, 633, 681, 684, 693, 694, 701, 704, 719], "therefor": [5, 8, 9, 14, 31, 32, 69, 70, 71, 78, 79, 80, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 102, 118, 122, 126, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 190, 192, 193, 194, 198, 199, 200, 201, 202, 203, 207, 209, 210, 211, 212, 214, 215, 216, 217, 220, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 250, 258, 263, 266, 288, 291, 294, 295, 297, 306, 311, 312, 313, 314, 316, 317, 318, 324, 329, 330, 331, 332, 341, 366, 394, 397, 401, 408, 416, 417, 422, 426, 428, 430, 432, 446, 463, 468, 491, 496, 497, 499, 501, 502, 503, 504, 506, 508, 509, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 560, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 602, 609, 610, 612, 613, 614, 615, 616, 617, 618, 621, 625, 626, 627, 628, 629, 630, 631, 632, 633, 672, 674, 678, 681, 683, 685, 686, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 701, 702, 703, 704, 705, 707, 709, 711, 713, 717, 721, 724, 730], "01": [5, 9, 10, 11, 32, 33, 34, 37, 41, 86, 212, 230, 231, 255, 273, 288, 294, 314, 324, 325, 419, 460, 482, 483, 488, 496, 499, 501, 502, 504, 507, 510, 538, 553, 582, 605, 606, 641, 687, 714], "02": [5, 11, 17, 18, 31, 34, 41, 86, 172, 173, 212, 294, 314, 324, 325, 460, 482, 483, 488, 496, 499, 501, 502, 505, 509, 510, 561, 602, 605, 606, 703], "03": [5, 8, 11, 31, 34, 41, 86, 185, 210, 460, 483, 488, 496, 499, 501, 502, 503, 504, 505, 530, 540, 561, 605], "04": [5, 11, 25, 29, 34, 57, 58, 86, 112, 192, 451, 482, 483, 488, 493, 496, 497, 499, 501, 502, 503, 530, 641, 704], "05": [5, 8, 9, 11, 17, 31, 32, 34, 40, 86, 212, 255, 261, 273, 288, 291, 300, 374, 375, 376, 430, 451, 472, 482, 483, 488, 496, 499, 501, 502, 504, 509, 543, 602, 636, 641, 655, 658, 703, 704], "464": [5, 8, 41, 86, 174, 175, 496, 499], "15888336": [5, 86, 496], "2154": [5, 86, 496], "43469003": [5, 86, 496], "10000": [5, 28, 86, 496], "meshgrid": [5, 28, 496], "spars": [5, 15, 28, 38, 87, 253, 288, 496, 505, 563], "index": [5, 9, 10, 16, 19, 20, 21, 26, 28, 32, 33, 39, 42, 43, 44, 80, 87, 156, 250, 256, 257, 259, 288, 294, 297, 302, 304, 306, 315, 321, 358, 367, 369, 385, 386, 395, 403, 405, 423, 425, 446, 447, 450, 494, 496, 498, 501, 506, 508, 511, 512, 513, 571, 575, 585, 586, 587, 590, 591, 592, 598, 600, 609, 610, 612, 614, 615, 616, 618, 620, 642, 668, 689, 690, 695, 698, 699, 700, 701, 703, 704, 711, 724], "xy": [5, 28, 87, 496], "dimension": [5, 8, 9, 14, 16, 19, 22, 23, 26, 28, 31, 32, 37, 39, 45, 46, 48, 69, 80, 82, 87, 94, 239, 258, 288, 294, 295, 297, 306, 320, 321, 325, 326, 336, 339, 349, 350, 351, 357, 358, 392, 403, 496, 499, 504, 506, 511, 514, 515, 532, 533, 539, 542, 545, 547, 548, 558, 559, 573, 609, 610, 612, 625, 626, 627, 628, 629, 630, 631, 632, 633, 698, 700, 704, 707, 709, 721, 724, 731], "repres": [5, 8, 9, 13, 14, 31, 32, 36, 37, 68, 87, 89, 111, 169, 170, 173, 176, 185, 187, 194, 220, 233, 237, 238, 253, 259, 271, 288, 291, 294, 295, 297, 300, 301, 304, 335, 343, 366, 374, 375, 376, 380, 386, 393, 495, 496, 497, 499, 503, 504, 526, 527, 547, 550, 551, 643, 655, 658, 686, 707, 711, 721, 722, 725], "grid": [5, 87, 253, 288, 496, 693, 704, 716], "coordin": [5, 8, 19, 31, 32, 42, 87, 94, 175, 237, 256, 257, 258, 271, 288, 302, 385, 496, 499, 511, 612], "numer": [5, 6, 8, 9, 10, 14, 18, 19, 22, 29, 31, 32, 33, 37, 41, 42, 44, 48, 49, 87, 99, 167, 170, 183, 187, 192, 193, 194, 201, 202, 203, 206, 215, 216, 220, 222, 223, 224, 225, 229, 230, 231, 235, 236, 240, 241, 301, 306, 381, 394, 451, 452, 460, 461, 472, 473, 496, 497, 499, 501, 504, 510, 511, 514, 532, 539, 542, 547, 550, 552, 554, 556, 558, 604, 605, 606, 608, 609, 610, 612, 613, 618, 625, 628, 630, 641, 642, 643, 644, 655, 691, 700, 702, 703, 704, 705, 706, 707, 709, 713, 721, 724, 730], "conserv": [5, 87, 496], "cartesian": [5, 87, 496], "matrix": [5, 9, 10, 13, 14, 32, 33, 36, 37, 48, 87, 92, 93, 94, 258, 288, 295, 306, 338, 340, 341, 344, 345, 394, 404, 410, 496, 501, 503, 504, 527, 531, 533, 535, 536, 537, 538, 540, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 556, 557, 560, 643, 655, 656, 681, 691, 698, 702, 722, 724], "ij": [5, 22, 87, 496, 514, 624], "zero": [5, 6, 8, 9, 11, 13, 14, 16, 19, 20, 22, 23, 28, 29, 31, 32, 34, 36, 37, 41, 42, 45, 46, 57, 59, 60, 61, 77, 78, 80, 82, 87, 89, 90, 91, 92, 93, 96, 99, 100, 168, 169, 170, 172, 173, 174, 175, 176, 179, 181, 184, 185, 186, 187, 192, 193, 194, 201, 202, 203, 204, 210, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 237, 238, 240, 241, 242, 246, 247, 249, 250, 264, 265, 266, 267, 275, 278, 280, 281, 282, 286, 288, 291, 294, 295, 297, 304, 306, 314, 315, 316, 317, 318, 320, 321, 324, 325, 326, 335, 336, 341, 345, 361, 365, 366, 386, 395, 396, 411, 415, 442, 482, 483, 488, 489, 490, 491, 493, 496, 497, 499, 501, 502, 503, 504, 506, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 523, 525, 526, 527, 530, 531, 533, 538, 540, 541, 542, 543, 544, 545, 546, 548, 550, 558, 559, 566, 567, 568, 569, 571, 572, 579, 602, 604, 605, 606, 609, 610, 611, 612, 614, 615, 616, 617, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 641, 655, 656, 659, 676, 686, 689, 691, 692, 693, 697, 699, 700, 703, 709, 712, 713, 723], "vector": [5, 9, 10, 13, 14, 32, 33, 36, 37, 87, 294, 295, 297, 301, 306, 315, 340, 366, 382, 394, 411, 415, 432, 481, 496, 501, 503, 504, 527, 529, 532, 536, 537, 539, 542, 547, 552, 553, 557, 558, 559, 560, 656, 716, 724], "respect": [5, 8, 9, 11, 14, 31, 32, 34, 37, 87, 167, 170, 175, 177, 179, 180, 181, 182, 187, 188, 194, 198, 199, 206, 207, 212, 214, 216, 217, 220, 223, 229, 233, 236, 237, 243, 271, 285, 286, 291, 293, 297, 300, 348, 374, 376, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 496, 499, 502, 503, 504, 507, 516, 523, 524, 532, 549, 552, 580, 581, 582, 638, 641, 655, 680, 681, 682, 683, 686, 689, 690, 691, 693, 697, 698, 700, 701, 702, 704, 705, 706, 720, 730], "effect": [5, 9, 11, 22, 32, 34, 45, 87, 294, 296, 328, 346, 482, 490, 496, 502, 503, 514, 529, 629, 631, 641, 644, 675, 681, 686, 689, 690, 694, 697, 701, 703, 707, 717], "rank": [5, 9, 14, 16, 23, 32, 37, 39, 46, 51, 87, 297, 306, 366, 403, 496, 504, 506, 511, 515, 532, 534, 543, 545, 549, 551, 556, 558, 559, 566, 567, 575, 578, 579, 612, 632, 633], "length": [5, 9, 15, 16, 26, 32, 38, 39, 49, 69, 82, 87, 251, 254, 255, 260, 266, 288, 291, 294, 297, 301, 304, 315, 320, 321, 324, 325, 326, 336, 366, 369, 382, 387, 481, 496, 501, 503, 504, 505, 506, 512, 529, 552, 553, 561, 571, 614, 641, 654, 656, 704, 712], "ni": [5, 87, 496], "xi": [5, 87, 496], "native_arrai": [5, 6, 8, 10, 28, 30, 31, 32, 33, 44, 55, 58, 84, 87, 89, 91, 96, 99, 100, 101, 102, 110, 115, 122, 144, 153, 161, 177, 181, 182, 186, 187, 188, 190, 194, 198, 199, 206, 207, 215, 220, 223, 226, 229, 234, 284, 297, 366, 368, 370, 404, 434, 435, 438, 467, 493, 496, 497, 498, 499, 501, 503, 504, 505, 506, 510, 511, 514, 515, 517, 518, 525, 530, 533, 538, 544, 545, 553, 554, 556, 559, 561, 563, 564, 571, 603, 612, 621, 627, 630, 632, 638, 647, 664, 703, 704], "one_hot": [5, 28, 496, 672, 714], "depth": [5, 9, 13, 28, 32, 36, 89, 294, 297, 328, 355, 415, 427, 496, 501, 503, 508, 521, 522, 595, 654, 657, 683, 690, 712, 713, 714, 716, 718], "scatter": [5, 10, 28, 33, 89, 446, 447, 496, 501, 688, 701, 707, 731], "defin": [5, 9, 10, 14, 28, 32, 33, 37, 61, 89, 92, 93, 94, 170, 187, 194, 220, 221, 229, 231, 234, 243, 251, 254, 255, 258, 259, 263, 286, 288, 291, 294, 297, 306, 328, 366, 368, 397, 430, 431, 450, 493, 496, 499, 501, 504, 514, 532, 537, 538, 551, 625, 626, 627, 629, 672, 681, 682, 686, 690, 691, 694, 697, 700, 702, 703, 704, 705, 711, 713, 717, 719, 721, 722, 723, 724, 725, 728, 730, 731], "hot": [5, 28, 89, 496, 672], "dimens": [5, 9, 10, 13, 14, 15, 16, 18, 19, 20, 22, 23, 26, 28, 32, 33, 36, 37, 38, 39, 41, 42, 43, 45, 46, 48, 49, 51, 58, 62, 89, 92, 93, 253, 259, 265, 266, 271, 278, 284, 288, 291, 292, 294, 295, 296, 297, 300, 301, 304, 306, 308, 309, 311, 312, 313, 315, 320, 321, 325, 329, 330, 331, 332, 335, 337, 338, 340, 346, 349, 350, 351, 358, 368, 374, 375, 376, 382, 384, 387, 397, 399, 400, 401, 403, 415, 416, 417, 419, 426, 459, 462, 481, 493, 496, 501, 503, 504, 505, 506, 507, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 558, 559, 562, 563, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 578, 580, 581, 582, 608, 609, 610, 612, 614, 615, 616, 617, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 641, 643, 656, 658, 693, 695, 700, 702, 703, 704, 707, 709, 712], "overrid": [5, 9, 28, 32, 89, 306, 394, 496, 686, 688], "ones_lik": [5, 28, 496, 687, 714], "tril": [5, 28, 496], "m": [5, 9, 14, 18, 31, 32, 37, 41, 48, 87, 92, 93, 94, 214, 258, 288, 294, 295, 297, 301, 315, 340, 351, 359, 360, 368, 380, 381, 382, 383, 384, 496, 504, 508, 510, 531, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 591, 604, 605, 606, 655, 672, 678, 682, 683, 684, 690, 709], "whose": [5, 8, 9, 10, 14, 16, 20, 22, 28, 31, 32, 33, 37, 39, 43, 45, 48, 84, 92, 93, 169, 173, 176, 184, 185, 186, 225, 226, 232, 233, 237, 238, 239, 270, 274, 275, 277, 281, 295, 297, 340, 365, 371, 409, 463, 496, 499, 501, 504, 506, 512, 514, 531, 533, 535, 536, 537, 538, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 559, 568, 572, 614, 615, 616, 623, 624, 643, 694, 704], "innermost": [5, 14, 37, 92, 93, 295, 340, 496, 504, 531, 533, 535, 536, 537, 538, 540, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 556], "two": [5, 9, 14, 20, 32, 33, 37, 48, 49, 67, 69, 80, 87, 92, 93, 94, 125, 133, 181, 195, 196, 230, 258, 261, 269, 270, 272, 273, 275, 277, 283, 288, 291, 294, 295, 297, 306, 321, 339, 340, 345, 350, 366, 368, 370, 394, 403, 407, 495, 496, 497, 499, 501, 504, 506, 512, 531, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 558, 576, 614, 615, 616, 617, 641, 643, 656, 676, 681, 682, 685, 686, 691, 693, 694, 698, 702, 703, 704, 707, 708, 712, 714, 721, 729], "mxn": [5, 14, 37, 92, 93, 496, 504, 535, 543, 545, 546, 548, 549, 553, 556], "matric": [5, 14, 32, 37, 48, 87, 92, 93, 295, 297, 340, 345, 357, 496, 503, 504, 527, 531, 533, 535, 536, 537, 538, 540, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 556, 557, 643, 698, 716, 724], "diagon": [5, 9, 14, 32, 37, 80, 92, 93, 94, 250, 258, 288, 295, 297, 339, 341, 357, 496, 504, 534, 556], "main": [5, 9, 14, 32, 37, 80, 92, 93, 94, 250, 258, 288, 295, 297, 339, 357, 496, 504, 534, 535, 556, 681, 682, 685, 688, 689, 699, 701, 722, 724, 725, 730], "lower": [5, 8, 9, 14, 18, 31, 32, 37, 41, 80, 92, 218, 250, 258, 288, 306, 397, 398, 403, 496, 499, 504, 510, 531, 537, 538, 545, 606, 643, 654, 655, 672, 683, 691, 693, 702, 704, 709, 717, 719, 720, 721, 722, 724, 725, 730, 731], "triangular": [5, 14, 37, 92, 93, 94, 258, 288, 496, 504, 531, 537, 538, 545, 549], "alloc": [5, 6, 29, 92, 93, 99, 496, 497, 681, 683, 717], "triu": [5, 28, 496], "upper": [5, 9, 14, 18, 32, 37, 41, 80, 93, 94, 250, 288, 306, 397, 496, 504, 510, 531, 537, 538, 549, 606, 654, 701, 704], "zeros_lik": [5, 28, 37, 99, 216, 482, 483, 486, 488, 490, 496, 497, 499, 502, 503, 506, 518, 520, 525, 548, 564, 702, 707], "data_typ": [6, 9, 29, 32, 129, 497, 688, 691, 704, 705], "_arraywithdatatyp": [6, 48], "astyp": [6, 13, 29, 36, 497, 503, 519, 521, 525, 672, 691, 701, 702, 707], "irrespect": [6, 14, 29, 37, 99, 497, 504, 552, 689, 701, 711, 731], "promot": [6, 8, 9, 14, 29, 31, 32, 37, 44, 48, 49, 99, 102, 125, 126, 127, 133, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 185, 187, 190, 192, 194, 208, 209, 210, 211, 212, 217, 220, 225, 229, 232, 233, 234, 235, 236, 237, 238, 241, 268, 276, 281, 291, 306, 394, 454, 475, 497, 499, 501, 504, 506, 514, 531, 532, 539, 540, 542, 543, 544, 545, 547, 548, 550, 551, 558, 559, 565, 575, 618, 626, 629, 641, 642, 685, 694, 695, 698, 706], "rule": [6, 8, 9, 14, 29, 31, 32, 37, 99, 102, 125, 126, 127, 176, 187, 220, 222, 229, 231, 239, 241, 297, 306, 356, 394, 497, 499, 504, 506, 531, 532, 539, 544, 547, 551, 565, 643, 685, 686, 689, 690, 691, 693, 696, 697, 698, 700, 704, 707, 725], "cast": [6, 8, 9, 14, 22, 29, 31, 37, 99, 102, 127, 221, 306, 395, 396, 497, 499, 504, 514, 559, 622, 623, 628, 630, 642, 698, 703, 709], "nan": [6, 8, 9, 10, 20, 22, 29, 31, 32, 33, 99, 167, 168, 169, 170, 172, 173, 174, 175, 176, 183, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 201, 202, 203, 208, 209, 210, 211, 212, 215, 220, 221, 223, 225, 226, 229, 230, 231, 232, 233, 234, 237, 238, 240, 243, 261, 269, 273, 278, 281, 286, 291, 306, 392, 393, 400, 401, 428, 480, 494, 497, 499, 501, 512, 514, 515, 614, 615, 616, 617, 625, 626, 627, 629, 630, 631, 632, 633, 641, 644, 685, 691, 694, 700, 705, 706], "infin": [6, 8, 10, 14, 29, 31, 37, 99, 167, 168, 169, 170, 173, 174, 175, 176, 183, 184, 185, 187, 188, 190, 192, 193, 194, 201, 202, 208, 209, 210, 211, 212, 215, 220, 221, 223, 225, 229, 230, 232, 233, 234, 237, 238, 240, 281, 291, 428, 494, 497, 499, 501, 504, 514, 515, 550, 559, 625, 627, 632, 633, 685, 694], "implement": [6, 7, 9, 20, 21, 29, 30, 32, 37, 44, 99, 113, 114, 127, 146, 147, 161, 167, 168, 169, 172, 173, 174, 175, 184, 185, 187, 190, 192, 194, 208, 209, 210, 211, 220, 222, 225, 229, 232, 233, 237, 238, 281, 291, 295, 306, 340, 400, 401, 420, 421, 497, 498, 499, 501, 503, 504, 512, 513, 514, 529, 536, 537, 538, 547, 556, 614, 615, 616, 617, 618, 621, 625, 626, 627, 628, 629, 630, 642, 644, 664, 672, 681, 683, 684, 685, 686, 687, 689, 691, 692, 694, 695, 697, 698, 699, 701, 703, 704, 705, 707, 709, 711, 712, 713, 714, 716, 717, 719, 721, 722, 723, 724, 727, 730, 731], "match": [6, 9, 26, 29, 32, 99, 194, 229, 264, 266, 291, 294, 297, 336, 367, 369, 442, 497, 499, 501, 504, 537, 538, 543, 559, 636, 681, 686, 688, 689, 693, 703, 725, 730], "newli": [6, 29, 99, 409, 497, 501, 683, 687, 690, 701, 704], "float64": [6, 9, 18, 22, 29, 31, 32, 33, 41, 45, 69, 83, 99, 102, 106, 107, 112, 113, 116, 117, 122, 123, 127, 129, 130, 136, 139, 221, 268, 291, 306, 394, 441, 496, 497, 501, 504, 510, 537, 538, 543, 559, 605, 606, 623, 638, 641, 642, 691, 703, 704], "broadcast_arrai": [6, 29, 497], "against": [6, 9, 10, 14, 19, 29, 31, 32, 33, 37, 42, 100, 219, 238, 261, 262, 265, 273, 291, 306, 400, 401, 403, 439, 497, 499, 501, 504, 511, 542, 543, 545, 548, 609, 674, 704, 709, 717, 724], "x2": [6, 8, 9, 10, 14, 19, 29, 31, 32, 33, 37, 42, 48, 49, 52, 91, 96, 100, 126, 133, 153, 170, 175, 177, 179, 180, 181, 182, 187, 188, 194, 195, 196, 197, 198, 199, 205, 206, 207, 212, 213, 214, 216, 217, 218, 219, 220, 223, 225, 229, 236, 241, 261, 264, 268, 269, 270, 272, 274, 279, 282, 291, 297, 306, 361, 394, 404, 496, 497, 498, 499, 501, 504, 511, 532, 539, 542, 547, 551, 554, 555, 558, 613, 638, 661, 685, 691, 693, 695, 697, 701, 702], "x3": [6, 10, 91, 96, 100, 404, 496, 497, 501], "mix": [6, 8, 29, 31, 33, 38, 41, 48, 49, 100, 113, 114, 127, 146, 147, 177, 180, 181, 182, 187, 188, 194, 198, 199, 206, 207, 217, 220, 223, 229, 306, 401, 418, 420, 421, 422, 423, 432, 465, 468, 497, 498, 499, 501, 503, 504, 505, 506, 509, 511, 514, 517, 519, 522, 525, 527, 530, 531, 554, 561, 563, 564, 602, 613, 624, 626, 629, 642, 644, 681, 684, 691, 693, 701, 707, 709, 719, 724, 728, 730], "broadcast_to": [6, 29, 497, 691], "can_cast": [6, 29, 497, 691, 698, 702], "occur": [6, 8, 20, 29, 31, 43, 102, 221, 237, 497, 499, 511, 512, 609, 610, 614, 615, 616, 617, 685, 690, 695, 706], "accord": [6, 10, 16, 22, 29, 39, 45, 102, 112, 170, 181, 187, 194, 220, 231, 294, 297, 336, 366, 422, 425, 446, 447, 497, 499, 501, 504, 506, 514, 558, 566, 579, 629, 631, 643, 661, 681, 682, 685, 691, 696, 698, 702, 704], "as_n": [6, 7, 26, 29, 30, 105, 106, 107, 108, 109, 110, 116, 143, 144, 156, 497, 498, 691], "int32": [6, 9, 10, 18, 19, 22, 29, 32, 33, 41, 42, 80, 91, 96, 99, 102, 104, 106, 108, 110, 113, 115, 116, 120, 122, 123, 127, 131, 135, 137, 155, 302, 306, 385, 395, 396, 397, 423, 432, 467, 496, 497, 498, 501, 510, 511, 514, 604, 605, 606, 610, 622, 623, 628, 630, 641, 642, 691, 702, 704, 709], "finfo": [6, 29, 497, 704], "inform": [6, 11, 29, 34, 112, 115, 405, 491, 497, 501, 502, 507, 582, 672, 680, 681, 682, 683, 685, 689, 690, 695, 699, 701, 703, 704, 727], "about": [6, 29, 112, 115, 497, 672, 676, 679, 680, 681, 682, 683, 684, 685, 688, 690, 691, 696, 697, 701, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 714, 717, 725, 726, 729], "8": [6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21, 22, 29, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 48, 49, 55, 68, 83, 84, 88, 91, 96, 105, 107, 108, 109, 112, 145, 162, 170, 172, 173, 177, 178, 181, 183, 185, 191, 194, 198, 199, 205, 206, 207, 212, 215, 216, 218, 219, 220, 225, 226, 229, 230, 231, 234, 235, 238, 239, 240, 246, 247, 248, 250, 261, 268, 271, 273, 274, 275, 278, 284, 286, 288, 291, 294, 295, 297, 300, 306, 311, 312, 313, 314, 319, 320, 324, 325, 329, 330, 332, 334, 335, 343, 347, 349, 350, 351, 354, 358, 362, 363, 367, 368, 369, 370, 372, 373, 378, 379, 382, 384, 396, 399, 400, 403, 408, 409, 411, 415, 416, 419, 422, 426, 430, 431, 432, 434, 435, 438, 441, 446, 447, 450, 460, 462, 463, 482, 485, 487, 490, 492, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 517, 521, 522, 525, 526, 527, 529, 533, 534, 535, 538, 542, 543, 544, 547, 550, 552, 553, 554, 556, 557, 559, 561, 562, 563, 564, 568, 575, 576, 578, 584, 591, 603, 604, 605, 606, 608, 613, 614, 616, 618, 619, 621, 623, 624, 626, 628, 630, 631, 641, 644, 656, 682, 689, 690, 693, 700, 704, 708, 712], "14": [6, 8, 9, 13, 18, 22, 29, 31, 32, 33, 36, 37, 39, 41, 99, 112, 115, 168, 173, 175, 182, 186, 212, 216, 220, 226, 233, 241, 267, 294, 295, 297, 306, 311, 312, 314, 324, 331, 334, 335, 338, 354, 358, 362, 372, 395, 460, 482, 497, 499, 501, 502, 503, 504, 506, 512, 514, 517, 518, 520, 522, 526, 530, 535, 547, 556, 578, 604, 605, 606, 614, 623, 624, 689, 693, 704], "resolut": [6, 29, 112, 497, 683], "1e": [6, 9, 11, 14, 15, 17, 29, 32, 34, 37, 38, 40, 112, 261, 273, 291, 300, 374, 375, 376, 451, 452, 460, 472, 473, 482, 483, 488, 490, 497, 501, 502, 504, 505, 509, 552, 561, 562, 563, 602, 636, 638, 658, 659, 672, 689, 698, 701, 703, 713, 714], "06": [6, 18, 31, 34, 55, 112, 169, 185, 294, 314, 324, 488, 493, 497, 502, 606, 636, 638, 704, 712], "min": [6, 9, 10, 14, 22, 29, 32, 33, 37, 45, 92, 94, 112, 115, 219, 258, 259, 288, 295, 341, 416, 446, 447, 460, 496, 497, 499, 501, 504, 514, 543, 549, 552, 553, 559, 672], "4028235e": [6, 112, 497], "38": [6, 9, 31, 32, 41, 112, 237, 279, 291, 294, 306, 312, 331, 334, 335, 395, 497, 499, 504, 544, 641, 693], "max": [6, 9, 10, 14, 22, 29, 32, 33, 37, 45, 112, 115, 218, 294, 295, 311, 312, 313, 329, 330, 331, 332, 334, 341, 410, 411, 416, 432, 446, 447, 497, 499, 501, 504, 514, 543, 545, 548, 641, 656, 659, 690, 702, 704], "iinfo": [6, 29, 497], "integ": [6, 8, 9, 13, 14, 16, 18, 22, 23, 26, 31, 32, 33, 36, 37, 39, 41, 45, 46, 48, 49, 69, 83, 115, 116, 122, 126, 127, 131, 167, 177, 178, 179, 180, 181, 182, 183, 193, 194, 205, 217, 222, 225, 229, 230, 240, 241, 259, 265, 267, 268, 288, 291, 294, 297, 301, 304, 306, 320, 325, 335, 354, 362, 366, 372, 380, 381, 382, 383, 384, 386, 387, 392, 394, 395, 396, 401, 403, 425, 441, 450, 481, 496, 497, 499, 501, 503, 504, 506, 510, 513, 514, 515, 516, 517, 518, 519, 521, 523, 525, 532, 534, 544, 558, 559, 573, 603, 604, 605, 606, 607, 608, 620, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 641, 642, 643, 644, 648, 656, 683, 689, 691, 700, 703, 704, 709, 711], "119": [6, 115], "122": [6, 115, 185, 499], "int8": [6, 18, 28, 29, 41, 82, 108, 113, 115, 116, 120, 496, 497, 604, 641, 642, 691, 704], "128": [6, 8, 13, 29, 31, 36, 49, 115, 191, 294, 314, 324, 415, 425, 497, 499, 501, 503, 504, 518, 520, 525, 547, 672], "127": [6, 9, 29, 32, 115, 281, 291, 497], "12": [6, 8, 9, 10, 13, 14, 18, 22, 29, 31, 32, 33, 36, 37, 39, 40, 41, 45, 48, 49, 115, 170, 172, 177, 181, 182, 185, 187, 188, 189, 207, 220, 223, 230, 233, 240, 241, 254, 255, 271, 274, 275, 288, 291, 294, 297, 306, 311, 312, 313, 314, 316, 320, 321, 329, 330, 331, 334, 335, 354, 358, 362, 372, 384, 395, 401, 411, 415, 416, 446, 447, 452, 460, 473, 499, 501, 503, 504, 506, 509, 510, 511, 512, 514, 517, 521, 526, 527, 535, 543, 547, 554, 556, 568, 572, 574, 576, 578, 602, 604, 605, 606, 613, 614, 622, 623, 624, 628, 630, 641, 682, 687, 689, 691, 693, 700, 705], "54": [6, 8, 13, 31, 32, 36, 41, 115, 184, 185, 190, 205, 234, 240, 251, 288, 294, 306, 314, 324, 395, 499, 503, 504, 514, 527, 530, 544, 547, 604, 605, 606, 624, 690, 693], "1220": [6, 115], "int16": [6, 9, 18, 22, 29, 41, 102, 106, 108, 113, 115, 122, 137, 306, 395, 396, 497, 514, 604, 622, 623, 628, 630, 641, 642, 691, 702, 704, 709], "32768": [6, 29, 115], "32767": [6, 29, 115], "is_bool_dtyp": [6, 29, 497], "is_float_dtyp": [6, 29, 497, 705], "see": [6, 8, 14, 19, 20, 22, 23, 31, 32, 37, 42, 45, 46, 48, 49, 69, 81, 85, 94, 101, 120, 127, 170, 175, 177, 179, 180, 181, 182, 187, 188, 192, 194, 198, 199, 206, 207, 210, 212, 214, 216, 217, 220, 223, 225, 229, 236, 241, 258, 288, 295, 338, 496, 497, 499, 504, 511, 512, 514, 515, 532, 545, 548, 551, 558, 559, 610, 614, 615, 616, 617, 625, 626, 627, 628, 629, 630, 631, 632, 633, 672, 674, 677, 681, 682, 683, 685, 686, 688, 689, 690, 691, 692, 693, 696, 697, 698, 702, 703, 704, 705, 707, 709, 711, 712, 716, 717, 720], "is_int_dtyp": [6, 29, 497, 703, 705], "is_uint_dtyp": [6, 29, 497, 703, 705], "result_typ": [6, 29, 497, 691], "arrays_and_dtyp": [6, 29, 127, 497], "involv": [6, 29, 127, 170, 187, 194, 220, 225, 497, 499, 675, 677, 684, 690, 691, 693, 703, 707, 714, 724, 730], "_arraywithdevic": [7, 48], "dev": [7, 26, 30, 90, 148, 155, 496, 498, 682, 692, 698, 711, 713], "handl": [7, 9, 26, 30, 32, 49, 140, 141, 142, 143, 144, 148, 153, 154, 162, 166, 172, 184, 209, 225, 231, 232, 237, 297, 367, 369, 498, 499, 504, 514, 556, 628, 630, 659, 684, 689, 690, 691, 692, 697, 698, 700, 701, 702, 703, 704, 706, 707, 713, 721, 731], "to_devic": [7, 30, 143, 498, 672], "move": [7, 9, 30, 32, 94, 157, 161, 165, 258, 288, 297, 365, 496, 498, 672, 683, 705], "__dlpack__": [7, 30, 81, 161, 496, 498], "mai": [7, 8, 9, 14, 20, 21, 30, 31, 37, 44, 48, 49, 69, 81, 161, 187, 188, 194, 199, 207, 215, 216, 220, 221, 223, 238, 294, 321, 414, 496, 498, 499, 501, 504, 512, 513, 514, 550, 559, 614, 615, 616, 617, 618, 621, 625, 626, 627, 629, 641, 676, 680, 681, 682, 683, 685, 689, 690, 691, 695, 698, 699, 700, 702, 703, 704, 707, 710, 711, 713, 731], "caveat": [7, 30, 161, 296, 346, 498], "portabl": [7, 30, 161, 498, 672, 722], "_arraywithelementwis": [8, 48], "ab": [8, 14, 24, 31, 47, 48, 49, 225, 261, 273, 291, 499, 504, 508, 543, 553, 559, 591, 594, 638, 686, 691, 699, 702, 704], "absolut": [8, 9, 14, 24, 26, 31, 32, 37, 48, 167, 231, 261, 273, 276, 291, 295, 341, 499, 504, 543, 544, 545, 550, 636, 638, 641, 643, 644, 677, 682], "aco": [8, 31, 499], "real": [8, 9, 22, 31, 32, 45, 90, 91, 167, 168, 169, 170, 172, 173, 174, 175, 176, 185, 187, 188, 190, 192, 194, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 217, 220, 222, 223, 225, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 276, 294, 295, 315, 336, 340, 341, 496, 499, 504, 511, 514, 536, 537, 538, 543, 550, 552, 553, 556, 559, 612, 625, 627, 628, 629, 630, 689, 726], "invers": [8, 9, 14, 31, 32, 37, 168, 169, 172, 173, 174, 175, 176, 294, 304, 315, 324, 326, 386, 499, 504, 540, 544, 548, 661, 691, 716], "cosin": [8, 31, 168, 169, 184, 185, 252, 288, 294, 314, 324, 499, 656], "57": [8, 9, 31, 32, 145, 168, 169, 172, 173, 175, 185, 186, 226, 242, 286, 498, 499], "69": [8, 34, 41, 168, 210, 294, 314, 324, 486, 499, 502, 504, 543, 544, 605, 704, 712], "acosh": [8, 31, 113, 114, 497, 499], "area": [8, 9, 31, 32, 36, 169, 173, 176, 294, 328, 335, 499, 675, 701, 707, 715, 720], "hyperbol": [8, 31, 169, 173, 176, 185, 233, 237, 238, 499], "sector": [8, 31, 169, 173, 176, 499, 675], "32": [8, 9, 18, 31, 32, 37, 41, 48, 49, 57, 111, 169, 181, 182, 191, 205, 227, 230, 231, 263, 291, 294, 306, 312, 313, 314, 324, 334, 335, 395, 415, 431, 493, 497, 499, 501, 503, 504, 510, 511, 514, 518, 520, 521, 522, 525, 527, 542, 547, 604, 605, 606, 613, 624, 641, 644, 672, 690, 700, 712, 729], "99": [8, 11, 29, 31, 41, 83, 169, 184, 242, 286, 460, 486, 496, 499, 501, 502, 514, 605, 624], "second": [8, 9, 11, 14, 16, 20, 31, 32, 33, 34, 37, 39, 43, 48, 49, 67, 94, 125, 133, 170, 175, 177, 179, 180, 181, 182, 188, 194, 195, 196, 197, 198, 199, 205, 206, 207, 212, 213, 214, 216, 217, 220, 223, 225, 236, 258, 261, 269, 271, 272, 273, 279, 282, 283, 288, 291, 295, 297, 304, 306, 340, 341, 343, 368, 371, 381, 383, 387, 394, 397, 407, 455, 476, 482, 483, 488, 495, 496, 497, 499, 501, 502, 504, 506, 507, 508, 512, 532, 535, 536, 537, 539, 542, 547, 549, 550, 552, 554, 558, 575, 576, 581, 584, 614, 615, 616, 659, 676, 682, 685, 688, 691, 693, 696, 701, 702, 704, 706, 711, 729], "compat": [8, 14, 16, 19, 22, 23, 31, 37, 39, 42, 45, 46, 48, 49, 101, 170, 175, 177, 179, 180, 181, 182, 187, 188, 194, 198, 199, 206, 207, 212, 214, 216, 217, 220, 223, 225, 229, 236, 241, 497, 499, 504, 506, 511, 514, 515, 532, 545, 548, 551, 554, 558, 559, 571, 610, 625, 626, 627, 628, 629, 630, 631, 632, 633, 672, 675, 687, 697, 702, 703, 705, 709, 717], "multipli": [8, 9, 13, 22, 31, 32, 36, 170, 236, 274, 294, 295, 328, 345, 395, 396, 499, 503, 514, 526, 622, 628, 683, 686, 687, 689, 693], "determin": [8, 9, 14, 16, 20, 23, 26, 31, 32, 33, 37, 44, 46, 48, 49, 80, 102, 104, 111, 117, 118, 119, 120, 122, 123, 124, 139, 149, 151, 152, 163, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 185, 187, 190, 192, 194, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 217, 220, 225, 229, 232, 233, 234, 235, 236, 237, 238, 241, 276, 281, 291, 294, 295, 306, 328, 341, 394, 404, 407, 428, 429, 433, 434, 435, 436, 437, 438, 463, 480, 496, 497, 498, 499, 501, 504, 506, 507, 512, 515, 531, 532, 533, 535, 539, 540, 542, 544, 545, 547, 548, 550, 551, 556, 558, 559, 565, 580, 581, 582, 614, 615, 616, 617, 618, 632, 633, 643, 648, 655, 658, 674, 689, 691, 692, 694, 698, 702, 704, 706, 707], "15": [8, 9, 10, 14, 18, 22, 28, 29, 31, 32, 33, 36, 37, 39, 41, 45, 49, 84, 112, 170, 177, 181, 187, 198, 205, 206, 212, 220, 229, 230, 231, 271, 284, 291, 292, 294, 297, 306, 311, 312, 314, 324, 331, 334, 335, 354, 358, 362, 372, 395, 411, 415, 416, 419, 430, 431, 455, 460, 476, 496, 497, 499, 501, 503, 504, 506, 508, 510, 511, 512, 514, 517, 527, 535, 538, 540, 547, 553, 554, 572, 578, 583, 604, 605, 612, 614, 622, 623, 624, 638, 682, 690, 693, 700, 727], "angl": [8, 31, 175, 185, 233, 238, 272, 291, 499, 716], "deg": [8, 31, 171, 499], "radian": [8, 9, 31, 32, 168, 171, 172, 174, 175, 184, 186, 226, 232, 237, 281, 291, 499, 694], "degre": [8, 9, 22, 31, 32, 45, 171, 186, 226, 297, 368, 499, 514, 629, 631, 723], "1j": [8, 31, 32, 171, 172, 184, 185, 190, 192, 204, 227, 232, 233, 237, 263, 460, 499, 501], "2j": [8, 9, 31, 32, 171, 200, 227, 263, 294, 320, 325, 499], "3j": [8, 9, 31, 32, 171, 204, 227, 263, 291, 499], "35619449": [8, 171, 499], "78539816": [8, 171, 499], "135": [8, 171, 410, 499, 501], "45": [8, 9, 22, 31, 32, 34, 36, 41, 49, 171, 175, 187, 230, 231, 279, 291, 294, 306, 313, 314, 324, 331, 335, 395, 401, 482, 488, 499, 502, 504, 506, 514, 547, 573, 605, 606, 624, 641], "asin": [8, 31, 499], "sine": [8, 31, 172, 173, 232, 233, 499], "927": [8, 31, 172], "asinh": [8, 31, 172, 499], "atan": [8, 31, 499], "tangent": [8, 31, 174, 175, 176, 237, 238, 499, 694], "785": [8, 31, 174, 175, 499], "atan2": [8, 31, 499], "quotient": [8, 31, 175, 187, 194, 499], "245": [8, 36, 175, 503, 526, 527], "68": [8, 41, 58, 83, 175, 294, 314, 324, 493, 496, 499, 509, 602, 605, 606], "588": [8, 175, 499], "inf": [8, 9, 10, 14, 31, 32, 33, 37, 175, 192, 201, 202, 203, 204, 208, 209, 221, 243, 276, 286, 291, 295, 306, 338, 397, 428, 480, 494, 499, 501, 504, 543, 559, 641, 644, 691, 700], "36": [8, 9, 13, 22, 32, 33, 37, 175, 230, 231, 271, 291, 294, 306, 314, 324, 395, 415, 416, 499, 501, 504, 508, 514, 527, 544, 547, 553, 557, 594, 624], "75": [8, 9, 31, 32, 33, 36, 41, 85, 173, 175, 187, 200, 252, 270, 271, 288, 291, 294, 300, 314, 335, 379, 403, 417, 430, 460, 496, 499, 501, 504, 508, 510, 517, 540, 547, 591, 606], "52": [8, 31, 33, 34, 41, 175, 185, 187, 306, 395, 415, 416, 431, 482, 499, 501, 502, 503, 504, 514, 527, 547, 606, 624], "719": [8, 175, 499], "197": [8, 175, 499], "atanh": [8, 31, 499], "549": [8, 31, 36, 176, 499, 503, 527], "47": [8, 9, 18, 31, 32, 33, 34, 41, 176, 234, 294, 306, 312, 313, 330, 331, 395, 415, 416, 486, 499, 501, 502, 503, 510, 527, 605, 606], "bitwise_and": [8, 31, 499], "11": [8, 9, 10, 13, 14, 18, 22, 31, 32, 33, 36, 37, 39, 41, 45, 49, 170, 174, 177, 192, 229, 230, 236, 275, 291, 294, 295, 297, 311, 312, 324, 329, 330, 332, 334, 335, 342, 354, 358, 362, 364, 372, 395, 396, 409, 415, 416, 422, 431, 447, 499, 501, 503, 504, 505, 506, 508, 510, 511, 512, 514, 517, 518, 526, 527, 535, 538, 540, 542, 543, 547, 552, 553, 561, 563, 568, 573, 574, 576, 578, 589, 591, 601, 604, 605, 606, 613, 614, 622, 623, 624, 631, 689, 690, 691, 693, 700], "bitwise_invert": [8, 31, 499], "bitiwse_invert": [8, 178], "bitwise_left_shift": [8, 31, 499], "bitwise_or": [8, 31, 499], "bitwise_right_shift": [8, 31, 48, 499], "64": [8, 9, 13, 31, 32, 33, 36, 37, 41, 45, 49, 111, 181, 191, 225, 234, 235, 268, 291, 294, 314, 324, 415, 416, 488, 497, 499, 501, 502, 503, 504, 514, 518, 520, 522, 525, 544, 547, 553, 557, 605, 624, 628, 672, 682, 712, 713, 729], "16": [8, 9, 10, 13, 14, 18, 22, 29, 31, 32, 33, 36, 37, 39, 41, 48, 49, 115, 181, 210, 230, 237, 268, 271, 275, 284, 291, 294, 297, 306, 311, 312, 314, 320, 324, 325, 329, 330, 332, 335, 358, 395, 401, 416, 419, 441, 460, 492, 497, 499, 501, 502, 503, 504, 506, 508, 510, 511, 514, 525, 527, 531, 535, 538, 547, 553, 578, 591, 604, 605, 606, 613, 623, 624, 641, 644, 672, 683, 693, 712], "bitwise_xor": [8, 31, 48, 499], "89": [8, 18, 29, 31, 32, 41, 49, 115, 182, 294, 314, 497, 499, 504, 514, 554, 605, 606, 630], "51": [8, 9, 31, 32, 33, 41, 182, 220, 233, 294, 314, 499, 606, 641], "18": [8, 9, 18, 31, 32, 36, 37, 41, 45, 58, 182, 187, 229, 233, 242, 271, 291, 294, 297, 314, 320, 324, 325, 329, 332, 335, 358, 493, 499, 504, 510, 514, 521, 535, 542, 547, 604, 605, 606, 623, 624, 628, 689, 693], "19": [8, 9, 18, 31, 32, 36, 37, 41, 173, 182, 210, 220, 237, 294, 297, 306, 313, 314, 325, 329, 332, 335, 358, 395, 499, 504, 508, 510, 513, 535, 543, 556, 594, 604, 605, 606, 621, 693], "26": [8, 9, 17, 18, 32, 33, 34, 41, 182, 187, 233, 294, 295, 314, 345, 430, 482, 499, 501, 502, 503, 504, 508, 509, 514, 525, 535, 547, 554, 584, 602, 604, 605, 624], "27": [8, 9, 14, 18, 31, 32, 36, 37, 41, 45, 181, 182, 185, 225, 233, 234, 268, 291, 294, 314, 324, 431, 499, 501, 503, 504, 508, 514, 530, 542, 547, 557, 584, 591, 605, 624, 628, 641], "23": [8, 9, 13, 18, 28, 31, 32, 33, 36, 41, 84, 182, 185, 202, 203, 204, 227, 229, 230, 231, 233, 240, 263, 264, 291, 294, 306, 311, 312, 313, 314, 324, 329, 330, 331, 332, 335, 395, 401, 496, 499, 503, 504, 508, 511, 522, 530, 535, 543, 553, 584, 591, 604, 605, 606, 613, 672, 690, 704, 709], "20": [8, 9, 13, 18, 22, 31, 32, 33, 36, 37, 41, 45, 182, 186, 190, 226, 230, 234, 271, 273, 275, 291, 294, 311, 313, 329, 331, 332, 335, 415, 422, 423, 425, 447, 450, 460, 499, 501, 504, 510, 511, 514, 517, 518, 528, 535, 540, 543, 547, 554, 604, 612, 613, 622, 623, 624, 628, 630, 672, 690, 707, 711], "74": [8, 41, 182, 212, 294, 314, 499, 504, 544], "41": [8, 9, 31, 32, 33, 36, 37, 58, 174, 182, 220, 234, 294, 302, 306, 312, 330, 335, 385, 395, 410, 411, 493, 499, 501, 504, 514, 531, 630], "59": [8, 182, 306, 395], "24": [8, 9, 14, 22, 31, 32, 33, 36, 37, 41, 48, 182, 190, 205, 207, 220, 230, 231, 234, 271, 274, 284, 291, 294, 306, 311, 314, 324, 329, 332, 335, 395, 415, 416, 499, 501, 504, 508, 514, 517, 535, 543, 547, 584, 604, 605, 606, 622, 624, 638, 695, 712], "ceil": [8, 9, 31, 32, 69, 294, 311, 312, 313, 334, 496, 499, 656, 701], "round": [8, 9, 31, 32, 170, 183, 187, 193, 194, 220, 234, 240, 241, 267, 291, 499, 674, 675, 676, 678, 681, 682, 683, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 710, 711, 712, 713, 714, 716, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731], "co": [8, 10, 31, 185, 190, 192, 233, 419, 499, 501, 675, 680, 691, 709, 716], "express": [8, 9, 31, 32, 168, 172, 174, 175, 184, 186, 226, 232, 237, 281, 291, 499, 661, 694, 702, 709, 714, 724, 725], "416": [8, 184, 499], "540": [8, 184], "990": [8, 184], "cosh": [8, 31, 184, 499], "76": [8, 22, 29, 31, 32, 41, 115, 169, 185, 233, 324, 497, 499, 504, 508, 514, 554, 591, 605, 624], "81": [8, 29, 31, 37, 41, 115, 185, 210, 235, 306, 395, 497, 499, 504, 508, 510, 514, 544, 557, 591, 606, 624, 704], "deg2rad": [8, 31, 499], "convers": [8, 9, 32, 186, 226, 448, 457, 501, 676, 681, 687, 708, 710, 714, 716, 717, 719, 723, 730], "90": [8, 9, 31, 32, 182, 186, 226, 230, 297, 306, 368, 395, 499, 504, 514, 547, 624, 675], "180": [8, 31, 186, 226, 499], "270": [8, 31, 186, 226, 499], "360": [8, 31, 186, 226, 499, 690], "71": [8, 31, 36, 186, 226, 335, 499], "28": [8, 13, 17, 31, 32, 33, 36, 37, 41, 45, 186, 210, 226, 294, 314, 324, 401, 430, 482, 499, 501, 502, 503, 504, 509, 514, 518, 520, 522, 525, 527, 547, 602, 604, 605, 606, 624, 628, 672], "divid": [8, 9, 10, 16, 26, 31, 32, 39, 48, 49, 194, 300, 374, 375, 376, 460, 499, 501, 506, 573, 686, 689, 693, 696, 704], "dividend": [8, 31, 187, 194, 229, 241, 499], "divisor": [8, 9, 11, 22, 31, 32, 34, 45, 187, 194, 197, 198, 229, 241, 294, 297, 311, 312, 313, 354, 362, 372, 482, 483, 488, 499, 502, 514, 629, 631, 656, 659], "375": [8, 188, 223, 306, 397], "erf": [8, 31, 499], "exponenti": [8, 9, 31, 32, 189, 190, 192, 212, 225, 247, 286, 295, 344, 499], "gauss": [8, 31, 189, 499], "error": [8, 9, 26, 31, 32, 55, 189, 237, 306, 401, 493, 499, 504, 514, 550, 553, 625, 627, 643, 657, 659, 669, 676, 680, 682, 683, 685, 686, 687, 690, 691, 692, 693, 696, 697, 702, 704, 705, 706, 711, 717, 724], "328": [8, 189, 237, 499], "677": [8, 189, 499], "842": [8, 189, 237, 499], "exp": [8, 9, 31, 32, 61, 192, 212, 225, 244, 286, 294, 320, 325, 493, 499, 504, 550, 700, 702], "evalu": [8, 9, 26, 31, 32, 190, 192, 208, 209, 210, 211, 215, 222, 224, 231, 235, 276, 295, 297, 345, 364, 492, 499, 502, 508, 515, 593, 594, 632, 633, 683, 689, 691, 698, 699, 724], "71828198": [8, 31, 190], "38905573": [8, 31, 190], "08553696": [8, 31, 190, 499], "exp2": [8, 31, 499], "power": [8, 9, 10, 14, 31, 32, 33, 37, 48, 49, 181, 190, 191, 225, 260, 268, 288, 291, 451, 461, 472, 499, 501, 504, 508, 544, 557, 589, 655, 706, 711, 712, 713, 724, 726, 730], "expm1": [8, 31, 499, 691], "244": [8, 192, 294, 314, 672], "918": [8, 192], "48": [8, 9, 31, 32, 33, 34, 41, 57, 169, 192, 234, 294, 312, 313, 314, 324, 330, 331, 334, 430, 482, 486, 493, 499, 501, 502, 504, 508, 514, 547, 584, 605, 624], "_": [8, 26, 31, 34, 102, 190, 192, 200, 201, 216, 306, 394, 415, 482, 483, 497, 499, 501, 502, 504, 506, 508, 514, 550, 553, 579, 590, 629, 678, 689, 694, 699, 701, 704, 712], "147": [8, 192, 499], "floor": [8, 9, 31, 32, 181, 194, 294, 311, 312, 313, 315, 334, 499, 656, 701], "floor_divid": [8, 31, 499, 648], "fmin": [8, 31, 499], "minimum": [8, 9, 10, 16, 19, 22, 31, 32, 33, 39, 42, 45, 167, 195, 222, 259, 268, 288, 291, 297, 306, 366, 392, 396, 451, 452, 460, 461, 472, 473, 499, 501, 506, 511, 514, 564, 610, 625, 627, 641, 643, 644, 648, 706, 721, 727, 731], "gcd": [8, 31, 499], "greater": [8, 9, 16, 18, 31, 32, 41, 48, 49, 82, 168, 169, 172, 173, 175, 176, 179, 181, 187, 193, 194, 208, 210, 225, 229, 231, 233, 234, 238, 239, 240, 262, 291, 294, 315, 320, 325, 496, 499, 504, 506, 510, 532, 544, 574, 606, 643, 683, 703], "greater_equ": [8, 31, 48, 49, 212, 499], "imaginari": [8, 31, 90, 91, 168, 169, 170, 185, 187, 188, 190, 192, 200, 220, 222, 223, 230, 233, 234, 238, 263, 291, 295, 341, 496, 499, 511, 612, 693], "4j": [8, 31, 200, 499], "6j": [8, 9, 31, 200, 204, 227, 263, 499], "isfinit": [8, 31, 499, 702], "out_i": [8, 31, 201, 202, 203, 204, 227, 499], "self_i": [8, 31, 201, 202, 203, 204, 227], "finit": [8, 31, 167, 168, 169, 170, 173, 175, 176, 185, 187, 188, 190, 192, 194, 201, 202, 208, 210, 220, 221, 223, 225, 229, 233, 234, 238, 499], "isinf": [8, 31, 499], "detect_posit": [8, 31, 202, 499], "detect_neg": [8, 31, 202, 499], "detect": [8, 26, 31, 202, 499, 508, 583, 594, 681, 682, 687, 689, 690, 696, 704, 712, 713], "isnan": [8, 31, 499], "isreal": [8, 31, 499], "5j": [8, 31, 32, 204, 227, 263, 291, 499], "lcm": [8, 31, 499, 691], "common": [8, 9, 26, 31, 126, 197, 205, 264, 268, 291, 497, 499, 674, 681, 682, 688, 689, 691, 692, 693, 698, 699, 702, 705, 707, 717, 721, 724, 731], "21": [8, 9, 10, 18, 28, 31, 32, 36, 37, 41, 45, 48, 86, 115, 170, 173, 175, 181, 182, 205, 220, 278, 294, 295, 306, 311, 313, 314, 324, 329, 331, 332, 335, 336, 338, 395, 447, 496, 497, 499, 504, 505, 508, 514, 535, 547, 563, 589, 604, 605, 622, 623, 624, 695, 700], "60": [8, 22, 31, 33, 41, 45, 171, 205, 423, 431, 447, 460, 481, 499, 501, 504, 508, 514, 547, 586, 604, 622, 624, 628, 690], "less": [8, 9, 14, 18, 22, 31, 32, 37, 41, 48, 49, 168, 169, 172, 175, 176, 183, 187, 194, 208, 209, 210, 211, 225, 229, 231, 234, 280, 291, 294, 306, 314, 315, 324, 394, 397, 499, 504, 510, 514, 543, 544, 545, 548, 559, 606, 629, 631, 656, 675, 682, 683, 689, 691, 693, 695, 697, 702, 704, 707, 708, 709, 724, 726], "less_equ": [8, 31, 48, 49, 499, 695], "61": [8, 9, 31, 32, 34, 38, 41, 173, 208, 210, 235, 294, 314, 482, 499, 502, 503, 505, 525, 561, 563, 606], "log10": [8, 31, 499], "logarithm": [8, 31, 190, 208, 209, 210, 211, 212, 276, 291, 499, 504, 550], "602": [8, 209, 499], "699": [8, 209, 499], "log1p": [8, 31, 499, 700], "693": [8, 31, 62, 173, 210, 493, 499, 505, 563], "001": [8, 9, 17, 29, 32, 34, 112, 210, 227, 263, 273, 291, 483, 497, 499, 502, 509, 602, 641, 712, 713], "0953": [8, 31, 208, 210, 499], "log2": [8, 31, 213, 499], "logaddexp": [8, 31, 499], "logaddexp2": [8, 31, 499], "169925": [8, 31, 213, 499], "logical_and": [8, 31, 499, 702, 707, 731], "logical_not": [8, 31, 499, 691], "logical_or": [8, 31, 499, 731], "conform": [8, 14, 31, 69, 70, 71, 78, 79, 80, 81, 83, 84, 85, 87, 90, 91, 92, 93, 95, 96, 102, 112, 115, 127, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 190, 192, 193, 194, 198, 199, 200, 201, 202, 203, 207, 209, 210, 211, 212, 214, 215, 216, 217, 220, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 263, 291, 306, 394, 496, 497, 499, 504, 506, 511, 512, 513, 514, 515, 531, 532, 533, 534, 535, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 565, 567, 568, 569, 571, 572, 574, 575, 579, 609, 610, 612, 613, 614, 615, 616, 617, 618, 621, 625, 626, 627, 628, 629, 630, 631, 632, 633, 694, 696], "api": [8, 14, 31, 69, 70, 71, 78, 79, 80, 81, 83, 84, 85, 87, 90, 91, 92, 93, 95, 96, 102, 112, 115, 125, 127, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 190, 192, 193, 194, 198, 199, 200, 201, 202, 203, 207, 209, 210, 211, 212, 214, 215, 216, 217, 220, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 263, 291, 306, 394, 496, 497, 499, 504, 506, 511, 512, 513, 514, 515, 531, 532, 533, 534, 535, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 565, 567, 568, 569, 571, 572, 574, 575, 579, 609, 610, 612, 613, 614, 615, 616, 617, 618, 621, 625, 626, 627, 628, 629, 630, 631, 632, 633, 672, 673, 674, 682, 684, 686, 688, 691, 692, 693, 694, 695, 697, 698, 699, 701, 702, 703, 704, 707, 708, 710, 712, 717, 718, 719, 720, 722, 724, 726, 729, 731], "extens": [8, 14, 31, 69, 70, 71, 78, 79, 80, 81, 83, 84, 85, 87, 90, 91, 92, 93, 95, 96, 102, 112, 115, 127, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 190, 192, 193, 194, 198, 199, 200, 201, 202, 203, 207, 209, 210, 211, 212, 214, 215, 216, 217, 220, 222, 223, 224, 225, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 263, 291, 306, 394, 496, 497, 499, 504, 506, 511, 512, 513, 514, 515, 531, 532, 533, 534, 535, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 565, 567, 568, 569, 571, 572, 574, 575, 579, 609, 610, 612, 613, 614, 615, 616, 617, 618, 621, 625, 626, 627, 628, 629, 630, 631, 632, 633, 672, 678, 680, 682, 683, 694, 696, 704, 721, 724, 731], "api_specif": [8, 31, 102, 190, 200, 201, 216, 497, 499, 506, 514, 579, 629, 694], "array_api": [8, 31, 102, 190, 200, 201, 216, 497, 499, 504, 506, 514, 550, 579, 629, 694], "html": [8, 31, 94, 102, 190, 200, 201, 216, 258, 288, 306, 394, 496, 497, 499, 504, 506, 514, 550, 579, 629, 675, 694], "logical_xor": [8, 31, 499], "maximum": [8, 9, 10, 11, 16, 19, 22, 26, 31, 32, 33, 34, 39, 42, 45, 49, 160, 269, 291, 294, 297, 306, 319, 366, 395, 397, 410, 411, 419, 488, 498, 499, 501, 502, 504, 506, 508, 511, 514, 543, 564, 595, 609, 625, 627, 641, 643, 644, 648, 683, 693, 701, 712, 731], "use_wher": [8, 31, 218, 219, 499], "formula": [8, 9, 31, 187, 209, 211, 218, 219, 220, 275, 291, 300, 374, 376, 499], "clip": [8, 9, 16, 31, 32, 33, 39, 218, 219, 297, 367, 369, 410, 411, 499, 501, 506, 689, 698, 700, 701, 712, 714], "than": [8, 9, 10, 14, 16, 18, 19, 20, 22, 26, 31, 32, 33, 37, 39, 41, 42, 43, 45, 48, 49, 69, 82, 112, 160, 168, 169, 172, 173, 175, 176, 179, 181, 183, 187, 193, 194, 208, 209, 210, 211, 218, 220, 225, 229, 231, 233, 234, 238, 239, 240, 245, 261, 262, 273, 280, 291, 294, 295, 297, 306, 314, 315, 320, 321, 324, 325, 326, 336, 337, 338, 359, 360, 395, 396, 397, 434, 435, 438, 454, 475, 496, 497, 498, 499, 501, 504, 506, 510, 511, 512, 514, 532, 542, 543, 544, 545, 548, 559, 564, 568, 574, 606, 612, 615, 616, 617, 622, 623, 628, 629, 630, 631, 656, 675, 678, 683, 685, 689, 690, 691, 693, 695, 701, 702, 703, 704, 705, 706, 707, 709, 712, 713, 714, 717, 718, 721, 722, 723, 724, 730, 731], "exce": [8, 9, 32, 219, 297, 370, 499], "product": [8, 9, 13, 14, 22, 31, 32, 36, 37, 45, 220, 295, 306, 343, 345, 395, 396, 499, 503, 504, 514, 529, 530, 532, 539, 542, 547, 554, 558, 622, 623, 624, 628, 629, 681, 709, 724, 726], "30": [8, 9, 32, 33, 41, 45, 49, 220, 271, 279, 291, 294, 314, 324, 335, 385, 415, 417, 422, 423, 430, 431, 447, 455, 460, 499, 501, 504, 508, 514, 540, 547, 592, 604, 605, 623, 624, 628, 643, 655, 690], "56": [8, 9, 13, 18, 31, 32, 36, 86, 220, 234, 237, 240, 294, 314, 324, 482, 496, 499, 502, 503, 504, 508, 514, 518, 520, 522, 527, 547, 553, 583, 605, 624, 693], "nan_to_num": [8, 31, 499], "posinf": [8, 31, 221, 499], "neginf": [8, 31, 221, 499], "veri": [8, 31, 221, 261, 273, 291, 499, 504, 550, 643, 674, 675, 680, 681, 682, 683, 688, 689, 691, 692, 693, 695, 697, 698, 701, 702, 703, 704, 705, 707, 710, 712, 713, 714, 717, 720, 721, 722, 724, 725, 726, 729, 730, 731], "5e": [8, 11, 31, 32, 221, 279, 488, 499, 502], "not_equ": [8, 31, 48, 49, 499], "pow": [8, 31, 48, 49, 499, 685], "expon": [8, 9, 10, 32, 33, 225, 268, 270, 274, 291, 461, 499, 501, 504, 544], "25": [8, 10, 14, 15, 18, 22, 25, 31, 32, 33, 36, 37, 40, 41, 45, 48, 49, 63, 85, 170, 171, 181, 187, 189, 200, 205, 220, 225, 228, 230, 233, 234, 235, 240, 252, 288, 296, 306, 335, 346, 395, 397, 403, 430, 431, 447, 460, 496, 499, 501, 504, 505, 508, 509, 514, 517, 531, 535, 540, 557, 559, 562, 584, 602, 604, 605, 606, 623, 624, 626, 631, 689, 700], "rad2deg": [8, 31, 499], "286": [8, 32, 226], "458": [8, 226], "573": [8, 226, 499], "hand": [8, 227, 672, 685, 691, 698, 704, 717], "reciproc": [8, 31, 499], "333": [8, 31, 187, 228, 411, 499, 501, 503, 525], "remaind": [8, 9, 16, 26, 31, 32, 39, 196, 499, 506, 573, 685, 701], "modulu": [8, 31, 229, 499, 701], "sign": [8, 9, 14, 20, 22, 31, 32, 37, 69, 167, 168, 169, 170, 173, 175, 176, 181, 185, 187, 190, 192, 194, 220, 222, 229, 233, 234, 238, 264, 291, 306, 395, 396, 496, 499, 504, 512, 514, 550, 614, 615, 616, 617, 622, 623, 628, 630, 675, 682, 709, 714], "x2_i": [8, 31, 170, 175, 177, 179, 180, 181, 182, 187, 188, 194, 198, 199, 206, 207, 212, 214, 216, 217, 220, 223, 225, 229, 236, 499, 685], "decim": [8, 31, 230, 499, 706], "94": [8, 11, 18, 31, 32, 34, 41, 154, 230, 231, 294, 314, 324, 486, 498, 502, 606], "256": [8, 230, 231, 503, 518, 520, 522, 641], "0001": [8, 230, 231, 641, 644, 659], "67": [8, 10, 31, 33, 36, 41, 48, 182, 185, 190, 230, 231, 233, 240, 306, 335, 395, 415, 416, 460, 485, 487, 492, 499, 501, 502, 606], "678": [8, 230, 231], "33": [8, 18, 22, 31, 33, 34, 36, 173, 174, 181, 230, 294, 306, 312, 334, 335, 395, 411, 460, 486, 499, 501, 502, 503, 504, 508, 514, 526, 527, 547, 601, 604, 624, 631, 641, 644], "np_variant": [8, 31, 231, 499], "sin": [8, 10, 31, 185, 190, 192, 233, 419, 499, 501, 686, 709], "841": [8, 25, 31, 55, 232, 493, 499], "909": [8, 31, 33, 232, 499], "141": [8, 31, 99, 232, 497, 499], "sinh": [8, 31, 232, 499], "63": [8, 25, 31, 36, 37, 63, 226, 233, 234, 294, 306, 314, 324, 335, 395, 499, 504, 508, 514, 531, 547, 584, 624], "232": [8, 31, 233, 499], "sqrt": [8, 9, 31, 32, 294, 315, 320, 321, 325, 326, 499, 655, 672], "squar": [8, 9, 14, 31, 32, 37, 234, 295, 306, 340, 344, 394, 484, 485, 487, 492, 499, 502, 504, 508, 531, 533, 534, 536, 537, 538, 540, 544, 550, 551, 552, 557, 589, 672], "root": [8, 31, 234, 499, 654, 679, 682, 683, 688, 702, 712], "73": [8, 37, 234, 242, 286, 306, 395, 504, 510, 531, 605, 704], "44": [8, 9, 18, 31, 32, 41, 173, 220, 230, 234, 235, 264, 291, 294, 313, 314, 331, 409, 499, 501, 503, 504, 508, 511, 514, 526, 547, 591, 604, 605, 613, 624], "subtract": [8, 31, 48, 49, 82, 297, 366, 496, 499, 686, 689, 693], "tan": [8, 31, 406, 499, 501, 689, 694, 697, 698, 701, 702, 709], "tanh": [8, 31, 237, 499, 652, 709], "762": [8, 31, 238, 499], "964": [8, 31, 238, 499], "trapz": [8, 31, 499], "dx": [8, 31, 239, 499], "apart": [8, 31, 239, 499], "singl": [8, 18, 26, 31, 41, 239, 273, 291, 295, 301, 345, 381, 468, 480, 484, 499, 501, 502, 503, 510, 512, 529, 604, 605, 606, 614, 641, 655, 656, 676, 681, 682, 683, 685, 689, 690, 693, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 712, 713, 714, 717], "trapezoid": [8, 31, 239, 499], "trunc": [8, 31, 499], "025": [8, 240, 499, 507, 582], "trunc_divid": [8, 31, 499], "_arraywithactivationsexperiment": [9, 48], "elu": [9, 32, 286], "scaler": [9, 32, 242, 286, 641, 644, 704], "ep": [9, 14, 17, 32, 37, 40, 112, 243, 286, 295, 300, 341, 374, 375, 376, 497, 504, 509, 545, 548, 602, 658], "outpu": [9, 32, 243, 286], "clamp": [9, 32, 243, 286, 714], "elementwis": [9, 17, 32, 40, 243, 245, 283, 286, 504, 509, 557, 602, 698, 705, 709], "19722438": [9, 32, 243, 286], "38629448": [9, 32, 243, 286], "38629436": [9, 32, 243, 286], "logsigmoid": [9, 32, 286], "31326175": [9, 25, 244, 286], "126928": [9, 32, 244], "01814993": [9, 244], "00004578": [9, 244], "57888985": [9, 244], "31326169": [9, 32, 244, 286], "69314718": [9, 25, 32, 244, 276, 286, 291], "01104775": [9, 244], "prelu": [9, 32, 286, 652], "f": [9, 16, 32, 39, 245, 286, 297, 358, 506, 508, 571, 586, 590, 591, 592, 600, 601, 672, 676, 677, 683, 684, 689, 690, 709, 712, 720], "unidirect": [9, 245, 286], "smaller": [9, 16, 22, 32, 39, 245, 261, 273, 286, 291, 294, 306, 321, 326, 336, 394, 395, 396, 415, 501, 506, 514, 564, 572, 622, 623, 628, 630, 672, 683, 695, 709], "relu6": [9, 32, 286, 652], "rectifi": [9, 25, 32, 57, 59, 60, 246, 248, 249, 286, 493], "unit": [9, 25, 32, 55, 57, 58, 59, 60, 61, 62, 63, 242, 246, 247, 248, 249, 286, 377, 378, 493, 672, 682, 685, 691, 702, 703, 704, 717, 725, 728], "selu": [9, 32, 286, 652], "scale": [9, 13, 17, 32, 34, 36, 40, 158, 159, 247, 271, 286, 291, 294, 295, 300, 310, 316, 317, 318, 326, 336, 343, 374, 375, 376, 489, 498, 502, 503, 509, 526, 529, 530, 602, 641, 643, 644, 655, 656, 659, 724, 726], "11133075": [9, 247, 286], "05070102": [9, 32, 247, 286], "10140204": [9, 247, 286], "15210295": [9, 247, 286], "20280409": [9, 247, 286], "25350523": [9, 247, 286], "30420589": [9, 247, 286], "35490704": [9, 247, 286], "silu": [9, 32, 286, 652], "26894143": [9, 248], "73105854": [9, 32, 248], "thresholded_relu": [9, 32, 286], "custom": [9, 32, 249, 285, 286, 293, 641, 675, 679, 690, 695, 699, 703, 704, 707, 713, 724, 728, 729, 730], "_arraywithconversionsexperiment": [9, 48], "_arraywithcreationexperiment": [9, 48], "eye_lik": [9, 32, 288], "elsewher": [9, 32, 80, 250, 288, 496, 511, 613, 682], "unsorted_segment_min": [9, 32, 288], "segment_id": [9, 32, 259, 288, 661], "num_seg": [9, 32, 259, 288, 661], "given": [9, 10, 15, 16, 18, 26, 32, 33, 34, 38, 39, 41, 48, 49, 69, 78, 85, 86, 105, 106, 107, 108, 109, 121, 126, 145, 154, 156, 158, 159, 160, 162, 166, 239, 259, 261, 265, 266, 271, 272, 273, 275, 278, 288, 291, 294, 295, 296, 297, 300, 301, 306, 311, 312, 313, 314, 319, 320, 321, 324, 325, 326, 328, 329, 330, 331, 332, 336, 341, 346, 347, 348, 355, 356, 357, 363, 370, 373, 377, 378, 379, 380, 381, 382, 383, 384, 394, 395, 396, 397, 423, 446, 447, 456, 482, 483, 486, 488, 489, 490, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 560, 561, 562, 563, 564, 567, 568, 569, 570, 572, 573, 577, 578, 590, 591, 600, 601, 604, 605, 606, 608, 620, 621, 622, 623, 636, 641, 642, 643, 644, 648, 652, 653, 655, 656, 657, 658, 659, 660, 661, 675, 676, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 710, 711, 713, 716, 721, 726, 727, 730, 731], "segment": [9, 32, 259, 288, 688, 693], "id": [9, 32, 143, 259, 288, 498, 657, 672, 678, 680, 682, 686, 688, 689, 696, 700, 704, 718], "drop": [9, 32, 259, 288, 296, 297, 346, 369, 655, 656, 682, 717], "gather": [9, 10, 32, 33, 259, 288, 423, 425, 501, 731], "th": [9, 32, 259, 266, 288, 291, 295, 306, 339, 403], "identifi": [9, 32, 259, 288, 685, 690, 704, 707], "total": [9, 22, 26, 32, 45, 49, 82, 162, 259, 265, 288, 291, 496, 498, 511, 514, 612, 629, 631, 672, 676, 677, 683, 691, 692, 693, 704, 707, 712, 713, 717], "distinct": [9, 20, 32, 259, 288, 512, 614, 615, 616, 617, 675, 682, 689, 694, 700, 701, 702, 708, 724], "_arraywithdata_typeexperiment": [9, 48], "_arraywithdeviceexperiment": [9, 48], "_arraywithelementwiseexperiment": [9, 48], "allclos": [9, 32, 291], "rtol": [9, 14, 32, 37, 261, 273, 291, 504, 545, 548, 636, 638, 703], "atol": [9, 14, 32, 37, 261, 273, 291, 504, 545, 636, 638, 703], "08": [9, 22, 32, 41, 173, 261, 273, 291, 294, 324, 499, 503, 530, 605, 606, 631, 636, 641, 696], "equal_nan": [9, 32, 261, 273, 291], "rel": [9, 11, 14, 16, 21, 28, 32, 34, 37, 39, 44, 48, 84, 261, 273, 291, 296, 306, 346, 394, 483, 486, 488, 489, 490, 502, 504, 506, 513, 535, 545, 548, 556, 568, 572, 618, 621, 636, 638, 683, 690, 703, 707, 724, 726], "toler": [9, 14, 32, 37, 261, 273, 291, 295, 341, 504, 545, 548, 636, 638, 685, 703, 724], "compar": [9, 10, 20, 21, 26, 32, 33, 44, 261, 273, 291, 404, 407, 501, 512, 513, 614, 615, 616, 617, 618, 621, 638, 672, 687, 693, 695, 703, 704, 707, 712, 720, 722, 724, 730, 731], "altern": [9, 32, 261, 270, 272, 273, 274, 275, 277, 278, 279, 282, 283, 291, 672, 681, 682, 688, 701, 712, 727], "1e10": [9, 261, 273, 291], "00001e10": [9, 261, 273, 291], "00001e": [9, 261, 291], "005": [9, 261, 273, 291], "binar": [9, 32, 291], "outcom": [9, 32, 262, 271, 291], "comparison": [9, 32, 188, 223, 262, 291, 296, 346, 499, 504, 553, 695], "conj": [9, 32, 185, 190, 192, 233, 234, 238, 291, 499], "conjug": [9, 14, 32, 37, 263, 291, 294, 295, 301, 315, 337, 341, 382, 504, 542, 546, 554], "copysign": [9, 32, 291], "unsign": [9, 22, 32, 264, 291, 306, 395, 396, 514, 622, 623, 628, 630, 642, 691, 709], "count_nonzero": [9, 32, 291], "keepdim": [9, 14, 16, 19, 22, 23, 26, 32, 37, 39, 42, 45, 46, 265, 278, 284, 291, 292, 306, 399, 400, 401, 402, 403, 504, 506, 511, 514, 515, 543, 559, 578, 609, 610, 625, 626, 627, 628, 629, 630, 631, 632, 633, 695, 702, 709], "count": [9, 16, 20, 23, 28, 32, 39, 43, 46, 82, 153, 265, 291, 297, 306, 371, 392, 397, 496, 498, 504, 506, 512, 515, 532, 558, 565, 568, 614, 615, 632, 633, 688, 689, 693, 712], "flatten": [9, 10, 14, 16, 19, 20, 32, 33, 37, 39, 42, 43, 265, 278, 291, 295, 297, 306, 339, 365, 369, 371, 392, 399, 400, 401, 403, 415, 419, 501, 504, 506, 511, 512, 539, 547, 559, 565, 570, 572, 609, 610, 614, 615, 616, 617, 636, 638, 654, 672, 701, 707], "left": [9, 14, 19, 21, 32, 37, 42, 44, 64, 65, 179, 194, 265, 278, 284, 291, 292, 294, 295, 297, 306, 327, 340, 359, 399, 400, 401, 403, 415, 495, 499, 501, 504, 511, 513, 536, 537, 543, 552, 557, 609, 620, 682, 683, 685, 688, 690, 691, 693], "diff": [9, 26, 32, 291, 693, 701], "prepend": [9, 32, 266, 291, 504, 506, 542, 567, 682], "append": [9, 14, 26, 32, 179, 266, 291, 499, 504, 506, 535, 542, 567, 672, 690, 704, 709, 712], "differenc": [9, 32, 266, 291], "taken": [9, 14, 32, 37, 266, 291, 294, 336, 504, 535, 681, 690, 702, 705, 714, 725], "prior": [9, 32, 266, 291, 301, 382, 504, 554, 695, 705], "expand": [9, 10, 16, 32, 33, 266, 291, 297, 419, 501, 506, 567, 689], "direct": [9, 32, 266, 270, 274, 279, 282, 291, 294, 297, 326, 336, 359, 360, 368, 513, 621, 681, 686, 688, 702, 707, 713, 714, 716, 720, 724, 725, 728], "except": [9, 10, 16, 18, 23, 26, 32, 33, 37, 41, 46, 101, 266, 291, 301, 306, 381, 400, 401, 414, 432, 449, 463, 469, 497, 501, 504, 506, 510, 511, 515, 548, 565, 567, 575, 604, 605, 606, 612, 632, 633, 636, 639, 655, 657, 672, 683, 684, 685, 686, 690, 691, 694, 697, 701, 702, 705, 706, 707, 711, 717], "discret": [9, 32, 266, 291, 294, 314, 315, 320, 321, 324, 325, 326, 336, 505, 562, 656], "fix": [9, 32, 291, 503, 529, 672, 682, 683, 685, 691, 696, 704, 705], "nearest": [9, 32, 170, 187, 220, 230, 267, 291, 294, 306, 328, 403, 499, 707], "toward": [9, 16, 32, 39, 194, 241, 267, 279, 291, 297, 306, 368, 397, 499, 506, 572, 672, 678, 682, 705, 709, 720, 724], "float_pow": [9, 32, 291], "125": [9, 14, 37, 181, 268, 291, 306, 397, 499, 504, 557], "fmax": [9, 32, 291], "fmod": [9, 32, 499], "divis": [9, 10, 11, 32, 33, 34, 181, 187, 194, 196, 229, 231, 241, 297, 354, 452, 460, 473, 482, 483, 488, 499, 501, 502, 503, 516, 523, 524, 659, 698, 706], "frexp": [9, 32, 291], "next": [9, 32, 112, 270, 274, 279, 282, 291, 497, 655, 657, 659, 676, 678, 681, 682, 683, 687, 691, 693, 694, 696, 699, 705, 710, 711, 712, 724, 726], "represent": [9, 10, 26, 32, 33, 49, 97, 98, 112, 115, 140, 141, 167, 170, 177, 180, 182, 187, 194, 217, 220, 222, 237, 253, 270, 274, 279, 282, 288, 291, 405, 465, 494, 497, 498, 499, 501, 641, 643, 644, 656, 716, 722, 723, 725, 729, 730], "gradient": [9, 32, 160, 285, 291, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 498, 507, 580, 581, 582, 638, 648, 659, 672, 684, 705, 712, 713, 716, 717, 724], "edge_ord": [9, 32, 271, 291], "r": [9, 14, 26, 32, 37, 271, 285, 291, 293, 484, 502, 504, 506, 549, 578, 682, 683, 684, 700, 703], "estim": [9, 32, 271, 291, 306, 394], "boundari": [9, 18, 32, 41, 271, 291, 294, 328, 510, 606, 724], "note": [9, 10, 14, 16, 20, 32, 37, 39, 82, 94, 126, 194, 229, 230, 237, 258, 271, 288, 291, 294, 295, 297, 315, 340, 358, 409, 497, 499, 501, 503, 504, 506, 512, 514, 529, 536, 537, 550, 552, 571, 575, 615, 617, 626, 656, 678, 681, 682, 683, 686, 691, 693, 694, 696, 701, 702, 703, 704, 705, 707], "over": [9, 14, 22, 23, 24, 29, 32, 36, 37, 45, 46, 47, 66, 256, 257, 271, 278, 288, 291, 294, 297, 304, 306, 308, 309, 312, 321, 326, 330, 334, 335, 336, 348, 358, 367, 369, 387, 397, 481, 495, 501, 504, 509, 510, 514, 515, 532, 543, 554, 556, 558, 559, 602, 606, 625, 626, 627, 628, 629, 630, 631, 632, 633, 656, 658, 664, 672, 674, 676, 682, 683, 687, 693, 694, 700, 701, 703, 709, 711, 717, 722, 724], "partial": [9, 26, 32, 113, 114, 146, 147, 271, 291, 306, 401, 420, 421, 487, 497, 498, 501, 502, 504, 541, 642, 644, 657, 683, 688, 707], "diment": [9, 271, 291], "40": [9, 10, 31, 32, 33, 41, 45, 49, 181, 185, 205, 234, 271, 291, 294, 312, 314, 324, 330, 415, 417, 422, 423, 447, 460, 481, 484, 499, 501, 502, 504, 508, 514, 540, 547, 592, 605, 624, 628, 672, 690], "80": [9, 32, 271, 291, 295, 306, 345, 395, 504, 508, 514, 547, 594, 624, 675], "72": [9, 18, 32, 34, 192, 271, 291, 294, 314, 324, 486, 499, 502, 504, 514, 547, 605, 624], "33333333": [9, 32, 228, 271, 291, 499], "hypot": [9, 32, 291], "hypotenus": [9, 272, 291], "4031": [9, 272, 291], "8102": [9, 272, 291], "isclos": [9, 32, 291, 685], "hold": [9, 10, 14, 22, 32, 37, 45, 261, 273, 278, 291, 306, 354, 372, 395, 396, 401, 446, 447, 501, 504, 514, 543, 623, 639, 672, 712, 725], "ldexp": [9, 32, 291], "lerp": [9, 32, 291], "end": [9, 32, 69, 175, 231, 275, 291, 297, 358, 366, 367, 496, 499, 654, 672, 682, 683, 687, 690, 701, 705, 707, 708, 716, 717, 722, 727], "weight": [9, 11, 13, 15, 32, 34, 36, 38, 252, 275, 288, 291, 294, 306, 319, 392, 394, 397, 482, 483, 486, 488, 489, 490, 502, 503, 505, 507, 527, 528, 529, 530, 561, 582, 643, 655, 656, 657, 659, 672, 689, 698, 704, 709, 713, 714, 723], "interpol": [9, 32, 275, 291, 294, 306, 402, 403, 503, 529, 707, 724], "lgamma": [9, 291], "45373654": [9, 276, 291], "6477685": [9, 276, 291], "modf": [9, 32, 291], "fraction": [9, 32, 277, 291, 306, 403, 503, 526], "nansum": [9, 32, 291], "accumul": [9, 32, 278, 291], "nextaft": [9, 32, 291], "0e": [9, 11, 32, 34, 279, 291, 488, 502], "4013e": [9, 32, 279, 291], "4028e": [9, 32, 279, 291], "signbit": [9, 32, 291], "sinc": [9, 32, 291, 672, 675, 682, 683, 685, 686, 689, 690, 691, 695, 701, 702, 717, 724, 730], "637": [9, 32, 281, 291], "212": [9, 13, 32, 281, 291, 527], "0909": [9, 32, 281, 291], "xlogi": [9, 32, 291], "0986": [9, 32, 282, 291], "3863": [9, 32, 282, 291], "0000": [9, 32, 251, 252, 255, 282, 288, 291, 295, 297, 344, 361], "zeta": [9, 32, 291], "q": [9, 13, 14, 32, 36, 37, 283, 291, 295, 306, 340, 402, 403, 503, 504, 508, 530, 536, 537, 549, 591, 682, 683, 684, 703, 717], "0369": [9, 32, 283, 291], "2021": [9, 32, 283, 291, 672], "_arraywithgeneralexperiment": [9, 48], "init_valu": [9, 32, 36, 284, 292, 294, 335], "act": [9, 32, 284, 292, 683, 693, 706, 717, 731], "reduct": [9, 10, 15, 23, 26, 32, 33, 36, 38, 46, 284, 292, 294, 296, 335, 346, 416, 446, 447, 501, 505, 515, 561, 562, 563, 632, 633, 691, 698, 701, 704, 711], "_arraywithgradientsexperiment": [9, 48], "_arraywithimageexperiment": [9, 48], "_arraywithlayersexperiment": [9, 48], "adaptive_avg_pool1d": [9, 32, 294], "1d": [9, 32, 294, 297, 306, 308, 314, 316, 318, 324, 349, 367, 369, 394, 656], "adapt": [9, 32, 34, 294, 308, 309, 489, 502, 656, 659, 675], "averag": [9, 11, 15, 32, 34, 38, 294, 296, 306, 308, 309, 311, 312, 313, 346, 394, 482, 483, 488, 502, 503, 505, 507, 529, 561, 580, 581, 655, 656], "pool": [9, 32, 36, 294, 308, 309, 311, 312, 313, 329, 330, 331, 332, 335, 656], "signal": [9, 32, 294, 308, 309, 314, 315, 324, 656, 723, 724], "sever": [9, 32, 294, 308, 309, 682, 683, 705, 717, 722, 728], "plane": [9, 32, 187, 190, 192, 220, 232, 233, 234, 237, 294, 297, 308, 309, 368, 499], "l_in": [9, 32, 294, 308], "batch": [9, 10, 14, 26, 32, 33, 37, 158, 159, 294, 300, 308, 309, 315, 328, 374, 375, 376, 419, 422, 423, 481, 498, 501, 503, 504, 507, 509, 527, 529, 541, 559, 580, 581, 582, 602, 656, 658, 672, 689, 698, 703, 712, 722], "spatial": [9, 13, 32, 36, 294, 300, 308, 309, 328, 335, 374, 375, 376, 503, 516, 517, 518, 519, 521, 523, 525, 658, 716], "Will": [9, 32, 294, 308, 309, 654, 664, 717], "l_out": [9, 32, 294, 308], "adaptive_avg_pool2d": [9, 32, 294], "2d": [9, 32, 250, 288, 294, 297, 306, 309, 316, 317, 350, 357, 394, 656, 672, 698, 702, 707], "h_in": [9, 32, 294, 309], "w_in": [9, 32, 294, 309], "s_0": [9, 32, 294, 309], "s_1": [9, 32, 294, 309], "avg_pool1d": [9, 32, 294], "kernel": [9, 13, 32, 36, 294, 311, 312, 313, 329, 330, 331, 332, 503, 528, 709, 717, 724, 727, 728], "stride": [9, 13, 32, 33, 36, 48, 294, 297, 311, 312, 313, 329, 330, 331, 332, 334, 335, 347, 501, 503, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 656, 701, 724], "pad": [9, 13, 16, 32, 36, 39, 294, 297, 311, 312, 313, 314, 315, 320, 321, 324, 325, 326, 328, 329, 330, 331, 332, 334, 335, 336, 419, 501, 503, 506, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 566, 579, 643, 656, 672], "data_format": [9, 13, 32, 36, 294, 300, 311, 312, 313, 316, 317, 318, 329, 330, 331, 332, 334, 374, 375, 376, 503, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 641, 656, 658, 672], "nwc": [9, 13, 32, 36, 294, 311, 316, 329, 332, 503, 516, 517, 518, 523, 524, 656], "count_include_pad": [9, 32, 294, 311, 312, 313, 656], "ceil_mod": [9, 32, 294, 311, 312, 313, 330, 334, 656], "batch_siz": [9, 13, 18, 32, 36, 41, 294, 311, 312, 313, 329, 330, 331, 332, 503, 510, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 603, 672, 712], "d_in": [9, 13, 32, 36, 294, 311, 312, 313, 315, 320, 321, 325, 329, 330, 331, 332, 503, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525], "window": [9, 13, 32, 36, 251, 252, 254, 255, 260, 288, 294, 311, 312, 313, 315, 329, 330, 331, 332, 334, 335, 503, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 656, 678, 683, 729], "slide": [9, 13, 32, 36, 294, 311, 312, 313, 329, 330, 331, 332, 335, 503, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 656], "algorithm": [9, 13, 25, 32, 36, 55, 294, 311, 312, 313, 328, 329, 330, 331, 332, 504, 517, 519, 520, 521, 522, 525, 550, 656, 691, 702, 707, 717, 724, 726, 728], "per": [9, 13, 32, 36, 294, 311, 312, 313, 329, 330, 331, 332, 503, 517, 519, 520, 521, 522, 525, 529, 656, 683, 690, 702, 712], "ncw": [9, 13, 32, 36, 294, 311, 316, 317, 329, 332, 503, 516, 517, 518, 523, 524, 656], "arang": [9, 14, 22, 32, 37, 85, 294, 295, 311, 312, 313, 320, 325, 329, 330, 331, 332, 334, 338, 345, 360, 442, 481, 496, 501, 504, 507, 514, 543, 559, 582, 624, 672, 691, 701, 731], "reshap": [9, 13, 14, 16, 26, 32, 36, 37, 39, 294, 295, 297, 311, 312, 313, 316, 329, 330, 331, 332, 334, 338, 345, 358, 481, 501, 503, 504, 506, 519, 521, 525, 543, 559, 672, 701, 702, 704, 707, 709, 711, 714], "avg_pool2d": [9, 32, 294], "nhwc": [9, 13, 32, 36, 294, 312, 317, 330, 334, 503, 516, 519, 520, 523, 524, 525, 656], "divisor_overrid": [9, 32, 294, 312, 313, 656], "nchw": [9, 13, 32, 36, 294, 312, 317, 330, 334, 503, 516, 519, 520, 523, 524, 525, 656, 672], "kernel_s": [9, 32, 294, 311, 312, 313, 656, 661], "max_pool2d": [9, 32, 294, 312], "46": [9, 18, 32, 36, 41, 86, 210, 231, 251, 288, 294, 312, 313, 330, 331, 496, 499, 508, 527, 584, 604, 605], "avg_pool3d": [9, 32, 294], "ndhwc": [9, 13, 32, 36, 294, 313, 318, 331, 503, 516, 521, 522, 523, 524, 656], "d": [9, 10, 13, 14, 16, 28, 32, 33, 36, 37, 39, 61, 86, 94, 127, 170, 187, 188, 220, 223, 258, 288, 294, 295, 297, 301, 304, 311, 312, 313, 320, 325, 329, 330, 331, 332, 334, 339, 345, 351, 352, 354, 356, 359, 362, 369, 372, 380, 386, 407, 493, 496, 497, 499, 503, 504, 506, 508, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 534, 535, 543, 547, 557, 573, 586, 590, 591, 592, 600, 601, 672, 675, 676, 677, 682, 684, 688, 689, 700, 704, 707, 712, 720], "volum": [9, 13, 32, 36, 294, 313, 315, 320, 321, 325, 331, 503, 521, 522, 678], "filter": [9, 13, 32, 36, 254, 255, 288, 294, 313, 331, 503, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 643, 656, 672, 690], "ncdhw": [9, 13, 32, 36, 294, 313, 318, 331, 503, 516, 521, 522, 523, 524, 656], "43": [9, 41, 49, 181, 294, 306, 313, 395, 499, 510, 511, 605, 606, 613], "dct": [9, 32, 294, 656, 712], "norm": [9, 10, 14, 32, 33, 37, 294, 295, 314, 315, 319, 320, 321, 324, 325, 326, 336, 338, 341, 377, 378, 379, 410, 411, 432, 501, 504, 543, 559, 602, 656, 659, 705], "liter": [9, 14, 32, 37, 294, 297, 314, 324, 328, 366, 504, 513, 543, 559, 620, 707], "lenght": [9, 32, 251, 254, 255, 260, 294, 314, 656], "truncat": [9, 32, 294, 314, 320, 324, 325, 326, 336, 449, 501, 654, 656, 695, 712], "larger": [9, 16, 22, 32, 39, 45, 112, 294, 314, 321, 324, 326, 336, 497, 506, 514, 564, 572, 629, 631, 656, 704, 707, 731], "ortho": [9, 32, 294, 314, 315, 320, 321, 324, 325, 326, 336, 656], "102": [9, 32, 41, 294, 314, 604], "406": [9, 32, 294, 314, 410, 501], "dft": [9, 32, 294], "onesid": [9, 32, 294, 315], "dft_length": [9, 32, 294, 315], "backward": [9, 23, 32, 46, 229, 294, 315, 320, 321, 325, 326, 336, 499, 504, 515, 532, 558, 632, 633, 656, 717], "fourier": [9, 32, 294, 315, 320, 321, 325, 326, 336, 419, 501], "fft": [9, 32, 294, 315, 321, 336, 656, 681, 724], "n_fft": [9, 294, 315], "becaus": [9, 294, 315, 682, 683, 686, 687, 688, 689, 691, 692, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 707, 709, 713, 714, 717, 724, 727, 730], "satisfi": [9, 294, 295, 315, 341, 693], "symmetri": [9, 294, 315], "fast": [9, 294, 315, 724], "rfft": [9, 32, 294, 315, 336], "batch_idx": [9, 294, 315], "signal_dim1": [9, 294, 315], "signal_dim2": [9, 294, 315], "signal_dimn": [9, 294, 315], "signal_dim": [9, 294, 315], "embed": [9, 32, 294, 503, 529, 643, 656, 724], "max_norm": [9, 10, 32, 33, 294, 319, 410, 411, 501, 656], "dim": [9, 26, 28, 32, 89, 250, 288, 294, 297, 310, 320, 321, 322, 325, 333, 358, 496, 503, 516, 523, 524, 643, 656, 672, 691, 702, 703, 707], "ifft": [9, 32, 294, 320, 326], "pi": [9, 32, 233, 237, 294, 320, 325, 494, 499], "44509285e": [9, 32, 294, 320], "14423775e": [9, 32, 294, 320], "17j": [9, 32, 294, 320, 325], "00000000e": [9, 32, 33, 294, 320, 325, 419], "00": [9, 10, 32, 33, 37, 192, 294, 314, 320, 324, 325, 419, 499, 501, 504, 505, 538, 561, 641, 696, 704], "11483250e": [9, 32, 294, 320], "16j": [9, 32, 294, 320, 325], "33486982e": [9, 32, 294, 320], "22464680e": [9, 32, 294, 320], "95799250e": [9, 32, 294, 320], "66951701e": [9, 32, 294, 320], "fft2": [9, 294], "crop": [9, 32, 294, 321, 326, 336], "repeat": [9, 10, 16, 32, 33, 39, 294, 306, 321, 326, 394, 417, 501, 506, 507, 577, 582, 678, 683, 686, 687, 693, 694, 701, 704], "vari": [9, 20, 238, 294, 321, 415, 499, 501, 512, 615, 616, 617, 689, 693, 702, 704, 711], "20477401j": [9, 294, 321], "0614962j": [9, 294, 321], "idct": [9, 32, 294], "79": [9, 10, 32, 33, 36, 41, 48, 182, 187, 294, 314, 324, 335, 410, 411, 499, 501, 606], "49862671": [9, 32, 294, 324], "70": [9, 32, 33, 294, 314, 324, 423, 447, 504, 514, 547, 624, 675], "37691498": [9, 32, 294, 324], "00390816": [9, 32, 294, 324], "58938599": [9, 32, 294, 324], "92713165": [9, 32, 294, 324], "078475": [9, 32, 294, 324], "19664812": [9, 32, 294, 324], "95411837": [9, 32, 294, 324], "30636606e": [9, 32, 294, 325], "43029718e": [9, 32, 294, 325], "18j": [9, 32, 294, 320, 325], "53080850e": [9, 32, 294, 325], "58689626e": [9, 32, 294, 325], "24474906e": [9, 32, 294, 325], "91858728e": [9, 32, 294, 325], "01435406e": [9, 32, 294, 325], "ifftn": [9, 32, 294], "combin": [9, 26, 32, 49, 294, 306, 326, 336, 394, 420, 421, 501, 504, 532, 542, 683, 686, 689, 690, 691, 693, 695, 698, 704, 714, 724], "explain": [9, 32, 294, 326, 336, 672, 681, 682, 683, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 704, 705, 707, 709, 710, 711, 712, 713, 714, 720, 727, 730], "24730653": [9, 294, 326], "90832391j": [9, 294, 326], "49495562": [9, 294, 326], "9039565j": [9, 294, 326], "98193269": [9, 294, 326], "49560517j": [9, 294, 326], "93280757": [9, 294, 326], "48075343j": [9, 294, 326], "28526384": [9, 294, 326], "3351205j": [9, 294, 326], "2343787": [9, 294, 326], "83528011j": [9, 294, 326], "18791352": [9, 294, 326], "30690572j": [9, 294, 326], "82115787": [9, 294, 326], "96195183j": [9, 294, 326], "44719226": [9, 294, 326], "72654048j": [9, 294, 326], "51476765": [9, 294, 326], "66160417j": [9, 294, 326], "04319742": [9, 294, 326], "05411636j": [9, 294, 326], "015561": [9, 294, 326], "04216015j": [9, 294, 326], "06310689": [9, 294, 326], "05347854j": [9, 294, 326], "13392983": [9, 294, 326], "16052352j": [9, 294, 326], "08371392": [9, 294, 326], "17252843j": [9, 294, 326], "0031429": [9, 294, 326], "05421245j": [9, 294, 326], "10446617": [9, 294, 326], "17747098j": [9, 294, 326], "05344324": [9, 294, 326], "07972424j": [9, 294, 326], "8344667": [9, 294, 326], "98222595j": [9, 294, 326], "48472244": [9, 294, 326], "30233797j": [9, 294, 326], "mode": [9, 14, 26, 32, 37, 157, 160, 165, 170, 187, 220, 294, 297, 323, 328, 336, 366, 367, 369, 448, 449, 453, 454, 456, 457, 470, 471, 474, 475, 477, 478, 498, 499, 501, 504, 549, 656, 669, 678, 682, 683, 684, 689, 693, 707, 717, 724, 727], "scale_factor": [9, 32, 294, 328, 707], "recompute_scale_factor": [9, 32, 294, 328, 707], "align_corn": [9, 32, 294, 328, 707], "antialia": [9, 32, 294, 328, 707], "down": [9, 32, 294, 297, 328, 360, 654, 682, 704, 719, 724, 730], "channel": [9, 10, 13, 32, 33, 36, 48, 49, 294, 300, 316, 317, 318, 328, 374, 375, 376, 415, 419, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 525, 652, 653, 655, 656, 657, 658, 659, 660, 678, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731], "height": [9, 10, 13, 32, 33, 36, 294, 328, 415, 501, 503, 519, 520, 521, 522, 525, 654, 712], "width": [9, 10, 13, 32, 33, 36, 294, 295, 297, 306, 328, 341, 366, 397, 415, 501, 503, 517, 518, 519, 520, 521, 522, 525, 529], "bilinear": [9, 32, 294, 328, 707], "trilinear": [9, 32, 294, 328, 707], "nearest_exact": [9, 32, 294, 328, 707], "tf_area": [9, 32, 294, 328, 707], "bicub": [9, 32, 294, 328, 707], "mitchellcub": [9, 32, 294, 328, 707], "lanczos3": [9, 32, 294, 328, 707], "lanczos5": [9, 32, 294, 328, 707], "gaussian": [9, 32, 55, 294, 328, 493, 707], "overwrit": [9, 26, 32, 160, 294, 328, 498, 683, 701, 702, 709], "corner": [9, 32, 294, 328, 682, 683, 702], "pixel": [9, 32, 294, 328], "align": [9, 26, 32, 294, 295, 328, 339, 682, 690, 702, 709, 711, 719, 730], "thu": [9, 32, 181, 194, 225, 229, 237, 238, 294, 295, 328, 340, 499, 504, 536, 537, 678, 681, 690, 695, 702], "antialias": [9, 32, 294, 328], "downsampl": [9, 32, 294, 328], "resiz": [9, 32, 294, 328, 707], "max_pool1d": [9, 32, 294, 332], "dilat": [9, 13, 32, 36, 294, 297, 330, 334, 335, 366, 503, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 656], "max_pool3d": [9, 32, 294, 313], "reduce_window": [9, 36, 294], "window_dimens": [9, 36, 294, 335], "window_strid": [9, 36, 294, 335], "base_dil": [9, 36, 294, 335], "window_dil": [9, 36, 294, 335], "string": [9, 10, 13, 26, 32, 36, 97, 98, 110, 117, 139, 140, 141, 142, 143, 145, 154, 161, 162, 166, 294, 295, 297, 335, 341, 366, 396, 413, 497, 498, 501, 503, 504, 516, 517, 518, 519, 521, 523, 525, 538, 638, 642, 654, 687, 688, 690, 691, 692, 695, 702, 709, 712], "low": [9, 13, 18, 36, 41, 294, 335, 503, 510, 516, 517, 518, 519, 521, 523, 525, 604, 606, 643, 689, 695, 702, 707, 709, 720, 722, 724, 725, 726, 728, 730], "high": [9, 13, 18, 36, 41, 294, 335, 454, 501, 503, 510, 516, 517, 518, 519, 521, 523, 525, 604, 606, 643, 676, 681, 695, 700, 702, 712, 719, 720, 721, 722, 723, 724, 728, 730, 731], "pair": [9, 13, 36, 175, 194, 256, 283, 288, 291, 294, 326, 335, 336, 499, 503, 504, 516, 517, 518, 519, 521, 523, 525, 530, 532], "give": [9, 13, 36, 126, 294, 335, 497, 503, 506, 516, 517, 518, 519, 521, 523, 525, 571, 654, 655, 672, 676, 678, 682, 683, 684, 687, 690, 691, 693, 694, 697, 704, 724, 728], "rfftn": [9, 32, 294], "linear_algebra": [9, 14, 32, 37, 504, 705], "_arraywithlinearalgebraexperiment": [9, 48], "adjoint": [9, 14, 32, 37, 295, 504, 540, 551, 552, 641], "cond": [9, 32, 67, 295, 495, 717], "p": [9, 10, 14, 32, 33, 37, 87, 191, 295, 300, 338, 379, 410, 411, 496, 499, 501, 504, 508, 543, 559, 591, 656, 672, 682, 683, 684], "933034373659268": [9, 338], "diagflat": [9, 32, 295, 343, 344], "offset": [9, 14, 17, 28, 32, 37, 40, 82, 295, 300, 339, 374, 375, 376, 496, 504, 509, 535, 556, 602, 647], "padding_valu": [9, 32, 295, 339], "right_left": [9, 32, 295, 339], "num_row": [9, 32, 295, 339], "num_col": [9, 32, 295, 339], "eig": [9, 14, 32, 295, 504, 537, 538], "37228132": [9, 32, 295, 340, 342, 536], "82456484": [9, 340, 536], "41597356": [9, 340, 536], "56576746": [9, 340, 536], "90937671": [9, 340, 536], "eigh_tridiagon": [9, 32, 295], "eigvals_onli": [9, 32, 295, 341], "select": [9, 22, 32, 45, 295, 297, 306, 341, 345, 369, 395, 396, 514, 622, 623, 681, 682, 683, 690, 701, 704, 709, 711, 714, 717, 724, 727, 728], "select_rang": [9, 32, 295, 341], "tol": [9, 32, 295, 341], "eigenvalu": [9, 14, 32, 37, 295, 340, 341, 342, 504, 536, 537, 538, 545], "eigenvector": [9, 32, 295, 340, 341, 504, 536, 537], "v": [9, 13, 21, 28, 32, 36, 44, 86, 185, 190, 192, 233, 295, 297, 341, 357, 499, 503, 507, 513, 530, 582, 620, 638, 654, 656, 657, 658, 659, 660, 672, 678, 679, 682, 683, 684, 688, 709, 712, 713, 714], "interv": [9, 18, 23, 32, 41, 46, 69, 85, 86, 92, 295, 306, 341, 397, 496, 504, 506, 510, 515, 532, 558, 564, 567, 575, 604, 606, 632, 633], "togeth": [9, 26, 32, 261, 273, 291, 295, 341, 660, 672, 675, 686, 689, 691, 701, 702, 704, 705, 707, 713, 714, 717, 722, 724, 725, 730], "cluster": [9, 32, 295, 341, 717, 724], "converg": [9, 32, 295, 341, 676], "li": [9, 32, 295, 306, 341, 403, 674], "_2": [9, 32, 295, 341], "machin": [9, 14, 32, 37, 112, 115, 295, 341, 497, 504, 545, 548, 675, 682, 685, 698, 716, 719, 722, 724, 726, 727, 728, 729, 730], "precis": [9, 14, 32, 37, 112, 200, 220, 227, 234, 268, 291, 295, 306, 341, 394, 454, 475, 497, 499, 501, 504, 537, 538, 543, 550, 552, 553, 559, 690, 691, 702, 706, 707, 728], "eig_val": [9, 32, 295, 341], "decreas": [9, 32, 295, 341, 643], "eig_vector": [9, 32, 295, 341], "38196": [9, 295, 341], "61803": [9, 295, 341], "eigval": [9, 32, 295], "kron": [9, 32, 295, 344, 731], "matrix_exp": [9, 32, 295], "7183": [9, 32, 295, 344], "3891": [9, 32, 295, 344], "multi_dot": [9, 32, 295], "49": [9, 18, 32, 36, 37, 234, 294, 295, 306, 314, 324, 335, 345, 395, 499, 514, 557, 605, 624], "148": [9, 31, 32, 190, 295, 345], "loss": [9, 346, 454, 475, 501, 561, 562, 563, 672, 690, 691, 698, 702, 705, 706, 712, 713, 714, 724, 731], "_arraywithlossesexperiment": [9, 48], "manipul": [9, 32, 674, 701, 702, 705, 707, 709, 714, 716, 724], "_arraywithmanipulationexperiment": [9, 48], "as_strid": [9, 32, 297], "nativeshap": [9, 13, 16, 18, 32, 39, 41, 70, 71, 78, 83, 90, 95, 297, 301, 347, 356, 380, 381, 382, 383, 384, 447, 459, 464, 466, 496, 501, 503, 506, 510, 516, 518, 520, 522, 524, 571, 604, 605, 606, 697, 699], "byte": [9, 10, 28, 32, 33, 48, 82, 297, 347, 441, 496, 501, 729, 730], "associative_scan": [9, 32, 297], "revers": [9, 10, 14, 22, 32, 37, 45, 48, 49, 297, 306, 348, 359, 360, 395, 396, 414, 501, 504, 506, 514, 557, 568, 622, 623, 681, 689, 690, 691, 693, 694, 701, 702, 707, 714, 717], "associ": [9, 14, 32, 37, 170, 220, 297, 306, 348, 397, 499, 504, 545, 548, 560, 638, 683, 691, 698, 699, 702, 703, 704, 717], "scan": [9, 32, 297, 348, 717], "atleast_1d": [9, 32, 297], "ari": [9, 32, 297, 349, 350, 351, 354, 362, 372], "cannot": [9, 237, 349, 350, 351, 499, 683, 685, 687, 691, 702, 709, 714, 730], "ndim": [9, 14, 19, 37, 42, 48, 51, 297, 349, 350, 351, 481, 501, 504, 511, 549, 552, 612, 689, 698, 704], "made": [9, 16, 32, 295, 297, 343, 349, 350, 351, 575, 675, 678, 681, 683, 685, 686, 689, 690, 695, 696, 700, 701, 702, 705, 707, 709, 711, 724], "a1": [9, 33, 80, 349, 350, 351, 407, 496], "a2": [9, 349, 350, 351], "atleast_2d": [9, 32, 297], "atleast_3d": [9, 32, 297], "view": [9, 16, 32, 48, 81, 297, 351, 365, 368, 496, 682, 683, 695, 724], "three": [9, 87, 297, 351, 496, 682, 683, 689, 690, 691, 693, 702, 704, 707, 708, 709, 725, 730], "concat_from_sequ": [9, 32, 297], "input_sequ": [9, 32, 297, 353], "new_axi": [9, 32, 297, 353, 714], "concaten": [9, 10, 16, 32, 37, 297, 353, 415, 419, 501, 503, 506, 529, 547, 565, 703, 707, 709, 712], "insert": [9, 19, 32, 42, 297, 353, 506, 508, 511, 513, 567, 588, 609, 620, 656, 690, 696], "do": [9, 10, 26, 32, 33, 187, 220, 229, 297, 306, 353, 401, 403, 432, 499, 501, 508, 583, 590, 593, 594, 595, 600, 672, 676, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 705, 707, 709, 711, 712, 713, 714, 717, 719, 725, 730, 731], "stack": [9, 14, 16, 26, 32, 37, 39, 48, 92, 93, 295, 297, 340, 353, 355, 363, 373, 449, 457, 478, 496, 501, 504, 506, 508, 533, 535, 536, 537, 538, 540, 542, 544, 545, 546, 548, 549, 550, 552, 553, 556, 583, 593, 594, 656, 672, 680, 685, 701, 709, 720, 722, 729, 730], "dsplit": [9, 32, 297], "indices_or_sect": [9, 32, 297, 354, 362, 372], "split": [9, 16, 26, 32, 39, 158, 159, 160, 270, 277, 297, 354, 362, 372, 415, 442, 498, 501, 503, 506, 516, 523, 524, 576, 638, 656, 672, 677, 683, 690, 708, 709, 717, 731], "3rd": [9, 32, 297, 354], "dstack": [9, 32, 297], "fill_diagon": [9, 32, 297], "fill_diag": [9, 357], "start_dim": [9, 32, 297, 358, 672], "end_dim": [9, 32, 297, 358, 672], "read": [9, 16, 26, 28, 32, 39, 82, 297, 358, 496, 506, 571, 681, 682, 688, 690, 704, 706, 707, 724], "fastest": [9, 16, 32, 39, 295, 297, 345, 358, 506, 571], "slowest": [9, 16, 32, 39, 297, 358, 506, 571], "fortran": [9, 16, 32, 39, 297, 358, 506, 571, 724, 728], "layout": [9, 16, 32, 39, 297, 358, 506, 571, 687, 702, 707], "fliplr": [9, 32, 297, 701], "flip": [9, 16, 32, 39, 178, 297, 359, 360, 499, 506, 701, 711, 712, 714], "diag": [9, 14, 32, 37, 297, 359, 360, 504, 537, 709], "flipud": [9, 32, 297, 701], "heavisid": [9, 32, 297], "step": [9, 11, 28, 32, 34, 69, 85, 297, 361, 482, 483, 486, 488, 489, 490, 496, 502, 507, 580, 581, 582, 654, 659, 672, 676, 678, 681, 682, 683, 686, 687, 689, 690, 691, 692, 693, 700, 702, 704, 709, 712, 713, 714, 716, 724], "5000": [9, 297, 361, 504, 540], "hsplit": [9, 32, 297], "horizont": [9, 32, 297, 362, 415, 501], "hstack": [9, 32, 297], "vstack": [9, 32, 297, 363], "i0": [9, 32, 297, 306, 397], "modifi": [9, 26, 32, 297, 306, 364, 366, 367, 401, 681, 682, 683, 685, 687, 688, 691, 692, 694, 696, 698, 701, 703, 704, 705, 709], "bessel": [9, 22, 32, 45, 254, 288, 297, 364, 514, 629, 631], "kind": [9, 22, 32, 112, 115, 116, 225, 306, 364, 395, 396, 401, 497, 499, 514, 622, 623, 628, 630, 641, 642, 680, 702, 704, 707, 709, 717], "26606588": [9, 32, 297, 364], "2795853": [9, 32, 297, 364], "88079259": [9, 32, 297, 364], "moveaxi": [9, 32, 297], "destin": [9, 32, 297, 365], "unstack": [9, 16, 26, 39, 365, 506, 689, 709, 712, 731], "reorder": [9, 16, 32, 39, 297, 365, 415, 501, 506, 568], "uniqu": [9, 10, 20, 32, 33, 43, 297, 365, 366, 371, 439, 501, 507, 508, 512, 580, 581, 582, 585, 589, 614, 615, 616, 617, 643, 672, 674, 685, 689, 698, 702, 703, 707, 717, 727], "pad_width": [9, 16, 32, 39, 297, 366, 506, 566, 579], "stat_length": [9, 32, 297, 366], "constant_valu": [9, 32, 297, 366], "end_valu": [9, 32, 297, 366], "reflect_typ": [9, 32, 297, 366], "even": [9, 32, 187, 220, 225, 230, 297, 306, 366, 394, 499, 675, 676, 682, 683, 685, 690, 691, 692, 694, 697, 698, 701, 702, 703, 707, 711, 712, 713, 714, 717, 730], "rot90": [9, 32, 297, 701], "rotat": [9, 32, 297, 368, 716], "take_along_axi": [9, 32, 297], "extract": [9, 32, 297, 369, 702, 705, 720, 724, 725, 730], "One": [9, 10, 16, 18, 32, 33, 39, 41, 297, 349, 350, 351, 366, 369, 416, 501, 506, 510, 571, 604, 686, 689, 691, 693, 698, 703, 704, 709, 711, 712], "how": [9, 32, 187, 220, 297, 367, 369, 499, 654, 655, 656, 657, 672, 674, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 705, 706, 707, 708, 710, 711, 712, 713, 714, 716, 717, 720, 724], "bound": [9, 32, 297, 367, 369, 641, 695, 702, 704, 709, 730], "arr": [9, 10, 29, 32, 120, 297, 367, 369, 447, 497, 691, 692], "top_k": [9, 32, 297], "largest": [9, 26, 32, 112, 115, 297, 370, 497, 504, 543, 552, 716], "sort": [9, 20, 26, 32, 43, 49, 239, 295, 297, 306, 340, 370, 387, 401, 499, 504, 512, 536, 537, 552, 553, 614, 618, 619, 620, 643, 672, 680, 690, 705], "top": [9, 16, 32, 297, 370, 415, 501, 565, 654, 672, 682, 683, 691, 702, 704, 707, 712, 713, 724, 728], "retun": [9, 32, 297, 370], "smallest": [9, 26, 32, 112, 115, 183, 297, 370, 497, 499, 504, 543, 641, 643, 644], "name": [9, 14, 20, 24, 37, 43, 47, 194, 295, 297, 340, 370, 371, 405, 406, 499, 501, 504, 512, 536, 537, 541, 549, 550, 552, 557, 614, 615, 616, 638, 642, 648, 657, 664, 666, 681, 682, 683, 687, 688, 689, 690, 693, 694, 695, 697, 702, 703, 704, 705, 706, 707, 709, 712, 714, 724], "unique_consecut": [9, 32, 297], "vsplit": [9, 32, 297], "vertic": [9, 32, 297, 372, 373, 415, 501, 683], "_arraywithnormsexperiment": [9, 48], "batch_norm": [9, 32, 300], "varianc": [9, 22, 32, 45, 300, 374, 376, 514, 631, 655, 658], "momentum": [9, 32, 300, 374, 376, 658, 675], "nsc": [9, 32, 300, 374, 375, 376, 658], "braodcast": [9, 32, 300, 374], "present": [9, 26, 32, 263, 291, 300, 374, 375, 376, 674, 681, 683, 689, 691, 692, 697, 701, 709, 721, 722, 731], "avoid": [9, 32, 187, 192, 194, 210, 220, 297, 300, 351, 374, 375, 376, 409, 454, 475, 499, 501, 643, 644, 682, 683, 687, 688, 689, 690, 691, 695, 699, 702, 704, 705, 706, 707, 724], "running_mean": [9, 32, 300, 374, 376, 658], "running_var": [9, 32, 300, 374, 376, 658], "nc": [9, 32, 300, 374, 375, 376, 658], "group_norm": [9, 32, 300], "num_group": [9, 32, 300, 375], "group": [9, 32, 297, 300, 371, 375, 503, 508, 516, 523, 524, 585, 685, 689, 691, 698, 702, 703, 720, 723, 729], "separ": [9, 10, 32, 300, 375, 503, 529, 683, 686, 689, 690, 704, 709, 711, 712, 725, 729], "instance_norm": [9, 32, 300], "l1_normal": [9, 32, 300], "l1": [9, 14, 37, 300, 377, 504, 559, 689, 712], "whole": [9, 300, 377, 378, 379, 683, 688], "3333": [9, 300, 377, 379], "6667": [9, 300, 306, 377, 394], "4286": [9, 300, 377], "5714": [9, 300, 377], "l2_normal": [9, 32, 300, 379], "l2": [9, 14, 37, 300, 378, 379, 504, 559, 689], "4472": [9, 300, 378, 379], "8944": [9, 300, 378, 379], "lp_normal": [9, 32, 300], "lp": [9, 300, 379], "_arraywithrandomexperiment": [9, 48], "bernoulli": [9, 32, 294, 301, 316, 317, 318], "seed": [9, 13, 18, 20, 26, 32, 36, 41, 301, 380, 381, 382, 383, 384, 503, 510, 512, 526, 603, 604, 605, 606, 608, 614, 648, 653, 655, 699, 703, 704], "probabl": [9, 13, 15, 18, 32, 36, 38, 41, 294, 301, 306, 316, 317, 318, 380, 394, 397, 401, 503, 505, 510, 526, 529, 561, 603, 643, 655, 656, 672, 676, 704, 718], "event": [9, 32, 301, 380, 704], "entri": [9, 16, 26, 32, 39, 43, 85, 297, 301, 359, 360, 380, 496, 506, 508, 573, 596, 614, 682, 690, 704, 724], "parameter": [9, 18, 32, 41, 301, 380, 381, 383, 384, 510, 603, 605, 606], "distribut": [9, 15, 18, 32, 38, 41, 294, 296, 301, 316, 317, 318, 346, 380, 381, 382, 383, 384, 505, 510, 561, 562, 563, 603, 604, 605, 606, 608, 655, 656, 657, 681, 682, 690, 692, 717, 724, 727], "prob": [9, 13, 32, 36, 41, 294, 301, 316, 317, 318, 380, 503, 510, 526, 603, 656, 672], "odd": [9, 32, 225, 297, 301, 366, 380, 499, 680, 685], "g": [9, 18, 20, 22, 24, 32, 41, 47, 98, 127, 140, 187, 200, 220, 227, 230, 301, 306, 380, 381, 382, 383, 384, 395, 396, 497, 498, 499, 504, 508, 510, 512, 514, 537, 538, 543, 550, 552, 553, 559, 586, 590, 592, 600, 604, 605, 606, 614, 615, 616, 617, 622, 623, 625, 627, 628, 630, 655, 676, 677, 681, 682, 684, 685, 688, 689, 700, 702, 704, 709, 717, 719, 720], "drawn": [9, 18, 32, 41, 301, 380, 381, 382, 383, 384, 510, 603, 604, 605, 606, 641, 642, 643, 655, 704], "dirichlet": [9, 32, 301], "shuffl": [9, 18, 26, 32, 41, 382, 510], "10598304": [9, 301, 382], "21537054": [9, 301, 382], "67864642": [9, 301, 382], "48006698": [9, 301, 382], "07472073": [9, 301, 382], "44521229": [9, 301, 382], "55479872": [9, 301, 382], "05426367": [9, 301, 382], "39093761": [9, 301, 382], "19531053": [9, 301, 382], "51675832": [9, 301, 382], "28793114": [9, 301, 382], "12315625": [9, 301, 382], "29823365": [9, 301, 382], "5786101": [9, 301, 382], "15564976": [9, 301, 382], "50542368": [9, 301, 382], "33892656": [9, 301, 382], "1325352": [9, 301, 382], "44439589": [9, 301, 382], "42306891": [9, 301, 382], "gamma": [9, 17, 32, 40, 276, 291, 301, 306, 398, 509, 602], "poisson": [9, 32, 296, 301, 346], "rate": [9, 11, 32, 34, 294, 301, 334, 384, 483, 486, 488, 489, 490, 502, 507, 580, 581, 582, 659, 690], "paramt": [9, 384, 508, 590, 600], "lam": [9, 32, 301, 384], "_arraywithsearchingexperiment": [9, 48], "unravel_index": [9, 32, 302], "unravel": [9, 32, 302, 385], "_arraywithsetexperiment": [9, 48], "_arraywithsortingexperiment": [9, 48], "lexsort": [9, 32, 304], "indirectli": [9, 32, 304, 387], "column": [9, 14, 32, 37, 80, 94, 258, 288, 295, 297, 304, 306, 340, 357, 359, 360, 363, 387, 393, 394, 496, 504, 536, 537, 543, 549, 551, 552, 557, 655], "statist": [9, 32, 47, 297, 366, 658, 670, 681, 691, 704, 705, 724], "_arraywithstatisticalexperiment": [9, 48], "bincount": [9, 32, 306], "minlength": [9, 32, 306, 392], "alreadi": [9, 26, 32, 183, 193, 220, 230, 240, 297, 306, 350, 351, 366, 392, 401, 499, 504, 539, 547, 672, 681, 682, 683, 687, 689, 691, 697, 701, 702, 707, 717, 718, 724, 726, 731], "bin": [9, 32, 306, 392, 397, 678, 682, 683, 685, 689], "corrcoef": [9, 32, 306], "rowvar": [9, 32, 306, 393, 394], "row": [9, 32, 80, 94, 258, 288, 297, 304, 306, 360, 373, 387, 393, 394, 496, 504, 510, 511, 543, 551, 552, 557, 603, 612, 655], "relationship": [9, 32, 393, 655], "cov": [9, 32, 306], "bia": [9, 13, 32, 36, 40, 306, 394, 442, 501, 503, 509, 516, 523, 524, 527, 528, 529, 602, 656, 698, 704, 709, 713], "ddof": [9, 32, 306, 394], "fweight": [9, 32, 306, 394], "aweight": [9, 32, 306, 394], "overridden": [9, 32, 306, 394, 659, 686], "unbias": [9, 22, 32, 45, 306, 394, 514, 631], "frequenc": [9, 10, 32, 33, 306, 394, 419, 501, 683], "typic": [9, 32, 261, 273, 291, 306, 394, 513, 620, 685, 698, 723, 731], "assign": [9, 32, 306, 394, 681, 683, 687, 691, 701, 711], "covari": [9, 32, 306, 394], "cummax": [9, 32, 306], "exclus": [9, 10, 22, 26, 32, 33, 45, 69, 306, 395, 396, 434, 435, 438, 496, 501, 510, 514, 604, 622, 623, 689, 691, 698, 705, 714, 728, 730], "cumul": [9, 22, 32, 45, 306, 395, 396, 514, 622, 623, 716], "int64": [9, 18, 19, 21, 22, 29, 41, 42, 44, 45, 90, 102, 108, 111, 113, 115, 119, 120, 124, 131, 253, 288, 304, 306, 387, 395, 396, 496, 497, 511, 513, 514, 604, 609, 610, 611, 620, 622, 623, 628, 630, 641, 642, 691, 702, 704, 709], "uint64": [9, 22, 109, 114, 116, 117, 127, 129, 132, 306, 395, 396, 497, 514, 622, 623, 628, 630, 641, 642, 691, 704, 709], "uint16": [9, 22, 104, 109, 114, 115, 124, 306, 395, 396, 497, 514, 622, 623, 628, 630, 641, 642, 691, 702, 704, 709], "bit": [9, 22, 111, 112, 115, 178, 179, 181, 306, 395, 396, 497, 499, 514, 622, 623, 628, 630, 680, 681, 682, 689, 690, 691, 693, 698, 709, 711, 730], "uint32": [9, 22, 109, 114, 115, 116, 138, 306, 395, 396, 497, 514, 622, 623, 628, 630, 641, 642, 691, 704, 709], "resolv": [9, 22, 194, 306, 395, 396, 499, 506, 514, 567, 622, 623, 628, 630, 683, 688, 691, 709], "cummin": [9, 32, 306], "histogram": [9, 32, 306], "extend_lower_interv": [9, 32, 306, 397], "extend_upper_interv": [9, 32, 306, 397], "densiti": [9, 32, 306, 397], "monoton": [9, 32, 306, 397], "rightmost": [9, 32, 306, 397], "extend": [9, 32, 297, 306, 366, 397, 683, 687, 688, 694, 695, 697, 702, 705, 717, 721, 724, 730], "c1": [9, 32, 306, 397, 689], "ff": [9, 32, 306, 397], "i_": [9, 32, 306, 397], "c_": [9, 32, 306, 397], "igamma": [9, 32, 306], "incomplet": [9, 32, 306, 398, 683], "3614": [9, 32, 306, 398], "2085": [9, 32, 306, 398], "median": [9, 32, 297, 306, 366, 401], "nanmean": [9, 32, 306], "anyth": [9, 32, 306, 400, 401, 683, 695, 704, 705, 724, 725], "sub": [9, 14, 16, 26, 27, 31, 32, 33, 37, 39, 49, 219, 295, 297, 306, 341, 354, 362, 372, 400, 401, 504, 506, 507, 535, 573, 580, 581, 582, 654, 681, 683, 684, 689, 695, 702, 703, 704, 711, 712, 713, 720], "6666666666666665": [9, 32, 306, 400], "nanmedian": [9, 32, 306], "overwrite_input": [9, 32, 306, 401], "save": [9, 26, 32, 306, 401, 458, 479, 498, 501, 515, 657, 676, 678, 682, 690, 696, 704, 717, 723], "treat": [9, 26, 32, 225, 278, 291, 297, 306, 369, 401, 499, 638, 700, 704, 710, 714], "undefin": [9, 32, 297, 306, 366, 401, 695, 700], "fulli": [9, 32, 306, 401, 656, 672, 676, 686, 691, 697, 700, 707, 709, 710, 711, 712, 713, 714, 717, 722, 723, 724, 730, 731], "quantil": [9, 32, 306], "inclus": [9, 32, 69, 306, 403, 496, 510, 604, 677, 687, 701, 707], "higher": [9, 32, 297, 306, 349, 350, 351, 403, 655, 691, 708, 709, 714, 717, 721, 724, 725, 728, 730, 731], "midpoint": [9, 32, 306, 403], "surround": [9, 32, 306, 403, 707], "whichev": [9, 32, 306, 403], "_arraywithutilityexperiment": [9, 48], "_arraywithgener": [10, 48], "all_equ": [10, 33, 501], "equality_matrix": [10, 33, 404, 501], "array_equ": [10, 33, 501], "assert_supports_inplac": [10, 33, 501], "ivybackendexcept": [10, 33, 408, 432, 501, 667, 686, 695], "jaxlib": [10, 33, 408, 501, 664, 682, 686, 691, 692, 697, 705, 709, 711], "xla_extens": [10, 33, 408, 501, 664, 686, 691, 692, 697, 705, 709, 711], "devicearrai": [10, 33, 408, 501, 664, 686, 702, 709, 711], "clip_matrix_norm": [10, 33, 501], "downscal": [10, 33, 410, 411, 432, 501], "894": [10, 33, 410, 411, 501, 509, 602], "clip_vector_norm": [10, 33, 501], "default_v": [10, 414, 501], "catch_except": [10, 414, 501], "rev": [10, 414, 501], "with_cal": [10, 414, 501], "catch": [10, 414, 501, 699, 704], "might": [10, 126, 414, 497, 501, 681, 682, 683, 690, 691, 693, 696, 699, 702, 704, 705, 707, 709, 711, 712, 719], "els": [10, 18, 31, 41, 105, 106, 107, 108, 109, 121, 227, 231, 301, 381, 414, 418, 497, 499, 501, 508, 510, 593, 596, 604, 605, 606, 636, 655, 672, 681, 683, 685, 687, 691, 695, 698, 701, 702, 703, 704, 705, 707, 709, 711, 713, 714, 717, 725], "einops_rearrang": [10, 33, 501], "pattern": [10, 33, 415, 416, 417, 501, 676, 691, 694], "axes_length": [10, 33, 415, 416, 417, 501], "re": [10, 19, 42, 160, 409, 415, 498, 501, 504, 506, 511, 554, 572, 611, 613, 673, 674, 675, 677, 681, 682, 683, 684, 685, 691, 700, 701, 702, 703, 705, 707, 711, 714, 717, 724], "arrang": [10, 415, 501], "rearrang": [10, 33, 415, 417, 501], "einop": [10, 33, 415, 416, 417, 501, 675], "einops_reduc": [10, 33, 501], "prod": [10, 22, 33, 45, 416, 501, 514, 641, 691, 693, 709], "einops_repeat": [10, 33, 501], "fourier_encod": [10, 33, 501], "max_freq": [10, 33, 419, 501], "num_band": [10, 33, 419, 501], "band": [10, 33, 419, 501], "linearli": [10, 33, 419, 501, 504, 551], "oppos": [10, 33, 419, 501, 691], "geometr": [10, 33, 419, 501, 504, 557], "seper": [10, 419, 501, 693, 703, 704], "0000000e": [10, 33, 419, 501], "2246468e": [10, 33, 419, 501], "4492936e": [10, 419, 501], "6739404e": [10, 33, 419, 501], "batch_dim": [10, 33, 422, 423, 501, 661], "gather_nd": [10, 33, 501], "get_num_dim": [10, 33, 501], "as_arrai": [10, 33, 426, 459, 501, 661], "has_nan": [10, 33, 501], "include_inf": [10, 33, 428, 480, 501], "inplace_decr": [10, 33, 501], "val": [10, 26, 31, 33, 200, 430, 431, 432, 450, 451, 452, 499, 501, 691, 701, 711], "decrement": [10, 33, 430, 501], "inplace_incr": [10, 33, 501], "increment": [10, 33, 431, 501, 683, 705, 724], "inplace_upd": [10, 33, 501, 653, 701], "ensure_in_backend": [10, 33, 432, 501, 701], "keep_input_dtyp": [10, 33, 432, 501, 701], "ensur": [10, 33, 432, 501, 636, 672, 681, 682, 683, 686, 691, 693, 695, 696, 697, 699, 701, 702, 703, 704, 705, 718, 724], "is_arrai": [10, 33, 501, 701, 702], "rather": [10, 26, 33, 69, 160, 434, 435, 438, 496, 498, 501, 675, 683, 685, 689, 691, 694, 702, 703, 704, 705, 714, 717, 720, 723, 724], "is_ivy_arrai": [10, 33, 501, 701, 711], "is_ivy_contain": [10, 501], "is_native_arrai": [10, 33, 123, 435, 497, 501, 711], "isin": [10, 33, 501], "test_el": [10, 33, 439, 501], "assume_uniqu": [10, 33, 439, 501], "invert": [10, 33, 178, 439, 499, 501, 504, 544], "speed": [10, 33, 439, 501, 674, 704, 727], "scatter_flat": [10, 33, 501], "occupi": [10, 112, 115, 446, 447, 497, 501], "scatter_nd": [10, 33, 501, 707, 711], "empti": [10, 26, 33, 69, 297, 366, 410, 447, 496, 501, 504, 508, 514, 515, 556, 559, 597, 628, 630, 632, 633, 681, 682, 686, 688, 691, 692, 701], "stable_divid": [10, 33, 501, 698], "denomin": [10, 17, 33, 40, 452, 460, 473, 501, 509, 602, 658, 698, 706, 717, 721], "min_denomin": [10, 33, 452, 460, 473, 501, 706], "global": [10, 26, 33, 49, 105, 106, 107, 108, 109, 158, 159, 160, 451, 452, 455, 460, 461, 472, 473, 476, 497, 498, 501, 648, 658, 664, 682, 686, 687, 690, 691, 692, 695, 698, 702, 709, 724], "_min_denomin": [10, 460, 501], "stable_pow": [10, 33, 501], "min_bas": [10, 33, 451, 461, 472, 501, 658, 706], "stabl": [10, 21, 33, 44, 94, 258, 288, 304, 387, 451, 452, 460, 461, 472, 473, 496, 501, 513, 618, 621, 643, 682, 687, 691, 702, 706, 709, 717], "supports_inplace_upd": [10, 33, 501], "to_fil": 10, "fid": 10, "sep": 10, "format_": 10, "text": [10, 681, 683, 688, 693, 694], "binari": [10, 13, 15, 36, 38, 177, 180, 182, 217, 237, 296, 346, 499, 503, 505, 526, 561], "filenam": [10, 657, 663, 712], "txt": [10, 682, 685, 688, 705], "recov": [10, 695, 702], "appropri": [10, 19, 24, 42, 47, 170, 187, 194, 220, 261, 273, 291, 499, 511, 609, 681, 682, 683, 695, 699, 704], "to_list": [10, 33, 501], "to_numpi": [10, 33, 501, 672, 703, 712], "address": [10, 467, 501, 676, 681, 683, 685, 686, 709, 720, 722, 724, 730], "to_scalar": [10, 33, 501], "value_is_nan": [10, 33, 501], "92": [10, 41, 480, 490, 502, 504, 533, 605, 606], "_arraywithgradi": [11, 48], "adam_step": [11, 34, 502], "mw": [11, 34, 482, 483, 502, 713], "vw": [11, 34, 482, 483, 502, 713], "beta1": [11, 34, 406, 482, 483, 488, 501, 502, 659, 713], "beta2": [11, 34, 406, 482, 483, 488, 501, 502, 659, 713], "999": [11, 31, 34, 238, 482, 483, 488, 490, 499, 502, 659, 713], "epsilon": [11, 14, 15, 34, 37, 38, 406, 482, 483, 488, 501, 502, 504, 505, 545, 548, 561, 562, 563, 658, 659, 689, 698, 701, 713], "07": [11, 15, 31, 34, 38, 41, 175, 208, 212, 231, 294, 324, 472, 482, 483, 485, 486, 487, 488, 492, 499, 501, 502, 505, 562, 563, 605, 659, 713], "cost": [11, 34, 482, 483, 486, 488, 489, 490, 502, 507, 580, 581, 582, 707, 722], "dc": [11, 34, 482, 483, 486, 488, 489, 490, 502], "dw": [11, 34, 482, 483, 486, 488, 489, 490, 502], "forget": [11, 34, 482, 483, 488, 502, 659, 672, 691], "factor": [11, 13, 14, 32, 34, 36, 37, 158, 159, 160, 294, 326, 330, 336, 482, 483, 488, 489, 498, 502, 503, 504, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 531, 641, 643, 644, 655, 656, 659, 675, 695], "adam": [11, 34, 406, 482, 483, 488, 501, 502, 659, 672, 712, 713, 714, 724], "prevent": [11, 34, 409, 482, 483, 488, 501, 502, 503, 514, 526, 630, 655, 659, 681, 683, 690, 691, 695, 701, 702, 705], "delta": [11, 34, 482, 502], "dcdw": [11, 34, 482, 483, 486, 488, 489, 502], "adam_step_delta": [11, 34, 482, 502], "2020105": [11, 482, 502], "22187898": [11, 482, 502], "24144873": [11, 482, 502], "10000002": [11, 45, 482, 502, 626], "20000005": [11, 482, 502], "00300002": [11, 482, 502], "00800002": [11, 482, 502], "adam_upd": [11, 34, 502, 713], "lr": [11, 34, 406, 483, 486, 488, 489, 490, 501, 502, 659, 712, 713], "mw_tm1": [11, 34, 483, 488, 502], "vw_tm1": [11, 34, 483, 488, 502], "stop_gradi": [11, 34, 160, 406, 483, 486, 488, 489, 490, 498, 501, 502, 507, 580, 581, 582, 659, 713], "learn": [11, 34, 415, 483, 486, 488, 489, 490, 501, 502, 507, 580, 581, 582, 659, 672, 674, 675, 677, 680, 681, 682, 684, 685, 696, 698, 700, 708, 716, 719, 722, 726, 727, 728, 729, 730, 731], "previou": [11, 34, 134, 135, 136, 137, 138, 285, 293, 470, 472, 473, 474, 476, 477, 479, 483, 488, 497, 501, 502, 655, 669, 683, 685, 687, 690, 697, 702, 704, 707, 714, 717, 727], "ws_new": [11, 34, 483, 488, 489, 490, 502], "updated_weight": [11, 34, 483, 502], "92558753": [11, 483], "92558873": [11, 483, 502], "92558718": [11, 483, 502], "00000063e": [11, 34, 483, 502], "00000016e": [11, 34, 483, 502], "00000086e": [11, 34, 483, 502], "gradient_descent_upd": [11, 34, 502, 507, 580, 581, 582], "descent": [11, 34, 486, 502, 659, 713, 724], "new_weight": [11, 34, 486, 488, 502, 712], "95": [11, 18, 25, 34, 36, 41, 55, 294, 314, 335, 482, 486, 490, 493, 502, 510, 605, 606], "97": [11, 31, 34, 41, 173, 486, 499, 502, 605], "96": [11, 31, 32, 33, 41, 184, 205, 237, 294, 314, 415, 416, 486, 499, 501, 502, 504, 514, 547, 606, 624], "lamb_upd": [11, 34, 502], "max_trust_ratio": [11, 34, 488, 502, 659], "decay_lambda": [11, 34, 488, 489, 502, 659], "trust": [11, 34, 488, 502, 659], "ratio": [11, 34, 488, 502, 659], "decai": [11, 34, 488, 489, 502, 659], "lamb": [11, 34, 488, 502, 659, 713], "784": [11, 488, 502], "78": [11, 182, 231, 488, 499, 502, 504, 510, 514, 547, 605, 624], "lars_upd": [11, 34, 502], "lar": [11, 34, 489, 502, 659, 713], "optimizer_upd": [11, 34, 502], "effective_grad": [11, 34, 490, 502], "3e": [11, 34, 490, 502], "preserve_typ": [11, 34, 491, 502], "_arraywithimag": [12, 48], "_arraywithlay": [13, 48], "conv1d": [13, 36, 503, 656], "fw": [13, 36, 306, 394, 503, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 638, 682, 704], "d_out": [13, 36, 503, 516, 517, 518, 519, 520, 521, 522, 523, 524], "wio": [13, 503, 516, 517, 518, 523], "conv1d_transpos": [13, 36, 503], "output_shap": [13, 36, 503, 516, 518, 520, 522, 524, 656], "conv2d": [13, 36, 503, 520, 656, 672], "fh": [13, 36, 503, 516, 519, 520, 521, 522, 523, 524, 525], "hwio": [13, 503, 516, 519, 523], "conv2d_transpos": [13, 36, 503], "random_norm": [13, 14, 18, 36, 37, 41, 415, 501, 503, 504, 510, 518, 520, 521, 522, 525, 528, 552, 672], "std": [13, 18, 22, 36, 41, 45, 301, 381, 503, 510, 514, 518, 520, 521, 522, 525, 604, 605, 655, 672, 693], "conv3d": [13, 36, 503, 656], "fd": [13, 36, 503, 516, 521, 522, 523, 524], "conv3d_transpos": [13, 36, 503], "depthwise_conv2d": [13, 36, 503], "dropout": [13, 36, 294, 316, 317, 318, 503, 529, 656, 712], "noise_shap": [13, 36, 503, 526], "droput": [13, 526], "turn": [13, 36, 316, 317, 318, 503, 526, 656, 676, 682, 689, 693, 702, 704], "reproduc": [13, 36, 503, 526, 641, 642, 643, 644, 648, 685], "mask": [13, 36, 425, 501, 503, 526, 529, 530, 707], "42857146": [13, 503, 526], "85714293": [13, 503, 526], "28571415": [13, 36, 503, 526], "71428585": [13, 36, 503, 526], "14285755": [13, 36, 503, 526], "5714283": [13, 503, 526], "4285717": [13, 36, 503, 526], "8571434": [13, 36, 503, 526], "2857151": [13, 503, 526], "dropout1d": [13, 36, 294], "droput1d": [13, 316, 317], "dropout2d": [13, 36, 294], "dropout3d": [13, 36, 294], "droput3d": [13, 318], "outer_batch_shap": [13, 36, 503, 527], "inner_batch_shap": [13, 36, 503, 527], "in_featur": [13, 36, 503, 527, 704], "out_featur": [13, 36, 503, 527, 704], "84": [13, 22, 31, 40, 41, 115, 145, 210, 497, 498, 504, 509, 514, 527, 547, 602, 605, 606, 624], "133": [13, 411, 501, 527], "134": [13, 504, 527, 544], "lstm_updat": [13, 36, 503, 709], "init_h": [13, 36, 503, 528, 709], "init_c": [13, 36, 503, 528, 709], "recurrent_kernel": [13, 36, 503, 528, 709], "recurrent_bia": [13, 36, 503, 528, 709], "cell": [13, 36, 503, 528, 656, 690, 709], "batch_shap": [13, 18, 28, 36, 41, 80, 89, 496, 503, 504, 510, 528, 529, 530, 560, 603, 656, 707, 709, 711], "hidden": [13, 36, 503, 528, 656, 688, 695, 709, 713], "recurr": [13, 36, 503, 528, 709, 724, 728], "timestep": [13, 36, 503, 528, 529, 656, 709], "h_i": [13, 36, 528], "c_i": [13, 36, 528], "rc": [13, 36, 528], "multi_head_attent": [13, 36, 503, 701], "num_head": [13, 36, 503, 529, 656], "attention_mask": [13, 36, 503, 529], "in_proj_weight": [13, 36, 503, 529], "q_proj_weight": [13, 36, 503, 529], "k_proj_weight": [13, 36, 503, 529], "v_proj_weight": [13, 36, 503, 529], "out_proj_weight": [13, 36, 503, 529], "in_proj_bia": [13, 36, 503, 529], "out_proj_bia": [13, 36, 503, 529], "is_caus": [13, 36, 503, 529], "return_attention_weight": [13, 36, 503, 529], "average_attention_weight": [13, 36, 503, 529], "key_chain": [13, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 77, 79, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 99, 100, 101, 102, 110, 112, 115, 118, 119, 120, 122, 124, 127, 161, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 258, 260, 261, 262, 263, 265, 272, 273, 279, 281, 282, 283, 284, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 328, 329, 330, 331, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 349, 350, 351, 353, 355, 363, 366, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 386, 387, 394, 395, 396, 397, 403, 404, 407, 408, 410, 411, 415, 416, 417, 419, 422, 423, 426, 428, 430, 431, 432, 434, 435, 438, 446, 447, 460, 461, 463, 465, 467, 468, 480, 486, 491, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 603, 604, 605, 606, 608, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633], "to_appli": [13, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 77, 79, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 99, 100, 101, 102, 110, 112, 115, 118, 119, 120, 122, 124, 127, 161, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 258, 260, 261, 262, 263, 265, 272, 273, 279, 281, 282, 283, 284, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 328, 329, 330, 331, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 349, 350, 351, 353, 355, 363, 366, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 386, 387, 394, 395, 396, 397, 403, 404, 407, 408, 410, 411, 415, 416, 417, 419, 422, 423, 426, 428, 430, 431, 432, 434, 435, 438, 446, 447, 460, 461, 463, 465, 467, 468, 480, 486, 491, 508, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 596, 603, 604, 605, 606, 608, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633], "prune_unappli": [13, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 77, 79, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 99, 100, 101, 102, 110, 112, 115, 118, 119, 120, 122, 124, 127, 161, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 258, 260, 261, 262, 263, 265, 272, 273, 279, 281, 282, 283, 284, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 328, 329, 330, 331, 335, 338, 339, 340, 341, 342, 343, 345, 349, 350, 351, 353, 355, 363, 366, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 386, 387, 394, 395, 396, 397, 403, 404, 407, 408, 410, 411, 415, 416, 417, 419, 422, 423, 426, 428, 430, 431, 432, 434, 435, 438, 446, 447, 460, 461, 463, 465, 467, 468, 480, 486, 491, 508, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 596, 603, 604, 605, 606, 608, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633], "map_sequ": [13, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 77, 79, 81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 96, 99, 100, 101, 102, 110, 112, 115, 118, 119, 120, 122, 124, 127, 161, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 258, 260, 261, 262, 263, 265, 272, 273, 279, 281, 282, 283, 284, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 328, 329, 330, 331, 335, 338, 339, 340, 341, 342, 343, 345, 349, 350, 351, 353, 355, 363, 366, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 386, 387, 394, 395, 396, 397, 403, 404, 407, 408, 410, 411, 415, 416, 417, 419, 422, 423, 426, 428, 430, 431, 432, 434, 435, 438, 446, 447, 460, 461, 463, 465, 467, 468, 480, 486, 491, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 603, 604, 605, 606, 608, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633], "scaled_dot_product_attent": [13, 36, 503], "queri": [13, 26, 36, 145, 159, 425, 450, 498, 501, 503, 529, 530, 656, 689, 691, 711, 724], "num_queri": [13, 36, 503, 529, 530], "feat_dim": [13, 36, 503, 530], "num_kei": [13, 36, 503, 529, 530], "applic": [13, 36, 503, 504, 508, 514, 529, 530, 556, 589, 590, 591, 595, 596, 628, 630, 672, 682, 690, 691, 692, 699, 713, 721, 722, 724, 726, 728, 730], "dot": [13, 32, 36, 295, 345, 503, 504, 529, 530, 558, 672, 682, 690], "attent": [13, 36, 503, 529, 530, 656, 675, 683, 686], "score": [13, 36, 503, 530, 672], "_arraywithlinearalgebra": [14, 48], "choleski": [14, 37, 504, 701], "symmetr": [14, 32, 37, 251, 252, 254, 255, 288, 295, 297, 340, 366, 504, 531, 536, 537, 538, 560, 689], "u": [14, 28, 37, 86, 504, 508, 531, 538, 552, 591, 672, 675, 677, 682, 683, 684, 689, 690, 696, 698, 699, 701, 702, 703, 704, 705, 707, 713, 717], "l": [14, 31, 37, 214, 295, 340, 504, 531, 536, 537, 538, 542, 556, 683, 684], "625": [14, 32, 270, 504, 531], "cross": [14, 15, 37, 38, 504, 505, 561, 562, 563, 672, 690, 691], "vif": [14, 37, 532], "det": [14, 37, 504, 550, 690], "axis1": [14, 16, 37, 39, 504, 506, 535, 556, 576], "axis2": [14, 37, 504, 535, 556], "eigh": [14, 37, 295, 340, 504, 536], "uplo": [14, 37, 504, 537, 538], "eigvalsh": [14, 37, 504], "inner": [14, 28, 37, 51, 89, 295, 340, 496, 504, 507, 536, 537, 542, 580, 581, 582, 681, 701], "inv": [14, 37, 504], "matmul": [14, 37, 481, 501, 504, 552, 687, 704, 705, 709], "transpose_a": [14, 37, 504, 542], "transpose_b": [14, 37, 504, 542], "adjoint_a": [14, 37, 504, 542], "adjoint_b": [14, 37, 504, 542], "detail": [14, 16, 20, 32, 37, 39, 43, 81, 295, 338, 353, 496, 512, 535, 542, 548, 552, 575, 614, 615, 616, 617, 672, 681, 683, 685, 687, 688, 689, 690, 696, 697, 698, 699, 702, 703, 704, 705, 706, 709, 711, 712, 713, 726, 730], "matrix_norm": [14, 37, 504], "ord": [14, 37, 504, 543, 559], "fro": [14, 37, 504, 543], "nuc": [14, 37, 504, 543], "matrix_pow": [14, 37, 504], "matrix_rank": [14, 37, 504], "hermitian": [14, 37, 295, 340, 341, 504, 536, 537, 538, 545, 552], "singular": [14, 37, 504, 543, 545, 548, 552, 553, 643, 691], "largest_singular_valu": [14, 37, 504, 545, 548], "full": [14, 36, 37, 112, 199, 207, 296, 346, 449, 457, 471, 478, 496, 497, 499, 501, 503, 504, 518, 520, 521, 522, 545, 549, 551, 552, 638, 642, 648, 672, 675, 676, 682, 683, 688, 691, 694, 695, 697, 698, 702, 704, 707, 709, 717, 722, 724, 730], "defici": [14, 504, 545], "matrix_transpos": [14, 37, 504, 711], "outer": [14, 37, 504, 507, 580, 581, 582, 681], "pinv": [14, 37, 504], "pseudo": [14, 37, 504, 548, 700], "0426": [14, 37, 548], "0964": [14, 37, 548], "0605": [14, 37, 548], "1368": [14, 37, 548], "qr": [14, 37, 504, 703], "decomposit": [14, 37, 504, 531, 537, 541, 549, 552, 681, 731], "orthonorm": [14, 37, 504, 549, 552], "lead": [14, 26, 37, 49, 194, 499, 504, 549, 552, 643, 675, 676, 690, 691, 693, 705, 717], "complet": [14, 26, 37, 504, 549, 642, 675, 681, 682, 683, 685, 686, 689, 690, 693, 695, 702, 703, 704, 707, 711, 712, 722], "namedtupl": [14, 20, 37, 43, 295, 297, 340, 371, 504, 512, 536, 537, 549, 550, 552, 614, 615, 616], "field": [14, 20, 37, 43, 295, 297, 340, 371, 504, 512, 536, 537, 549, 550, 552, 614, 615, 616, 672, 690, 716, 722, 730], "those": [14, 16, 26, 32, 37, 39, 69, 126, 187, 220, 369, 481, 496, 497, 499, 501, 504, 506, 508, 511, 549, 552, 564, 585, 612, 674, 681, 682, 683, 686, 689, 690, 691, 699, 701, 702, 703, 704, 707, 721], "slogdet": [14, 37, 504], "logabsdet": [14, 37, 504, 550], "natur": [14, 37, 190, 208, 209, 210, 211, 230, 276, 291, 499, 504, 550, 675, 686, 693, 695, 703, 716], "6931472": [14, 37, 504, 550], "098611": [14, 504, 550], "solv": [14, 37, 504, 672, 682, 685, 702, 710, 716, 726], "svd": [14, 37, 504, 553], "compute_uv": [14, 37, 504, 552], "full_matric": [14, 37, 504, 552], "svf": [14, 552], "vh": [14, 37, 504, 552], "significantli": [14, 37, 504, 552, 674, 690, 722], "faster": [14, 37, 504, 552, 680, 719, 726, 729], "reconstruct": [14, 20, 43, 297, 371, 504, 512, 552, 614, 616, 703], "close": [14, 192, 210, 230, 499, 504, 506, 552, 567, 681, 682, 683, 691, 694, 702, 707, 724], "reconstructed_x": [14, 504, 552], "svdval": [14, 37, 504], "tensordot": [14, 37, 504, 691], "tensorsolv": [14, 37, 504], "vander": [14, 37, 504], "vandermond": [14, 37, 504, 557], "vecdot": [14, 37, 504], "vector_norm": [14, 37, 504], "singleton": [14, 19, 22, 23, 37, 42, 45, 46, 504, 506, 511, 514, 515, 559, 567, 574, 610, 625, 626, 627, 628, 629, 630, 631, 632, 633, 709], "mathemat": [14, 37, 170, 175, 187, 192, 194, 210, 220, 494, 499, 504, 543, 559, 691, 702, 707, 724, 730], "manhattan": [14, 37, 504, 559], "euclidean": [14, 37, 504, 559], "7416575": [14, 37, 504, 559], "vector_to_skew_symmetric_matrix": [14, 37, 504], "_arraywithloss": [15, 48], "binary_cross_entropi": [15, 38, 505, 690], "pred": [15, 38, 296, 346, 505, 561, 562, 563, 672, 689, 698, 701], "from_logit": [15, 38, 505, 561], "pos_weight": [15, 38, 505, 561], "predict": [15, 38, 296, 346, 505, 561, 562, 563, 672], "amount": [15, 38, 162, 498, 505, 561, 562, 563, 682, 690, 692, 703], "smooth": [15, 38, 505, 561, 562, 563, 700], "No": [15, 38, 296, 346, 505, 561, 683, 690, 691, 724], "crossentropi": [15, 38, 505, 561], "entropi": [15, 38, 505, 561, 562, 563, 672], "357": [15, 38, 505, 561, 563], "223": [15, 38, 505, 561, 563], "cross_entropi": [15, 38, 505, 563, 672, 689, 698, 701], "3862944": [15, 505, 562], "sparse_cross_entropi": [15, 38, 505], "_arraywithmanipul": [16, 48], "x_min": [16, 39, 506, 564, 714], "x_max": [16, 39, 506, 564, 714], "constant_pad": [16, 39, 506], "before_1": [16, 39, 297, 366, 506, 566, 579], "after_1": [16, 39, 297, 366, 506, 566, 579], "before_n": [16, 39, 297, 366, 506, 566, 579], "after_n": [16, 39, 297, 366, 506, 566, 579], "permute_dim": [16, 39, 506], "repetit": [16, 39, 506, 570, 577, 707], "fit": [16, 39, 506, 570, 683, 702, 709, 720, 721, 724], "flat": [16, 26, 39, 302, 385, 446, 501, 506, 570, 654], "allowzero": [16, 39, 506, 571], "remain": [16, 19, 32, 39, 42, 170, 187, 188, 194, 202, 203, 220, 223, 229, 231, 294, 316, 317, 318, 336, 499, 506, 508, 511, 571, 589, 612, 683, 690, 693, 695, 705, 707, 717], "roll": [16, 39, 506, 689, 697], "shift": [16, 28, 39, 49, 84, 94, 179, 181, 258, 288, 496, 499, 506, 572, 682, 683, 693, 697], "restor": [16, 39, 506, 572, 696], "num_or_size_split": [16, 26, 39, 506, 573, 709], "with_remaind": [16, 26, 39, 506, 573], "mani": [16, 26, 39, 94, 258, 288, 496, 506, 573, 654, 672, 674, 675, 676, 681, 682, 683, 686, 687, 689, 690, 691, 692, 693, 694, 697, 698, 699, 701, 702, 703, 704, 707, 709, 711, 712, 717, 720, 724, 727, 730, 731], "squeez": [16, 39, 506, 724], "squeezabl": [16, 506, 574], "document": [16, 194, 481, 499, 501, 575, 677, 679, 680, 683, 688, 690, 691, 693, 701, 702, 703, 704, 712, 714], "swapax": [16, 39, 506], "axis0": [16, 39, 506, 576], "swap_ax": [16, 576], "tile": [16, 33, 39, 417, 506], "unpack": [16, 39, 506, 578, 703, 704], "zero_pad": [16, 39, 506], "_arraywithnorm": [17, 48], "layer_norm": [17, 40, 509], "normalized_idx": [17, 40, 509, 602], "new_std": [17, 40, 509, 602, 658], "learnabl": [17, 40, 507, 509, 582, 602, 658, 714], "deviat": [17, 18, 22, 40, 41, 45, 509, 510, 514, 602, 605, 629, 643, 655, 658, 676, 685], "0976": [17, 509, 602], "3452": [17, 509, 602], "2740": [17, 509, 602], "1047": [17, 509, 602], "5886": [17, 509, 602], "2732": [17, 509, 602], "7696": [17, 509, 602, 641], "7024": [17, 509, 602], "2518": [17, 509, 602], "826": [17, 509, 602], "178": [17, 509, 602], "981": [17, 509, 602], "831": [17, 509, 602], "421": [17, 509, 602], "_arraywithrandom": [18, 48], "multinomi": [18, 41, 301, 382, 510], "population_s": [18, 41, 510, 603], "num_sampl": [18, 41, 510, 603], "unnorm": [18, 41, 510, 603, 704], "popul": [18, 22, 26, 41, 45, 510, 514, 603, 629, 631, 691, 692, 701, 704, 709, 730], "draw": [18, 41, 301, 380, 382, 384, 510, 603, 605, 606, 641, 642, 643, 644, 648, 655, 681, 685, 703, 704], "ve": [18, 41, 510, 603, 681, 682, 683, 704, 707, 708, 711, 719], "highest": [18, 41, 510, 604, 691], "half": [18, 41, 69, 234, 496, 499, 510, 604, 606, 707], "235": [18, 605], "float16": [18, 29, 41, 82, 104, 106, 107, 112, 114, 268, 291, 496, 497, 504, 559, 605, 606, 641, 642, 691, 702, 704], "807": [18, 605], "random_uniform": [18, 41, 510, 692, 695, 704, 709, 713], "86": [18, 32, 41, 294, 306, 324, 395, 482, 502, 605, 606], "53": [18, 31, 36, 106, 162, 192, 335, 485, 487, 492, 497, 498, 502, 509, 602, 606], "_arraywithsearch": [19, 48], "select_last_index": [19, 42, 511, 609, 610], "occurr": [19, 297, 306, 371, 392, 511, 512, 609, 610, 614], "argmin": [19, 42, 511], "output_dtyp": [19, 42, 511, 610], "across": [19, 26, 33, 42, 48, 158, 159, 187, 194, 220, 238, 300, 376, 407, 428, 462, 498, 499, 501, 503, 508, 511, 526, 529, 589, 609, 610, 656, 681, 685, 689, 691, 693, 695, 697, 698, 700, 704, 707, 722, 724, 729], "argwher": [19, 42, 511], "nonzero": [19, 42, 168, 169, 170, 173, 176, 185, 187, 190, 192, 194, 220, 233, 238, 499, 511], "as_tupl": [19, 42, 511, 612], "fewer": [19, 42, 511, 612], "yield": [19, 256, 257, 288, 297, 366, 511, 613, 672, 690], "_arraywithset": [20, 48], "unique_al": [20, 43, 512], "by_valu": [20, 43, 512, 614], "inverse_indic": [20, 43, 297, 371, 512, 614, 616], "unique_count": [20, 43, 512], "unique_invers": [20, 43, 512], "unique_valu": [20, 43, 512], "admonit": [20, 617], "henc": [20, 170, 263, 291, 499, 506, 512, 567, 614, 615, 616, 617, 664, 682, 689, 690, 691, 701, 704], "dask": [20, 512, 614, 615, 616, 617, 675], "difficult": [20, 512, 614, 615, 616, 617, 683, 685, 691, 704, 717], "know": [20, 512, 614, 615, 616, 617, 676, 679, 683, 699, 703, 704, 705, 707, 725], "omit": [20, 230, 499, 512, 614, 615, 616, 617, 697, 701, 702], "x_i": [20, 22, 31, 167, 168, 169, 172, 173, 174, 176, 178, 183, 184, 185, 190, 192, 193, 200, 201, 202, 203, 204, 208, 209, 210, 211, 215, 222, 227, 230, 231, 232, 233, 234, 235, 237, 238, 240, 263, 281, 291, 499, 512, 514, 614, 615, 616, 617, 625, 626, 627, 629, 630, 631, 655, 694], "x_j": [20, 512, 614, 615, 616, 617], "impli": [20, 512, 614, 615, 616, 617, 704], "behavior": [20, 187, 194, 220, 225, 229, 499, 512, 614, 615, 616, 617, 681, 688, 689, 690, 691, 698, 701, 702, 703, 704, 707, 709, 717, 721], "could": [20, 512, 614, 615, 616, 617, 675, 676, 681, 682, 683, 685, 690, 691, 693, 699, 701, 702, 703, 704, 709, 711, 712, 713, 724, 729, 730], "typeerror": [20, 43, 512, 617, 711], "_arraywithsort": [21, 48], "argsort": [21, 44, 513, 620, 702], "descend": [21, 44, 504, 513, 552, 553, 618, 621], "ascend": [21, 44, 304, 387, 513, 618, 620], "stabil": [21, 44, 460, 461, 501, 513, 618, 621, 691, 700, 707], "maintain": [21, 44, 513, 618, 621, 674, 683, 685, 696, 701, 703, 704, 723], "msort": [21, 44, 513], "searchsort": [21, 44, 513, 642], "side": [21, 44, 272, 291, 513, 620, 656, 682, 683, 688], "sorter": [21, 44, 513, 620], "ret_dtyp": [21, 44, 513, 620], "_arraywithstatist": [22, 48], "cumprod": [22, 45, 514, 702, 714], "120": [22, 45, 49, 504, 547, 622, 672], "cumsum": [22, 45, 514, 691], "einsum": [22, 45, 514], "equat": [22, 32, 45, 251, 288, 504, 514, 551, 624, 690, 724], "operand": [22, 32, 36, 167, 168, 169, 170, 172, 173, 174, 175, 176, 182, 183, 184, 185, 187, 188, 190, 192, 193, 194, 201, 202, 203, 208, 209, 210, 211, 212, 220, 223, 225, 229, 230, 231, 232, 233, 234, 237, 238, 240, 281, 284, 291, 292, 294, 335, 499, 504, 514, 550, 556, 624, 625, 627, 628, 630, 686, 689, 694, 702], "describ": [22, 32, 170, 187, 188, 220, 223, 225, 301, 304, 384, 387, 499, 503, 514, 529, 624, 628, 630, 679, 681, 683, 688, 690, 701, 702, 704, 709, 714, 724], "contract": [22, 504, 514, 554, 624], "seq": [22, 514, 624, 641], "consist": [22, 26, 187, 194, 220, 295, 340, 499, 504, 514, 536, 537, 624, 657, 674, 685, 686, 690, 691, 696, 701, 709, 725], "ii": [22, 45, 514, 624, 683], "jk": [22, 514, 624], "ik": [22, 514, 624], "66": [22, 32, 33, 34, 182, 294, 324, 415, 416, 486, 499, 501, 502, 504, 514, 547, 624], "104": [22, 504, 514, 547, 624], "126": [22, 55, 226, 493, 499, 504, 514, 544, 624], "510": [22, 514, 624], "special": [22, 37, 48, 49, 167, 168, 169, 170, 172, 173, 174, 175, 176, 182, 183, 184, 185, 187, 188, 190, 192, 193, 194, 201, 202, 203, 208, 209, 210, 211, 212, 215, 220, 223, 225, 229, 230, 231, 232, 233, 234, 237, 238, 240, 281, 291, 499, 504, 514, 550, 556, 625, 626, 627, 628, 629, 630, 631, 641, 642, 643, 644, 648, 655, 681, 685, 686, 688, 690, 693, 694, 695, 696, 697, 701, 703, 704, 705, 707, 724, 725, 726], "arithmet": [22, 45, 181, 187, 220, 499, 514, 626, 702], "propag": [22, 181, 499, 514, 625, 626, 627, 629, 630, 631, 700], "04999995": [22, 626], "freedom": [22, 45, 514, 629, 631, 687], "adjust": [22, 45, 514, 629, 631, 664], "constitut": [22, 45, 514, 629, 631, 698, 709, 725], "commonli": [22, 45, 514, 629, 631, 695, 698, 700], "8164966": [22, 514, 629], "var": [22, 45, 47, 66, 67, 68, 495, 507, 514, 580, 581, 661, 682, 693, 709], "6666665": [22, 631, 712], "667": [22, 33, 187, 411, 460, 499, 501, 631], "_arraywithutil": [23, 48], "AND": [23, 46, 177, 188, 214, 499, 515, 632], "invalid": [23, 46, 504, 506, 515, 558, 567, 632, 633, 641, 682, 691], "OR": [23, 46, 180, 216, 223, 499, 515, 633, 682, 683, 700], "_wrap_funct": [24, 47, 688, 698, 699], "function_nam": [24, 47, 681, 705], "new_funct": [24, 47, 688], "add_ivy_array_instance_method": 24, "cl": [24, 47], "shown": [24, 26, 47, 204, 227, 263, 291, 499, 681, 682, 683, 685, 688, 690, 691, 693, 695, 697, 702, 703, 704, 705, 706, 709, 711, 717], "toi": [24, 47], "arrayexampl": 24, "hasattr": [24, 47], "_containerwithactiv": [25, 49], "dict_in": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "queue": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 455, 476, 501, 706, 712], "queue_load_s": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "container_combine_method": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "list_join": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "queue_timeout": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 455, 476, 501, 706], "print_limit": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "key_length_limit": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "print_ind": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "print_line_spac": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "ivyh": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "default_key_color": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "green": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 671, 681, 682, 683], "keyword_color_dict": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "rebuild_child_contain": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "types_to_iteratively_nest": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "alphabetical_kei": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49], "dynamic_backend": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 657, 706], "containerbas": [25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 689], "static": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 51, 52, 77, 313, 326, 331, 368, 375, 463, 496, 547, 653, 657, 681, 693, 694, 698, 699, 702, 706, 717, 723, 724, 725], "_static_gelu": 25, "exact": [25, 26, 55, 294, 296, 328, 333, 346, 512, 614, 616, 643, 682, 683, 685, 693, 709], "formul": [25, 55], "chain": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 55, 56, 57, 58, 59, 60, 61, 62, 63, 82, 84, 89, 91, 96, 100, 102, 115, 119, 120, 127, 161, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 248, 249, 250, 261, 263, 265, 272, 273, 279, 281, 282, 283, 284, 316, 317, 318, 353, 368, 370, 374, 376, 377, 378, 379, 381, 394, 395, 396, 397, 404, 407, 408, 410, 411, 415, 416, 417, 419, 422, 423, 426, 428, 430, 431, 432, 434, 435, 438, 446, 447, 460, 461, 463, 465, 467, 468, 480, 486, 491, 507, 508, 517, 518, 519, 520, 526, 527, 530, 531, 532, 537, 538, 540, 542, 543, 545, 547, 549, 550, 556, 561, 562, 563, 564, 568, 571, 572, 573, 574, 575, 578, 579, 580, 581, 585, 596, 603, 604, 605, 606, 608, 611, 614, 615, 616, 617, 618, 622, 623, 626, 628, 629, 631, 632, 633, 654, 660, 686, 689, 700, 702, 713, 714, 717, 724], "skip": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 55, 56, 57, 58, 59, 60, 61, 62, 63, 82, 84, 89, 91, 96, 100, 102, 127, 161, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 248, 249, 250, 261, 262, 263, 265, 272, 273, 279, 281, 282, 283, 284, 316, 317, 318, 349, 350, 351, 353, 368, 369, 370, 374, 376, 377, 378, 379, 381, 394, 395, 396, 397, 404, 407, 408, 410, 411, 415, 416, 417, 419, 422, 423, 426, 428, 430, 431, 432, 434, 435, 438, 446, 447, 460, 461, 463, 465, 467, 468, 480, 486, 491, 508, 517, 518, 519, 520, 526, 527, 530, 531, 532, 537, 538, 540, 542, 543, 545, 547, 549, 550, 556, 561, 562, 563, 564, 568, 571, 572, 573, 574, 575, 578, 579, 596, 603, 604, 605, 606, 608, 611, 614, 615, 616, 617, 618, 622, 623, 626, 628, 629, 631, 632, 633, 642, 688, 698, 704], "prune": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 55, 56, 57, 58, 59, 60, 61, 62, 63, 82, 84, 89, 91, 96, 100, 102, 115, 119, 120, 127, 161, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 246, 247, 248, 249, 250, 261, 262, 263, 265, 272, 273, 279, 281, 282, 283, 284, 316, 317, 318, 349, 350, 351, 353, 368, 369, 370, 374, 376, 377, 378, 379, 381, 394, 395, 396, 397, 404, 407, 408, 410, 411, 415, 416, 417, 419, 422, 423, 426, 428, 430, 431, 432, 434, 435, 438, 446, 447, 460, 461, 463, 465, 467, 468, 480, 486, 491, 508, 517, 518, 519, 520, 526, 527, 530, 531, 532, 537, 538, 540, 542, 543, 545, 547, 549, 550, 556, 561, 562, 563, 564, 568, 571, 572, 573, 574, 575, 578, 579, 596, 597, 598, 599, 603, 604, 605, 606, 608, 611, 614, 615, 616, 617, 618, 622, 623, 626, 628, 629, 631, 632, 633, 639, 642, 690], "static_gelu": 25, "185": 25, "046": 25, "_static_hardswish": 25, "_static_leaky_relu": 25, "static_leaky_relu": 25, "38999999": [25, 32, 57, 242], "_static_log_softmax": 25, "static_log_softmax": 25, "371": [25, 58], "_static_mish": 25, "static_mish": 25, "30883577": [25, 59, 493], "28903052": [25, 59, 493], "10714479": [25, 59, 493], "_static_relu": 25, "static_relu": 25, "40000001": [25, 48, 49, 57, 60, 242, 286, 493, 512, 615], "_static_sigmoid": 25, "static_sigmoid": 25, "2689414": [25, 61, 62], "7310586": [25, 61, 62], "88079703": [25, 61], "62245935": [25, 61], "4750208": [25, 61], "_static_softmax": 25, "static_softmax": 25, "72844321": [25, 62], "19852395": [25, 62], "07303288": [25, 62], "_static_softplu": 25, "revert": [25, 63, 493], "static_softplu": 25, "53499615": 25, "42036411": 25, "948": [25, 63], "166": [25, 55, 493], "159": [25, 55, 493, 503, 527], "__getitem__": [26, 689], "slice": [26, 33, 94, 258, 288, 297, 367, 369, 422, 423, 425, 450, 496, 501, 508, 592, 724], "dictionari": [26, 43, 49, 159, 484, 498, 502, 617, 638, 686, 690, 691, 698, 702, 712, 717], "multiprocess": [26, 49, 501, 712, 717], "asynchron": [26, 49, 724], "wait": [26, 49, 455, 501, 672, 681, 683, 690, 702], "arriv": [26, 49, 455, 501, 707], "cont_list_join": [26, 49], "timeout": [26, 49, 455, 476, 501, 706], "limit": [26, 49, 112, 115, 410, 411, 497, 501, 506, 564, 641, 643, 644, 655, 661, 672, 682, 683, 688, 690, 693, 695, 702, 704, 707, 712, 717, 723, 724, 725], "whitespac": [26, 49], "indent": [26, 49, 712], "newlin": [26, 49, 694], "color": [26, 49, 671], "termin": [26, 49, 682, 683, 689, 696, 709, 712], "termcolor": [26, 49], "rebuild": [26, 49, 678], "constructor": [26, 49, 406, 501, 638, 653, 660, 691, 692, 711], "kept": [26, 49, 507, 580, 581, 683, 701, 705], "structur": [26, 29, 49, 112, 115, 412, 501, 508, 596, 654, 672, 681, 683, 686, 689, 698, 703, 704, 705, 712, 713, 723, 724], "alphabet": [26, 49], "__setitem__": [26, 686, 689, 711], "_cont_at_key_chains_input_as_dict": 26, "current_chain": 26, "ignore_key_error": 26, "_cont_at_key_chains_input_as_seq": 26, "_cont_call_static_method_with_flexible_arg": 26, "static_method": 26, "kw": 26, "self_idx": 26, "_cont_concat_unifi": 26, "_cont_get_dev": 26, "_cont_get_shap": 26, "properti": [26, 48, 51, 657, 659, 685, 689, 693, 698, 703, 704, 711, 712, 713, 730], "_cont_ivi": 26, "_cont_mean_unifi": 26, "_1": 26, "_cont_prune_key_chains_input_as_dict": 26, "return_cont": 26, "_cont_prune_key_chains_input_as_seq": 26, "_cont_slice_kei": 26, "key_slic": 26, "_cont_sum_unifi": 26, "_get_queue_item": 26, "cont_all_fals": 26, "assert_is_bool": 26, "assert": [26, 408, 501, 648, 684, 685, 698, 701, 702, 703, 704, 705, 711, 712], "cont_all_key_chain": 26, "include_empti": 26, "cont_all_tru": [26, 689, 712], "cont_as_bool": 26, "cont_assert_contains_sub_contain": 26, "sub_cont": 26, "screen": [26, 681, 682, 712], "cont_assert_contains_sub_structur": 26, "check_shap": [26, 661], "cont_assert_ident": 26, "check_typ": 26, "same_arrai": [26, 712], "arrays_equ": 26, "ident": [26, 80, 148, 425, 450, 496, 498, 501, 504, 508, 544, 596, 674, 676, 689, 698, 699, 702, 703, 705, 707, 711, 712, 717, 719], "cont_assert_identical_structur": 26, "cont_at_key_chain": 26, "ignore_non": 26, "cont_at_kei": 26, "substr": 26, "try": [26, 469, 501, 655, 664, 672, 673, 675, 676, 681, 682, 683, 685, 686, 689, 690, 691, 695, 701, 703, 709, 711, 717], "cont_combin": 26, "prioriti": [26, 664, 683, 701], "most": [26, 28, 89, 295, 340, 454, 475, 496, 501, 504, 536, 537, 669, 672, 675, 680, 681, 682, 686, 689, 690, 691, 692, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 709, 711, 712, 713, 717, 724, 725, 727, 728, 730, 731], "duplic": [26, 508, 585, 687, 694, 699, 700, 703, 713, 730], "configur": [26, 159, 498, 508, 596, 678, 682, 683, 688, 690, 691, 696], "container_rightmost": 26, "cont_common_key_chain": [26, 689], "cont_config": 26, "cont_contains_sub_contain": 26, "cont_contains_sub_structur": 26, "cont_copi": [26, 712], "cont_create_if_abs": 26, "noth": [26, 707, 730], "cont_cutoff_at_depth": 26, "depth_cutoff": 26, "summari": [26, 116, 412, 427, 497, 501, 682, 683, 704], "cont_cutoff_at_height": 26, "height_cutoff": 26, "deep": [26, 415, 501, 672, 674, 677, 679, 680, 681, 683, 685, 688, 689, 691, 696, 700, 703, 708, 711, 712, 722, 724, 727, 728, 730, 731], "intern": [26, 50, 51, 52, 508, 583, 593, 594, 655, 656, 657, 658, 660, 686, 689, 692, 694, 701, 703, 704, 706], "cont_dev": 26, "belong": [26, 681, 685, 713], "cont_dev_str": 26, "cont_diff": [26, 689, 712], "diff_kei": 26, "detect_key_diff": 26, "detect_value_diff": 26, "detect_shape_diff": 26, "share": [26, 133, 497, 641, 642, 672, 675, 687, 689, 693, 698, 700, 702, 703, 704, 707, 709, 722, 723, 730], "among": [26, 676, 690, 704, 707, 724], "container0": 26, "cont_duplicate_array_keychain": 26, "cont_find_sub_contain": 26, "sub_cont_to_find": 26, "exsit": 26, "cont_find_sub_structur": 26, "sub_struc_to_find": 26, "cont_flatten_key_chain": [26, 712], "__": [26, 693, 712], "above_height": [26, 712], "below_depth": [26, 712], "cont_format_key_chain": 26, "format_fn": 26, "cont_from_disk_as_hdf5": [26, 712], "h5_obj_or_filepath": 26, "slice_obj": 26, "load": [26, 515, 657, 672, 704, 717, 723, 730], "disk": [26, 657, 712, 723], "h5py": 26, "hdf5": [26, 657, 712], "filepath": [26, 515, 634, 635, 683, 685], "h5": 26, "cont_from_disk_as_json": [26, 712], "json_filepath": 26, "json": [26, 678, 682, 712], "cont_from_disk_as_pickl": [26, 712], "pickle_filepath": 26, "pickl": [26, 657, 689, 712], "cont_from_flat_list": 26, "flat_list": 26, "hierarchi": [26, 681, 712, 720, 730], "cont_handle_inplac": 26, "prime": [26, 691], "being": [26, 47, 48, 51, 69, 297, 366, 409, 455, 496, 501, 504, 538, 638, 644, 654, 655, 672, 675, 676, 682, 683, 685, 686, 687, 689, 691, 692, 693, 697, 699, 701, 702, 703, 704, 707, 709, 712, 716, 717, 720, 722, 723, 724, 725, 730, 731], "overwritten": [26, 686, 687], "cont_has_kei": 26, "query_kei": 26, "somewher": [26, 690], "cont_has_key_chain": 26, "cont_ident": [26, 712], "cont_identical_array_shap": 26, "regardless": [26, 676, 677, 691, 695, 711, 714], "cont_identical_config": 26, "cont_identical_structur": 26, "cont_if_exist": 26, "cont_inplace_upd": 26, "cont_ivi": 26, "cont_key_chains_contain": 26, "sub_str": 26, "cont_list_stack": [26, 712], "cont_load": 26, "cont_map": [26, 689, 712], "func": [26, 160, 285, 293, 409, 481, 484, 485, 487, 492, 498, 501, 502, 508, 596, 638, 681, 685, 686, 693, 695, 700, 701], "cont_map_sub_cont": 26, "include_self": 26, "possibi": 26, "cont_max_depth": 26, "cont_multi_map": [26, 689], "map_nest": 26, "assert_ident": 26, "leftmost": [26, 508, 596], "cont_multi_map_in_funct": [26, 689], "cont_num_arrai": 26, "cont_overwrite_at_key_chain": 26, "target_dict": 26, "return_dict": 26, "cont_prune_empti": 26, "keep_non": 26, "cont_prune_key_chain": 26, "key1": [26, 672, 713], "key2": [26, 672], "key3": 26, "cont_prune_key_from_key_chain": 26, "cont_prune_kei": 26, "cont_prune_keys_from_key_chain": 26, "cont_reduc": 26, "cont_remove_key_length_limit": 26, "cont_remove_print_limit": 26, "cont_reshape_lik": 26, "leading_shap": 26, "cont_restructur": 26, "keep_orig": 26, "old": [26, 682, 687, 701], "cont_restructure_key_chain": 26, "keychain_map": 26, "cont_sav": 26, "cont_set_at_key_chain": 26, "cont_set_at_kei": 26, "cont_shap": [26, 503, 521], "attribut": [26, 112, 113, 114, 115, 146, 147, 155, 420, 421, 497, 498, 501, 639, 688, 689, 691, 694, 695, 698, 699, 701, 702, 707, 710, 711, 712, 713], "cont_show": 26, "cont_show_sub_contain": 26, "sub_cont_or_keychain": 26, "cont_size_ordered_arrai": 26, "keychain": [26, 32, 262, 349, 350, 351, 369], "cont_slice_kei": 26, "all_depth": 26, "cont_slice_via_kei": 26, "slice_kei": 26, "cont_sort_by_kei": 26, "cont_structural_diff": 26, "cont_to_dict": 26, "cont_to_disk_as_hdf5": [26, 712], "starting_index": 26, "max_batch_s": 26, "later": [26, 409, 501, 681, 701, 704, 724], "cont_to_disk_as_json": [26, 712], "cont_to_disk_as_pickl": [26, 712], "cont_to_flat_list": 26, "cont_to_iter": [26, 689], "leaf_keys_onli": 26, "cont_to_iterator_kei": 26, "cont_to_iterator_valu": 26, "cont_to_json": 26, "cont_to_nested_list": 26, "cont_to_raw": 26, "cont_trim_kei": 26, "max_length": 26, "trim": 26, "cont_try_kc": 26, "cont_unifi": 26, "unifi": [26, 160, 498, 673, 675, 684, 685, 686, 691, 695, 699, 700, 702, 707, 709, 717, 720, 721, 722, 724, 728, 731], "concatten": [26, 160, 498], "cont_unstack_cont": 26, "dim_siz": 26, "cont_update_config": 26, "cont_with_default_key_color": 26, "cont_with_entries_as_list": 26, "cont_with_ivy_backend": 26, "ivy_backend": [26, 703], "cont_with_key_length_limit": [26, 712], "cont_with_print_ind": [26, 712], "cont_with_print_limit": [26, 712], "cont_with_print_line_spac": 26, "h5_file_s": 26, "shuffle_h5_fil": 26, "seed_valu": [26, 510, 607], "split_cont": 26, "constitu": [26, 714], "_is_json": 26, "_repr": 26, "_containerwithconvers": [27, 49], "_static_to_ivi": 27, "_static_to_n": 27, "_containerwithcr": [28, 49], "_static_arang": 28, "_static_asarrai": 28, "_static_copy_arrai": 28, "_static_empti": 28, "_static_empty_lik": 28, "_static_ey": 28, "n_row": [28, 32, 80, 94, 258, 288, 496], "n_col": [28, 32, 80, 94, 258, 288, 496], "_static_from_dlpack": 28, "_static_ful": 28, "_static_full_lik": 28, "static_full_lik": 28, "2324": [28, 84, 496], "234": [28, 31, 84, 106, 189, 240, 496, 497, 499, 503, 527, 641], "123": [28, 29, 84, 115, 418, 496, 501, 704], "_static_linspac": 28, "_static_logspac": 28, "static_logspac": 28, "15443469": [28, 86], "64158883": [28, 86], "_static_meshgrid": 28, "_static_native_arrai": 28, "_static_one_hot": 28, "static_one_hot": 28, "_static_on": 28, "_static_ones_lik": 28, "_static_tril": 28, "_static_triu": 28, "_static_zero": 28, "_static_zeros_lik": 28, "frombuff": [28, 496], "expos": [28, 82, 412, 496, 501, 672, 674, 690, 709, 713], "interfac": [28, 82, 496, 675, 711, 714, 717, 719, 720, 721, 722, 723, 724, 728, 731], "x00": [28, 82, 496], "xf0": [28, 82, 496], "static_frombuff": [28, 82], "x01": [28, 82, 496], "x02": [28, 82, 496], "x03": [28, 82, 496], "x04": [28, 82, 496], "x05": [28, 82], "5443469": [28, 86, 496], "static_triu_indic": 28, "triu_indic": [28, 496], "_containerwithdatatyp": [29, 49], "_static_astyp": 29, "718": [29, 31, 99, 216, 497], "618": [29, 31, 99, 216, 497], "static_astyp": 29, "_static_broadcast_arrai": 29, "static_broadcast_arrai": 29, "_static_broadcast_to": 29, "static_broadcast_to": 29, "_static_can_cast": 29, "from_": [29, 102, 497], "static_can_cast": 29, "_static_default_complex_dtyp": 29, "complex_dtyp": [29, 105, 128, 497], "_static_default_float_dtyp": 29, "float_dtyp": [29, 107, 130, 497], "_static_dtyp": 29, "_static_finfo": 29, "inquir": [29, 112, 115], "static_finfo": 29, "55040e": [29, 112, 497], "7976931348623157e": [29, 112, 497], "308": [29, 112, 497, 641, 704], "_static_function_supported_dtyp": 29, "_static_function_unsupported_dtyp": 29, "_static_iinfo": 29, "1800": [29, 115, 497], "1084": 29, "40000": 29, "static_iinfo": 29, "2147483648": [29, 115, 497], "2147483647": [29, 115, 497], "_static_is_bool_dtyp": 29, "dtype_in": [29, 97, 98, 111, 117, 118, 119, 120, 121, 122, 123, 124, 139, 497], "_static_is_complex_dtyp": 29, "is_complex_dtyp": [29, 497, 705], "roughli": [29, 682, 685, 727], "static_is_complex_dtyp": 29, "complex64": [29, 105, 119, 128, 134, 200, 227, 497, 499, 504, 550, 552, 553, 642, 691], "_static_is_float_dtyp": 29, "static_is_float_dtyp": 29, "_static_is_int_dtyp": 29, "_static_is_uint_dtyp": 29, "_static_result_typ": 29, "static_result_typ": 29, "broadcats": [29, 100], "_containerwithdevic": [30, 49], "_static_dev": 30, "static_dev": 30, "_static_to_devic": 30, "static_to_devic": 30, "contaion": [30, 144], "_containerwithelementwis": [31, 49], "_static_ab": 31, "static_ab": 31, "_static_aco": 31, "static_aco": 31, "_static_acosh": 31, "static_acosh": 31, "_static_add": 31, "static_add": [31, 52, 689, 693, 694], "_static_asin": 31, "static_asin": 31, "524": [31, 172, 499], "412": [31, 36, 172, 499], "201": [31, 32, 172, 314, 499], "_static_asinh": 31, "static_asinh": 31, "_static_atan": 31, "static_atan": 31, "_static_atan2": 31, "static_atan2": 31, "915": [31, 175, 499], "29": [31, 33, 34, 36, 41, 175, 306, 335, 395, 415, 416, 484, 488, 499, 501, 502, 604, 605, 606], "983": [31, 175, 499], "978": [31, 175, 499], "696": [31, 41, 175, 499, 605], "993": [31, 175, 499], "_static_atanh": 31, "static_atanh": 31, "203": [31, 40, 176, 509, 602], "_static_bitwise_and": 31, "static_bitwise_and": 31, "_static_bitwise_invert": 31, "static_bitwise_invert": 31, "_static_bitwise_left_shift": 31, "_static_bitwise_or": 31, "static_bitwise_or": 31, "_static_bitwise_right_shift": 31, "static_bitwise_right_shift": 31, "_static_bitwise_xor": 31, "static_bitwise_xor": 31, "_static_ceil": 31, "static_ceil": 31, "_static_co": 31, "static_co": 31, "_static_cosh": 31, "static_cosh": 31, "34": [31, 32, 33, 41, 115, 182, 185, 212, 233, 294, 306, 335, 401, 409, 415, 416, 497, 499, 501, 504, 510, 544, 605, 606], "_static_deg2rad": 31, "static_deg2rad": 31, "0262": [31, 186, 226, 499], "873": [31, 186, 226, 499], "_static_divid": 31, "static_divid": 31, "_static_equ": 31, "static_equ": 31, "_static_erf": 31, "static_erf": 31, "27632612": [31, 189], "934008": [31, 189], "99999928": [31, 189], "91903949": [31, 189], "_static_exp": 31, "static_exp": 31, "59814835": [31, 190, 499], "4131622": [31, 190], "_static_expm1": 31, "thefunct": [31, 189], "areal": 31, "static_expm1": 31, "71828175": [31, 190, 499], "38905621": [31, 190, 499], "59815216": 31, "_static_floor": 31, "static_floor": 31, "_static_floor_divid": 31, "static_floor_divid": 31, "_static_great": 31, "static_great": 31, "_static_greater_equ": 31, "static_greater_equ": 31, "_static_isfinit": 31, "999999999999": [31, 201, 499], "static_isfinit": 31, "_static_isinf": 31, "static_isinf": 31, "_static_isnan": 31, "static_isnan": 31, "_static_isr": 31, "0j": [31, 32, 90, 91, 168, 169, 170, 173, 176, 185, 190, 192, 204, 208, 210, 227, 231, 233, 234, 238, 263, 291, 496, 499, 504, 550], "23j": [31, 32], "9j": [31, 32], "static_isr": 31, "_static_lcm": 31, "1080": [31, 205], "1550": [31, 205], "130": [31, 205], "_static_less": 31, "static_less": 31, "_static_less_equ": 31, "static_less_equ": 31, "_static_log": 31, "static_log": 31, "_static_log10": 31, "static_log10": 31, "898": [31, 209, 499], "0414": [31, 209, 499], "_static_log1p": 31, "static_log1p": 31, "_static_log2": 31, "_static_logaddexp": 31, "static_logaddexp": 31, "_static_logical_and": 31, "static_logical_and": 31, "_static_logical_not": 31, "static_logical_not": 31, "_static_logical_or": 31, "static_logical_or": 31, "_static_logical_xor": 31, "static_logical_xor": 31, "_static_maximum": 31, "static_maximum": 31, "_static_minimum": 31, "static_minimum": 31, "_static_multipli": 31, "static_multipli": 31, "_static_neg": 31, "static_neg": 31, "_static_not_equ": 31, "static_not_equ": 31, "_static_posit": 31, "static_posit": 31, "_static_pow": 31, "static_pow": 31, "_static_rad2deg": 31, "static_rad2deg": 31, "5160": 31, "10300": [31, 226, 499], "15500": 31, "20600": 31, "2860": [31, 226], "_static_reciproc": 31, "recirpoc": [31, 228], "static_reciproc": 31, "_static_remaind": 31, "static_remaind": 31, "_static_round": 31, "thevfunct": 31, "300": [31, 33, 230, 294, 316, 317, 423, 447, 499, 501, 504, 540, 704], "527": [31, 230, 499], "static_round": 31, "301": [31, 230, 499], "_static_sign": 31, "static_sign": 31, "_static_sin": 31, "static_sin": 31, "757": [31, 232, 499], "959": [31, 192, 232, 499], "279": [31, 232, 294, 314, 324, 410, 499, 501], "_static_sinh": 31, "static_sinh": 31, "835": [31, 233], "347": [31, 233], "721": [31, 233], "_static_sqrt": 31, "93": [31, 33, 41, 145, 234, 415, 416, 498, 501, 605, 606], "static_sqrt": 31, "_static_squar": 31, "static_squar": 31, "_static_subtract": 31, "static_subtract": 31, "_static_tan": 31, "static_tan": [31, 689, 693], "143": [31, 49, 237, 499, 693], "_static_tanh": 31, "static_tanh": 31, "995": [31, 238, 499], "9999": 31, "_static_trapz": 31, "static_trapz": 31, "_static_trunc": 31, "static_trunc": 31, "_static_trunc_divid": 31, "75j": [31, 171, 200], "01317055": [31, 171], "05634501": [31, 171], "115": [31, 171, 186, 226, 294, 314, 499], "3461759": [31, 171], "524111": [31, 171], "644": [31, 172, 499, 713], "305": [31, 36, 172, 499, 527], "351": [31, 186, 226, 499], "00613": [31, 186], "0154": [31, 186], "403": [31, 190], "428772": [31, 190], "649": [31, 192], "220": [31, 192], "865": [31, 192], "metho": [31, 199, 211], "7j": [31, 32, 204, 227, 263, 291, 499], "956": [31, 210], "08746284": [31, 213], "32192809": [31, 213], "nuner": [31, 220], "65": [31, 34, 41, 181, 220, 294, 314, 430, 482, 499, 501, 502, 504, 514, 547, 605, 606, 624, 690], "000": [31, 221, 641, 690], "413": [31, 226], "took": [31, 227], "335": [31, 32, 227, 263], "345j": [31, 32, 227, 263], "static_angl": 31, "static_exp2": 31, "static_fmin": 31, "static_gcd": 31, "static_imag": 31, "static_logaddexp2": 31, "static_nan_to_num": 31, "static_r": 31, "_containerwithactivationexperiment": [32, 49], "_static_elu": 32, "static_elu": 32, "_static_silu": 32, "static_silu": 32, "27777028": [32, 248], "23947507": [32, 248], "0900332": [32, 248], "contan": [32, 243], "19722462": [32, 243], "84729779": [32, 243], "31326163": [32, 244], "46328258": [32, 244], "51301527": [32, 244], "79813886": [32, 244], "22856998": [32, 247], "42028043": [32, 247], "31868932": [32, 247], "static_logit": 32, "static_logsigmoid": 32, "34115386": 32, "64439666": 32, "24115384": 32, "55435526": 32, "07888974": 32, "00741899": 32, "26328245": 32, "00012302": 32, "static_prelu": 32, "static_relu6": 32, "static_selu": 32, "static_thresholded_relu": 32, "_containerwithconversionexperiment": [32, 49], "_containerwithcreationexperiment": [32, 49], "hamming_window": [32, 288], "period": [32, 233, 237, 251, 252, 254, 255, 288, 294, 327, 499, 683, 705], "coeffici": [32, 251, 288, 504, 551], "ham": [32, 251, 288], "8000": [32, 251, 288], "2000": [32, 251, 288, 672], "4180": [32, 251], "8180": [32, 251], "hann_window": [32, 288], "hann": [32, 252, 288], "7500": [32, 252], "3455": [32, 252], "9045": [32, 252], "kaiser_bessel_derived_window": [32, 288], "suitabl": [32, 254, 255, 288, 513, 620, 643, 682, 683, 689, 705, 724], "spectral": [32, 254, 255, 288], "analysi": [32, 254, 255, 288, 724, 725], "design": [32, 194, 254, 255, 288, 499, 672, 674, 675, 684, 688, 690, 691, 701, 702, 703, 707, 709, 711, 717, 720, 722, 724, 727, 728, 729], "kaiser": [32, 254, 255, 288], "70710677": [32, 254, 378, 379], "18493208": [32, 254, 288], "9827513": [32, 254, 288], "kaiser_window": [32, 288], "static_kaiser_window": [32, 255], "2049": [32, 255], "8712": [32, 255], "0367": [32, 255, 288], "7753": [32, 255], "static_eye_lik": 32, "static_hamming_window": 32, "static_hann_window": 32, "window_length": [32, 251, 254, 255, 260, 288], "static_hann": 32, "static_kaiser_bessel_derived_window": 32, "static_tril_indic": 32, "static_unsorted_segment_min": 32, "static_vorbis_window": 32, "vorbis_window": [32, 288], "vorbi": [32, 260, 288], "38268343": [32, 260], "92387953": [32, 260], "14943586": [32, 260, 288], "51644717": [32, 260], "85631905": [32, 260], "98877142": [32, 260], "tril_indic": [32, 288], "_containerwithdata_typeexperiment": [32, 49], "_containerwithdeviceexperiment": [32, 49], "_containerwithelementwiseexperiment": [32, 49], "0003": [32, 261, 504, 540, 641, 644], "0006": [32, 261, 283], "2345j": [32, 263], "mantissa": [32, 270, 291], "frist": [32, 271, 291], "coord": [32, 271], "6055": [32, 272], "160": [32, 274], "10240": [32, 274], "60000038": [32, 275, 291], "0707": [32, 281, 291], "0579": [32, 281, 291], "static_allclos": 32, "static_binar": 32, "static_conj": 32, "static_copysign": 32, "static_count_nonzero": 32, "static_diff": 32, "static_fix": 32, "static_float_pow": 32, "static_fmax": 32, "static_fmod": 32, "static_frexp": 32, "static_gradi": 32, "static_hypot": 32, "static_isclos": 32, "static_ldexp": 32, "static_lerp": 32, "90000057": [32, 275, 291], "80000019": [32, 275, 291], "70000076": [32, 275, 291], "55000019": [32, 275, 291], "05000019": [32, 275, 291], "static_modf": 32, "static_nansum": 32, "static_nextaft": 32, "static_signbit": 32, "static_sinc": 32, "636": 32, "090": 32, "070": 32, "057": 32, "static_xlogi": 32, "static_zeta": 32, "0244": [32, 283], "_containerwithgeneralexperiment": [32, 49], "_static_reduc": 32, "static_reduc": 32, "_containerwithgradientsexperiment": [32, 49], "_containerwithimageexperiment": [32, 49], "_containerwithlayersexperiment": [32, 49], "_static_fft": 32, "static_fft": 32, "673": [32, 314], "0507": [32, 314], "79711437": [32, 324], "94867325": [32, 324], "74089146": [32, 324], "25980937": [32, 324], "64958102": [32, 324], "2442648": [32, 324], "static_adaptive_avg_pool1d": 32, "static_adaptive_avg_pool2d": 32, "static_avg_pool1d": 32, "static_avg_pool2d": 32, "static_avg_pool3d": 32, "static_dct": 32, "132": 32, "182": 32, "242": 32, "253": [32, 233, 499], "515": [32, 510, 605], "467": 32, "static_dft": 32, "static_embed": 32, "static_idct": 32, "93732834": 32, "75048852": 32, "29723358": [32, 294, 324], "6950531": [32, 294, 324], "93914509": [32, 294, 324], "88008738": [32, 294, 324], "18951225": [32, 294, 324], "06697273": [32, 294, 324], "57439804": [32, 294, 324], "68861485": [32, 294, 324], "41308832": [32, 294, 324], "0700836": 32, "2449036": 32, "285": 32, "6711426": 32, "514": 32, "501709": 32, "4924011": 32, "static_ifft": 32, "static_ifftn": 32, "static_interpol": 32, "static_max_pool1d": 32, "static_max_pool2d": 32, "max_pool2dd": 32, "static_max_pool3d": 32, "static_rfftn": 32, "_containerwithlinearalgebraexperiment": [32, 49], "933034": [32, 295, 338], "eigenvealu": [32, 340, 536], "xx": [32, 340, 342, 536], "37228107": [32, 340, 536], "3722816": [32, 340, 536], "8245648": [32, 340, 536], "41597357": [32, 340, 536], "56576747": [32, 340, 536], "9093767": [32, 340, 536], "56155": [32, 295, 341], "82842": [32, 295, 341], "450": [32, 343], "static_adjoint": 32, "static_cond": 32, "static_diagflat": 32, "static_eig": 32, "static_eigh_tridiagon": 32, "static_eigv": 32, "static_kron": 32, "kroneck": [32, 295, 343], "static_matrix_exp": 32, "static_multi_dot": 32, "regular": [32, 295, 306, 345, 398, 504, 541, 682, 702, 724], "_containerwithmanipulationexperiment": [32, 49], "_static_fill_diagon": 32, "_static_unique_consecut": 32, "atleast": [32, 297, 349, 350, 351], "ary1": [32, 297, 349, 350, 351], "ary2": [32, 297, 349, 350, 351], "3d": [32, 294, 316, 317, 351, 656, 698, 707, 716], "broadcast_shap": [32, 297, 641], "static_concat_from_sequ": [32, 353], "30192195": [32, 364], "static_as_strid": 32, "static_atleast_1d": 32, "static_atleast_2d": 32, "static_atleast_3d": 32, "static_broadcast_shap": 32, "static_dsplit": 32, "static_dstack": 32, "static_expand": 32, "static_flatten": 32, "static_fliplr": 32, "static_flipud": 32, "static_heavisid": 32, "static_hsplit": 32, "static_hstack": 32, "static_i0": 32, "static_moveaxi": 32, "static_pad": 32, "static_rot90": 32, "static_take_along_axi": 32, "static_top_k": 32, "static_vsplit": 32, "static_vstack": 32, "_containerwithnormsexperiment": [32, 49], "static_l2_norm": [32, 378], "16903085": [32, 378, 379], "50709254": [32, 378, 379], "84515423": [32, 378, 379], "44183609": [32, 378, 379], "56807494": [32, 378, 379], "69431382": [32, 378, 379], "89442718": [32, 378, 379], "44721359": [32, 378, 379], "static_lp_norm": [32, 379], "static_batch_norm": 32, "static_group_norm": 32, "static_instance_norm": 32, "static_l1_norm": 32, "12500000": 32, "37500000": 32, "62500000": 32, "27500000": 32, "35000000": 32, "42500000": 32, "0000000": 32, "5000000": 32, "2500000": 32, "_containerwithrandomexperiment": [32, 49], "43643127": [32, 382], "32325703": [32, 382], "24031169": [32, 382], "34251311": [32, 382], "31692529": [32, 382], "3405616": [32, 382], "5319725": [32, 382], "22458365": [32, 382], "24344385": [32, 382], "26588406": [32, 382], "61075421": [32, 382], "12336174": [32, 382], "51142915": [32, 382], "25041268": [32, 382], "23815817": [32, 382], "64042903": [32, 382], "25763214": [32, 382], "10193883": [32, 382], "31624692": [32, 382], "46567987": [32, 382], "21807321": [32, 382], "37677699": [32, 382], "39914594": [32, 382], "22407707": [32, 382], "static_bernoulli": 32, "static_beta": 32, "static_dirichlet": 32, "static_gamma": 32, "static_poisson": 32, "_containerwithsearchingexperiment": [32, 49], "static_unravel_index": 32, "_containerwithsetexperiment": [32, 49], "_containerwithsortingexperiment": [32, 49], "invert_permut": [32, 304], "static_invert_permut": 32, "static_lexsort": [32, 44], "_containerwithstatisticalexperiment": [32, 49], "_static_cummax": 32, "static_cummax": 32, "_static_cummin": 32, "todo": [32, 396, 681, 691, 702], "static_cummin": 32, "func_nam": [32, 397, 681, 693, 694, 698, 702], "static_bincount": 32, "static_corrcoef": 32, "static_cov": [32, 306, 394], "static_histogram": 32, "static_igamma": 32, "static_median": 32, "static_nanmean": 32, "static_nanmedian": 32, "static_quantil": 32, "_containerwithutilityexperiment": [32, 49], "_containerwithgener": [33, 49], "_static_all_equ": 33, "static_all_equ": 33, "_static_array_equ": 33, "x0": [33, 407, 501, 693], "level": [33, 407, 654, 672, 676, 677, 681, 683, 689, 691, 695, 698, 700, 702, 706, 707, 708, 709, 712, 713, 714, 717, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731], "a0": [33, 407], "static_array_equ": 33, "_static_assert_supports_inplac": 33, "_static_clip_matrix_norm": 33, "static_clip_matrix_norm": 33, "849": [33, 410, 411, 501], "_static_clip_vector_norm": 33, "static_clip_vector_norm": 33, "_static_einops_rearrang": 33, "static_einops_rearrang": 33, "_static_einops_reduc": 33, "static_einops_reduc": 33, "29333329": [33, 416, 501], "53000069": [33, 416, 501], "39666676": [33, 416, 501], "20666695": [33, 416, 501], "_static_einops_repeat": 33, "static_einops_repeat": 33, "_static_fourier_encod": 33, "static_fourier_encod": 33, "classivi": [33, 39, 419, 506, 512, 573, 577, 615], "89858720e": [33, 419], "79717439e": [33, 419], "_static_gath": 33, "static_gath": 33, "_static_gather_nd": 33, "200": [33, 181, 294, 316, 317, 423, 447, 499, 501, 712], "400": [33, 294, 316, 317, 423, 447, 501, 504, 540], "500": [33, 294, 316, 317, 423, 501], "static_gather_nd": 33, "_static_get_num_dim": 33, "static_get_num_dim": 33, "_static_has_nan": 33, "leafwis": 33, "static_has_nan": 33, "_static_inplace_decr": 33, "_static_inplace_incr": 33, "_static_inplace_upd": 33, "_static_is_arrai": 33, "static_is_arrai": 33, "_static_is_ivy_arrai": 33, "static_is_ivy_arrai": 33, "_static_is_native_arrai": 33, "static_is_native_arrai": 33, "_static_scatter_flat": 33, "ref": [33, 37, 206, 220, 223, 229, 236, 499, 506, 575, 701], "_static_scatter_nd": 33, "static_scatter_nd": 33, "_static_stable_divid": 33, "22222222": 33, "11111111": 33, "857": [33, 460, 501], "444": 33, "_static_stable_pow": 33, "_static_supports_inplace_upd": 33, "_static_to_list": 33, "static_to_list": 33, "_static_to_numpi": 33, "static_to_numpi": 33, "_static_to_scalar": 33, "static_to_scalar": 33, "_static_value_is_nan": 33, "452": 33, "static_value_is_nan": 33, "833": [33, 411], "600": [33, 294, 316, 317, 423, 690], "700": [33, 423], "items": [33, 48, 501], "static_isin": 33, "static_items": 33, "complex128": [33, 105, 106, 119, 128, 134, 441, 497, 501, 504, 537, 538, 543, 559, 641, 642, 691], "static_strid": 33, "425": [33, 480], "_containerwithgradi": [34, 49], "_static_stop_gradi": 34, "static_stop_gradi": 34, "87": [34, 36, 181, 210, 306, 335, 395, 482, 499, 502, 641], "976": [34, 238, 482, 499, 502], "49e": [34, 482, 502], "74e": [34, 482, 502], "95e": [34, 482, 502], "024": [34, 482, 502], "096": [34, 186, 482, 499, 502], "216": [34, 37, 482, 502, 557], "384": [34, 482, 502], "626": [34, 482, 502], "en": [34, 482, 483, 502, 690], "wikipedia": [34, 482, 483, 502], "wiki": [34, 482, 483, 502], "stochastic_gradient_desc": [34, 482, 483, 502], "01099": [34, 483], "01003": [34, 483, 502], "01015": [34, 483, 502], "99936122": [34, 483, 502], "99936116": [34, 483, 502], "99936128": [34, 483, 502], "99936104": [34, 483, 502], "w_new": [34, 486, 502], "88": [34, 41, 57, 182, 306, 395, 486, 493, 499, 502, 504, 510, 514, 547, 553, 606, 624], "708": [34, 488, 502], "445": [34, 488, 502], "6e": [34, 488, 502], "00036": [34, 488, 502], "00016": [34, 488, 502], "00049": [34, 488, 502], "layerwis": [34, 489, 502], "_containerwithimag": [35, 49], "_containerwithlay": [36, 49], "_static_conv1d": 36, "static_conv1d": 36, "_static_conv1d_transpos": 36, "static_conv1d_transpos": 36, "112": [36, 504, 514, 518, 547, 624], "_static_conv2d": 36, "ey": [36, 496, 503, 519, 525, 707, 714], "static_conv2d": 36, "_static_conv2d_transpos": 36, "static_conv2d_transpos": 36, "_static_conv3d": 36, "fdfh": [36, 521], "static_conv3d": 36, "_static_conv3d_transpos": 36, "static_conv3d_transpos": 36, "_static_depthwise_conv2d": 36, "inp": [36, 503, 525], "static_depthwise_conv2d": 36, "_static_dropout": 36, "static_dropout": 36, "_static_dropout1d": 36, "static_dropout1d": 36, "_static_dropout2d": 36, "_static_dropout3d": 36, "_static_linear": 36, "278": [36, 503, 526, 527], "105": [36, 503, 504, 505, 526, 527, 547, 561], "static_linear": 36, "352": [36, 503, 527, 695], "195": [36, 527], "_static_lstm_upd": 36, "_static_multi_head_attent": 36, "_static_reduce_window": 36, "_static_scaled_dot_product_attent": 36, "static_scaled_dot_product_attent": 36, "83": [36, 41, 234, 294, 306, 314, 324, 335, 395, 499, 503, 527, 605], "91": [36, 41, 182, 242, 286, 335, 499, 503, 504, 510, 514, 527, 547, 605, 624], "_containerwithlinearalgebra": [37, 49], "_static_choleski": 37, "static_choleski": 37, "577": [37, 504, 531], "707": [37, 504, 531], "static_rol": [37, 39, 689, 693], "_static_cross": 37, "static_cross": 37, "_static_det": 37, "_static_diag": 37, "_static_diagon": 37, "static_diagon": 37, "_static_eigh": 37, "_static_eigvalsh": 37, "static_eigvalsh": 37, "51572949": [37, 504, 538], "17091519": [37, 504, 538], "3448143": [37, 504, 538], "88178420e": [37, 504, 538], "35898387e": [37, 504, 538], "46410179e": [37, 504, 538], "_static_inn": 37, "_static_inv": 37, "static_inv": [37, 504, 540], "_static_matmul": 37, "matul": 37, "static_matmul": 37, "_static_matrix_norm": 37, "deimens": 37, "static_matrix_norm": 37, "_static_matrix_pow": 37, "_static_matrix_rank": 37, "static_matrix_rank": 37, "_static_matrix_transpos": 37, "static_matrix_transpos": 37, "_static_out": 37, "n1": [37, 87, 496], "n2": [37, 87, 496], "static_out": [37, 547], "_static_pinv": 37, "static_pinv": 37, "_static_qr": 37, "_static_slogdet": 37, "static_slogdet": 37, "0986123": [37, 504, 550], "_static_solv": 37, "_static_svd": 37, "static_svd": 37, "au": [37, 552], "aS": [37, 552], "avh": [37, 552], "bu": [37, 552, 675], "bvh": [37, 552], "_static_svdv": 37, "_static_tensordot": 37, "_static_tensorsolv": 37, "_static_trac": 37, "static_trac": 37, "_static_vand": 37, "static_vand": 37, "343": [37, 230, 499, 557], "512": [37, 503, 518, 557, 672], "729": [37, 557, 713], "_static_vecdot": 37, "_static_vector_norm": 37, "static_vector_norm": 37, "77359247": [37, 559], "_static_vector_to_skew_symmetric_matrix": 37, "99999988": [37, 548], "_containerwithloss": [38, 49], "_static_binary_cross_entropi": 38, "static_binary_cross_entropi": 38, "511": [38, 505, 561, 563], "_static_cross_entropi": 38, "static_cross_entropi": 38, "20397282": 38, "83258148": 38, "60943794": 38, "_static_sparse_cross_entropi": 38, "static_sparse_cross_entropi": 38, "5108256": [38, 562], "609438": [38, 504, 550, 562], "_containerwithmanipul": [39, 49], "_static_clip": 39, "static_clip": 39, "_static_concat": 39, "_static_constant_pad": 39, "static_constant_pad": 39, "_static_expand_dim": 39, "static_expand_dim": 39, "container_axi": [39, 506, 567], "_static_flip": 39, "static_flip": 39, "_static_permute_dim": 39, "static_permute_dim": 39, "_static_repeat": 39, "static_repeat": 39, "_static_reshap": 39, "static_reshap": 39, "_static_rol": 39, "positivclip": 39, "_static_split": 39, "static_split": 39, "_static_squeez": 39, "static_squeez": 39, "_static_stack": 39, "leavv": 39, "static_stack": 39, "_static_swapax": 39, "_static_til": 39, "static_til": 39, "_static_unstack": 39, "static_unstack": 39, "_static_zero_pad": 39, "repreat": [39, 570], "_containerwithnorm": [40, 49], "342": [40, 509, 602], "0427": [40, 509, 602], "299": [40, 509, 602], "241": [40, 602], "_containerwithrandom": [41, 49], "_static_multinomi": 41, "_static_randint": 41, "static_randint": 41, "_static_random_norm": 41, "static_random_norm": 41, "651": 41, "_static_random_uniform": 41, "static_random_uniform": 41, "481": 41, "0999": 41, "_static_shuffl": 41, "static_shuffl": 41, "431": [41, 605], "274": [41, 605], "_containerwithsearch": [42, 49], "_static_argmax": 42, "static_argmax": 42, "_static_argmin": 42, "static_argmin": 42, "_static_argwher": 42, "static_argwher": 42, "_static_nonzero": 42, "_static_wher": 42, "static_wher": 42, "_containerwithset": [43, 49], "_static_unique_al": 43, "static_unique_al": [43, 614], "_static_unique_count": 43, "static_unique_count": 43, "_static_unique_invers": 43, "static_unique_invers": 43, "_static_unique_valu": 43, "_containerwithsort": [44, 49], "_static_argsort": 44, "static_argsort": 44, "_static_searchsort": 44, "_static_sort": 44, "static_sort": 44, "static_msort": 44, "_containerwithstatist": [45, 49], "_static_cumprod": 45, "static_cumprod": 45, "_static_cumsum": 45, "static_cumsum": 45, "_static_prod": 45, "static_prod": 45, "11000001": [45, 628], "23100001": [45, 628], "30800003": [45, 514, 628], "_static_sum": 45, "_static_var": 45, "static_var": 45, "12666667": [45, 514, 631], "11555555": [45, 514, 631], "60000002": [45, 49, 626], "respectv": [45, 629], "81649649": [45, 629], "94280904": [45, 629], "509902": [45, 514, 629], "2472192": [45, 629], "44948983": [45, 629], "41421354": [45, 629], "contian": [45, 631], "6666667": [45, 631], "_containerwithutil": [46, 49], "_static_al": 46, "static_al": 46, "_static_ani": 46, "static_ani": 46, "add_ivy_container_instance_method": 47, "containerexampl": 47, "__abs__": [48, 49], "__add__": [48, 49, 686, 689, 693, 694, 697, 702, 703, 711], "__eq__": [48, 49], "__ge__": [48, 49], "__gt__": [48, 49, 707], "__le__": [48, 49], "__lt__": [48, 49], "__ne__": [48, 49], "__pow__": [48, 49, 711], "69678056": 48, "59876156": 48, "82660675": 48, "__radd__": [48, 49, 693, 694, 702], "__rrshift__": [48, 49], "__rshift__": [48, 49], "__rsub__": [48, 49], "__sub__": [48, 49, 686, 689, 693, 697, 711], "__truediv__": [48, 49, 686, 689, 693], "__xor__": [48, 49], "referenc": [48, 695, 701], "hardwar": [48, 51, 675, 682, 707, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730], "resid": [48, 51, 506, 567, 702, 709, 713], "mt": [48, 711], "hopefulli": [48, 49, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 652, 653, 655, 656, 657, 658, 659, 660, 674, 675, 676, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 710, 711, 712, 713, 714, 716], "overview": [48, 49, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 652, 653, 655, 656, 657, 658, 659, 660, 688, 690, 704, 708, 716], "submodul": [48, 49, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 652, 653, 654, 655, 656, 657, 658, 659, 660, 681, 682, 683, 685, 688, 690, 692, 698, 699, 704, 708, 709, 713, 719], "question": [48, 49, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 652, 653, 655, 656, 657, 658, 659, 660, 672, 674, 675, 676, 678, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 710, 711, 712, 713, 714, 716, 717, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731], "reach": [48, 49, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 595, 652, 653, 655, 656, 657, 658, 659, 660, 674, 675, 676, 678, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 709, 710, 711, 712, 713, 714, 716, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731], "eq": 49, "ge": 49, "gt": [49, 703, 709], "le": 49, "lt": 49, "ne": 49, "75979435": 49, "52153397": 49, "13532257": 49, "rshift": 49, "truediv": 49, "66666669": [49, 484, 502], "nested_arrai": [50, 51, 52, 688], "nestedarrai": 50, "nested_rank": [50, 51, 52], "inner_shap": [50, 51, 52], "nestedarraybas": [50, 51, 52], "classmethod": [50, 51], "from_row_length": 50, "row_length": 50, "from_row_split": 50, "row_split": 50, "ragged_map": 51, "ragged_multi_map": 51, "ragged_arrai": 51, "ragged_multi_map_in_funct": 51, "replace_ivy_arrai": 51, "unbind": 51, "nestedarrayelementwis": 52, "24000001": [57, 493], "703": [58, 493], "683": [58, 493], "408": [58, 493], "313": [58, 493], "437": [58, 493], "40337825": [59, 493], "56114835": [59, 493], "20788449": [59, 493], "0768": [62, 186, 493, 499], "231": [62, 493], "body_fn": [66, 67, 68, 495], "bodi": [66, 68, 495, 685, 704], "lst": [66, 495], "orelse_fn": [67, 495], "lambda": [67, 68, 414, 484, 485, 487, 492, 495, 501, 502, 504, 508, 537, 590, 591, 672, 681, 698, 699, 700, 703, 707, 709, 712], "repeatedli": [68, 495, 508, 592, 690, 704], "continu": [68, 234, 495, 499, 672, 675, 676, 680, 681, 682, 684, 685, 701, 704, 717, 724], "chosen": [69, 175, 496, 499, 511, 613, 681, 690, 702], "ml_framework": [69, 496], "distanc": [69, 496], "adjac": [69, 496], "nestedsequ": [70, 71, 496], "typevar": [70, 71, 496], "supportsbufferprotocol": [70, 71, 496], "static_copy_arrai": [77, 496], "intdtyp": [80, 91, 96, 108, 119, 124, 131, 137, 496, 497], "suppos": [80, 415, 496, 501, 691, 704], "numrow": [80, 496], "numcolumn": [80, 496], "interchang": [81, 496, 506, 576], "plu": [82, 496], "x00b": [82, 496], "x00d": [82, 496], "x00e": [82, 496], "33333337": [85, 484, 496, 502], "66666663": [85, 496], "gpu": [85, 143, 145, 146, 149, 152, 154, 156, 158, 159, 162, 164, 166, 496, 498, 672, 682, 683, 690, 692, 711, 718, 722, 724, 727, 728, 729], "41588834": [86, 496], "7827941": [86, 496], "6227766": [86, 496], "23413252": [86, 496], "n3": [87, 496], "similarli": [87, 94, 170, 258, 288, 496, 499, 687, 691, 702, 707, 711, 730], "xv": [87, 496], "yv": [87, 496], "x_nativ": [88, 496, 701], "y_nativ": [88, 496], "z_nativ": [88, 496], "compon": [90, 91, 168, 169, 170, 173, 176, 185, 187, 188, 190, 192, 220, 222, 223, 230, 233, 234, 237, 238, 263, 291, 496, 499, 511, 612, 672, 675, 709, 720, 725, 727], "d_type": [90, 496], "__new__": [90, 496], "y1": [91, 96, 250, 288, 496], "y2": [91, 96, 496], "y3": [91, 96, 496], "col": [94, 258, 288, 496], "retain": [94, 258, 288, 484, 496, 502, 700, 719], "primari": [94, 113, 114, 146, 147, 258, 288, 304, 387, 420, 421, 496, 497, 498, 501, 642, 644, 681, 684, 687, 691, 699, 701, 702, 704, 707, 717, 719], "purpos": [94, 192, 210, 258, 288, 496, 499, 504, 550, 683, 684, 686, 689, 690, 693, 695, 697, 698, 699, 702, 704, 707, 708, 711, 719, 723, 725, 728, 729, 730], "upward": [94, 258, 288, 496], "downward": [94, 258, 288, 496], "2xn": [94, 258, 288, 496], "subarrai": [94, 258, 288, 496], "incompat": [101, 497], "uint8": [102, 109, 113, 124, 127, 132, 138, 497, 641, 642, 691, 704], "closest": [104, 183, 193, 194, 230, 240, 297, 367, 497, 499, 704, 707], "xtype": [104, 497], "ytype": [104, 497], "native_uint16": [104, 497], "complexdtyp": [105, 119, 128, 497], "set_default_complex_dtyp": [105, 134, 497], "4294": [105, 107, 497], "967346": [105, 107, 497], "set_default_dtyp": [106, 135, 497, 691, 698], "floatdtyp": [107, 130, 497], "set_default_float_dtyp": [107, 116, 128, 136, 497, 691], "int_dtyp": [108, 131, 497], "set_default_int_dtyp": [108, 116, 137, 497, 691], "4294967346": [108, 109, 497], "uint_dtyp": [109, 132, 497], "uint": [109, 124, 132, 138, 497, 691, 703], "uintdtyp": [109, 124, 132, 138, 497], "set_default_uint_dtyp": [109, 116, 138, 497], "native_bool": [111, 497], "followng": [112, 497], "ieee": [112, 170, 187, 192, 210, 220, 229, 234, 237, 494, 497, 499, 675], "754": [112, 170, 187, 192, 210, 220, 229, 234, 237, 494, 497, 499, 675], "smallest_norm": [112, 497], "bfloat16": [113, 497, 641, 642, 691, 702, 704, 705], "unsupport": [114, 147, 421, 497, 498, 501, 636, 639, 682, 702], "encapsul": [115, 497, 690], "314": [115, 227, 263, 291, 497, 499], "9223372036854775808": [115, 497], "9223372036854775807": [115, 497], "65535": [115, 497], "4294967295": [115, 497], "un": [117, 497, 691, 709], "native_uint8": [117, 497], "hashabl": [121, 497], "type1": [125, 497], "type2": [125, 497], "array_api_promot": [125, 126, 497, 641, 642], "unexpect": [126, 194, 497, 499, 691], "default_complex_dtyp": [128, 497], "default_dtype_stack": [129, 135, 497], "unset_default_dtyp": [129, 497], "native_uint64": [129, 497], "default_float_dtyp": [130, 497, 691], "default_int_dtyp": [131, 137, 497, 691], "default_uint_dtyp": [132, 138, 497], "ret1": [133, 497], "ret2": [133, 497], "reset": [134, 135, 136, 137, 138, 164, 165, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 497, 498, 501], "default_complex_dtype_stack": [134, 497], "default_float_dtype_stack": [136, 497], "native_float16": [139, 497], "unmodifi": [141, 498, 687, 691], "tpu": [141, 158, 163, 498, 692, 724, 727], "clear": [142, 498, 672, 674, 675, 676, 681, 683, 687, 691, 692, 693, 702, 707, 709, 711, 724], "cach": [142, 409, 498, 501, 664, 696, 698, 701, 704], "aliv": [148, 153, 155, 424, 444, 445, 498, 501, 692], "139740789224448": [148, 498], "core": [151, 498, 674, 692, 704, 714, 722, 723, 724, 725, 729, 731], "physic": [151, 498], "default_devic": [153, 156, 157, 158, 164, 165, 498, 692, 695], "process_specif": [154, 166, 498], "percentag": [154, 498], "ram": [154, 162, 166, 498], "alon": [154, 166, 498, 672, 678, 696, 704], "036902561555": [154, 498], "7024003467681645": [154, 498], "as_native_dev": [154, 498], "7095597456708771": [154, 498], "attr_onli": [155, 498], "soft_device_mod": [157, 165, 498], "rtype": [157, 448, 449, 453, 454, 456, 457, 498, 501], "chunk": [158, 159, 160, 498], "codebas": [158, 159, 498, 676, 677, 684, 691, 701, 702, 704, 705, 708], "split_factor": [158, 498, 695], "max_chunk_s": [160, 498], "chunk_siz": [160, 498], "input_ax": [160, 498], "output_ax": [160, 498], "usag": [160, 498, 675, 691, 701, 704, 709, 717, 727], "fed": [160, 498, 713], "fist": [160, 498], "gb": [162, 166, 498, 682], "66700032": [162, 498], "589934592": [162, 498], "set_default_devic": [164, 498, 692], "set_soft_device_mod": [165, 498], "219563008": [166, 498], "902400346": [166, 498], "525205504": [166, 498], "magnitud": [167, 170, 187, 194, 220, 499, 504, 552, 553], "na": [167, 499, 704], "noqa": [167, 199, 234, 499, 505, 561, 656, 664, 703], "princip": [168, 172, 174, 281, 291, 499], "domain": [168, 169, 172, 173, 174, 175, 184, 185, 190, 192, 208, 209, 211, 232, 233, 234, 237, 238, 281, 291, 499, 694, 722, 724], "codomain": [168, 169, 172, 173, 174, 175, 184, 185, 190, 192, 208, 209, 211, 232, 233, 234, 237, 238, 281, 291, 499, 694], "\u03c0": [168, 172, 174, 175, 494, 499], "3\u03c0": [168, 175, 499], "unspecifi": [168, 169, 173, 176, 185, 190, 192, 194, 225, 229, 233, 234, 238, 295, 340, 499, 504, 506, 536, 537, 575, 701], "\u03c0j": [169, 173, 176, 208, 210, 499], "3\u03c0j": [169, 208, 210, 499], "x1_i": [170, 175, 177, 179, 180, 181, 182, 187, 188, 194, 198, 199, 206, 207, 212, 214, 216, 217, 220, 223, 225, 229, 236, 499, 685], "neither": [170, 187, 194, 220, 499, 504, 554, 690, 702, 707], "nor": [170, 187, 194, 220, 499, 690, 702, 728], "2019": [170, 187, 192, 210, 220, 499, 724, 727], "too": [170, 187, 194, 220, 499, 655, 681, 682, 683, 685, 691, 695, 717], "overflow": [170, 187, 194, 499, 504, 514, 550, 630, 680, 691], "commut": [170, 499], "tabl": [170, 187, 220, 454, 475, 499, 501, 641, 642, 691, 702, 706, 724], "dj": [170, 187, 220, 499], "bj": [170, 187, 220, 263, 291, 499], "invlov": [170, 499], "z1": [170, 499], "z2": [170, 499], "yj": [171, 499], "nanj": [173, 499], "809": [173, 499], "199": [173, 499], "569": [173, 499], "733": [173, 499], "notat": [175, 499, 514, 624, 690], "denot": [175, 499, 657], "quadrant": [175, 499], "rai": [175, 499, 675], "bitwis": [177, 180, 182, 217, 499], "170": [181, 499], "243": [181, 499], "225": [181, 499], "xor": [182, 217, 499], "77": [182, 499, 504, 514, 547, 624], "654": [184, 499], "ci": [185, 190, 192, 233, 499, 685, 691, 696, 703, 704, 717], "368": [185, 499], "670": [185, 499], "202": [185, 499, 685], "548": [185, 499], "1490": [185, 499], "0192": [186, 499], "0384": [186, 499], "0576": [186, 499], "underflow": [187, 194, 499, 504, 550, 691], "textbook": [187, 220, 499], "frac": [187, 209, 211, 231, 233, 237, 294, 300, 320, 321, 325, 326, 374, 376, 499], "ac": [187, 220, 499], "bd": [187, 220, 499], "bc": [187, 220, 499], "versu": [187, 220, 225, 499], "riemann": [187, 220, 499], "sphere": [187, 220, 499], "c99": [187, 220, 499], "infinit": [187, 220, 234, 499], "usual": [187, 220, 499, 682, 685, 691, 702, 704, 707], "interest": [187, 220, 499, 683], "unlik": [187, 220, 499, 675, 685, 689, 690, 693, 729, 731], "698": [187, 499], "truth": [188, 198, 199, 206, 207, 223, 499, 636, 638, 702, 704], "cut": [190, 192, 232, 233, 234, 237, 499, 674, 730], "08553692": [190, 499], "567": [190, 499], "00344786": [190, 499], "76297021": [190, 499], "197948": [190, 499], "53253174": [190, 499], "accur": [192, 210, 499, 504, 550, 699], "fdlibm": [192, 210, 499], "compliant": [192, 210, 215, 216, 499, 514, 625, 626, 627, 629], "potenti": [192, 210, 499, 672, 681, 682, 690, 691, 702, 708, 727], "632": [192, 499], "20e": [192, 499], "72e": [192, 499, 641], "greatest": [193, 194, 197, 499], "introduc": [194, 499, 506, 512, 572, 614, 674, 689, 690, 691, 703, 704, 707, 712], "via": [194, 499, 508, 593, 594, 683, 685, 689, 691, 692, 701, 705, 707, 709, 711, 712, 716, 724], "pep": [194, 499, 697], "238": [194, 499], "goal": [194, 499, 672, 675, 681, 724, 730], "disambigu": [194, 499, 700], "former": [194, 499, 691, 694, 702], "latter": [194, 499, 685, 687, 691, 694, 702], "overload": [194, 499, 704], "led": [194, 499, 685, 726], "subtl": [194, 499, 691, 705, 730], "ambigu": [194, 499], "semant": [194, 229, 499, 674, 709, 714, 725], "ill": [194, 499, 643], "diverg": [194, 499], "strictli": [194, 499, 697, 701], "prefer": [194, 499, 672, 682, 689, 695, 699, 702, 718, 724], "surpris": [194, 499, 717], "arrau": [200, 499], "log_": [209, 211, 499], "742": [210, 499], "hanl": [211, 499], "NOT": [215, 499, 681], "particular": [215, 499, 642, 682, 683, 685, 687, 690, 691, 693, 699, 701, 702, 704, 705, 720, 724, 730], "cdot": [220, 499], "behaviour": [221, 499, 680, 683, 684, 685, 686, 689, 691, 694, 695, 697, 701, 702, 704, 705, 711], "negat": [222, 263, 291, 499], "omplex": [223, 499], "carefulli": [225, 499, 655, 702, 722, 727], "52095687": [225, 499], "92457771": [225, 499], "49372482": [225, 499], "22738838": [225, 499], "156": [225, 499, 641], "5877228": [225, 499], "189": [226, 499], "252": [226, 499], "315": [226, 499], "378": [226, 499], "1150": [226, 499], "2890": [226, 499], "172": [226, 499], "229": [226, 499], "487": [226, 499, 503, 527], "344": [226, 499], "355j": [227, 263, 291, 499], "55j": [227, 263, 291, 499], "That": [229, 296, 346, 499, 682, 683, 686, 704, 711, 712, 713, 725], "primarili": [229, 499, 683, 689, 724], "reason": [229, 238, 499, 675, 681, 683, 685, 686, 689, 690, 691, 693, 698, 701, 702, 704, 705, 707, 709, 711, 730], "counterpart": [230, 499, 689, 699], "deliber": [230, 499, 707], "imprecis": [230, 499], "5654": [230, 499], "034": [230, 499], "433": [230, 485, 487, 492, 499, 502], "known": [231, 499, 655, 685, 690, 691, 702, 704], "signum": [231, 499], "x_": [231, 499], "operatornam": [231, 233, 499, 504, 537], "begin": [231, 297, 366, 499, 508, 583, 594, 654, 682, 685, 690, 703], "textrm": [231, 499], "932": [232, 499], "746": [232, 499], "443": [232, 499], "657": [232, 411, 499, 501], "indistinguish": [234, 499], "convent": [234, 499, 504, 514, 542, 624, 674, 687, 697, 705, 716, 730], "infti": [234, 499], "32455532": [234, 499], "89897949": [234, 499], "169": [234, 499], "analyt": [237, 499, 724, 726, 730], "math": [237, 499, 701, 702, 703, 714, 722], "pole": [237, 499], "546": [237, 499, 503, 527], "916": [237, 499, 505, 561], "996": [237, 499], "histor": [238, 499], "stem": [238, 499, 701], "older": [238, 499, 705], "patch": [238, 499, 691, 724], "advis": [238, 499, 702], "462": [238, 499], "604": [238, 499], "984": [238, 499], "997": [238, 499], "0375": [240, 499], "032": [240, 499], "6988": [242, 286], "181269": [242, 286], "20141329": [244, 286], "40318608": [244, 286], "48683619": [244, 286], "46328247": [244, 286], "59813893": [244, 286], "43748799": [244, 286], "parametr": [245, 286, 685, 704, 724], "6705687": [247, 286], "52016652": [247, 286], "40560818": [247, 286], "45630932": [247, 286], "2689": [248, 286], "7310": [248, 286], "7615": [248, 286], "2784": [248, 286], "7168": [248, 286], "8708": [248, 286], "4374": [248, 286], "1379": [248, 286], "0089": [248, 286], "0800": [251, 288], "3979": [251, 288], "9121": [251, 288], "5400": [251, 288], "han": [252, 288], "taper": [252, 288], "dens": [253, 288, 656, 672], "ith": [253, 288], "00726415": [254, 288], "9999736": [254, 288], "2773e": [255, 288], "0172e": [255, 288], "9294e": [255, 288], "4149": [255, 288], "9138": [255, 288], "5529": [255, 288], "multidimension": [256, 257, 288, 724], "complementari": [260, 288, 722, 730], "38268346": [260, 288], "38268352": [260, 288], "8563191": [260, 288], "14943568": [260, 288], "much": [261, 273, 291, 655, 675, 681, 682, 683, 686, 689, 691, 701, 702, 703, 705, 706, 707, 709, 711, 712, 722, 724, 730, 731], "arrrai": [263, 291], "position": [268, 291], "inexact": [268, 291], "decompos": [270, 277, 291, 702], "triangl": [272, 291], "999999e": [273, 291], "65999985": [275, 291], "59999943": [275, 291], "52000141": [275, 291], "1500001": [275, 291, 416, 501], "11259222": [276, 291], "3574121": [276, 291], "20097375": [276, 291], "45373821": [276, 291], "63963795": [276, 291], "15418935": [276, 291], "Not": [278, 291, 295, 342, 494, 687, 695, 703, 712, 713, 717], "suppli": [280, 291, 297, 366, 686, 688, 704], "217234": [281, 291], "hurwitz": [283, 291], "custom_grad_func": [285, 293], "bind": [285, 293, 681, 689, 700, 723, 724], "upstream": [285, 293, 682, 683, 685, 700], "ndenumer": 288, "ndindex": 288, "bind_custom_gradient_funct": [293, 700], "area_interpol": 294, "division_overrid": [294, 311], "avg": [294, 311, 313, 334], "dimensio": [294, 312], "tranform": [294, 314, 324], "22e": [294, 314], "24e": [294, 314], "91e": [294, 314], "10e": [294, 314, 641], "16e": [294, 314], "81e": [294, 314], "280": [294, 314], "container_n": [294, 314, 324], "container_typ": [294, 314, 324, 501], "container_norm": [294, 314, 324], "randomli": [294, 316, 317, 318, 503, 526, 641, 642, 643, 644, 648, 656], "ed": [294, 316, 317, 318], "rest": [294, 297, 316, 317, 318, 354, 682, 688, 690, 704, 714, 726], "4d": [294, 317, 318], "1200": [294, 317], "5d": [294, 318, 656], "emb": [294, 319, 656], "02733949e": [294, 320], "00j": [294, 320], "49660576e": [294, 320], "68178638e": [294, 320], "01j": [294, 320, 325], "98912367e": [294, 320], "21802426e": [294, 320, 325], "04549134e": [294, 320, 325], "82842712e": [294, 320, 325], "86902654e": [294, 320, 325], "25501143e": [294, 320, 325], "32978028e": [294, 320, 325], "52068201e": [294, 320, 325], "71158374e": [294, 320, 325], "generate_einsum_equ": 294, "get_interpolate_kernel": 294, "21500000e": [294, 324], "24000015e": [294, 324], "90734863e": [294, 324], "10000420e": [294, 324], "15899994e": [294, 324], "24000053e": [294, 324], "81469727e": [294, 324], "09999847e": [294, 324], "4135742": [294, 324], "6779785": [294, 324], "3770599": [294, 324], "114": [294, 324], "8719864": [294, 324], "72109985": [294, 324], "52869415": [294, 324], "79182434": [294, 324], "72489166": [294, 324], "01823372e": [294, 324], "15385818e": [294, 324], "36371455e": [294, 324], "38763905e": [294, 324], "60722279e": [294, 324], "80319249e": [294, 324], "05617893e": [294, 324], "27279215e": [294, 324], "44232273e": [294, 324], "70464318e": [294, 324], "73454881e": [294, 324], "00902849e": [294, 324], "10039906e": [294, 324], "07022366e": [294, 324], "22044605e": [294, 324], "15318303e": [294, 325], "15148591e": [294, 325], "19j": [294, 325], "25000000e": [294, 325], "35378602e": [294, 325], "02j": [294, 325], "65404249e": [294, 325], "17611649e": [294, 325], "24320230e": [294, 325], "79344813e": [294, 325], "22374531e": [294, 325], "45929364e": [294, 325], "14208718e": [294, 325], "07177031e": [294, 325], "what": [294, 326, 336, 643, 672, 675, 676, 678, 683, 684, 689, 690, 693, 694, 696, 697, 699, 700, 701, 702, 703, 704, 708, 709, 711, 712, 713, 714, 716, 717, 720, 725, 726, 729], "indexerror": [294, 326, 336, 506, 567, 667, 695], "interp": [294, 707], "xp": [294, 327, 685], "fp": [294, 327], "nd": [294, 328], "bicubic_tensorflow": [294, 328, 707], "max_unpool1d": 294, "unpool": [294, 332], "pool_result": [294, 332], "unpool_result": [294, 332], "nearest_interpol": 294, "input_shap": [294, 333, 672], "window_shap": [294, 334], "pool_typ": [294, 334], "array_lik": [294, 297, 336, 367, 504, 539, 547], "299j": [294, 336], "433j": [294, 336], "superdiagon": [295, 339, 504, 534], "subdiagon": [295, 339, 504, 534], "eigendecomposit": [295, 340, 504, 536, 537], "qlq\u1d40": [295, 340, 504, 536, 537], "orthogon": [295, 340, 504, 536, 537], "behav": [295, 340, 504, 536, 685, 695, 699, 701, 702, 703, 711, 725], "tridiagon": [295, 341], "18749806": [295, 341], "81250191": [295, 341], "350609": [295, 341], "56713122": [295, 341], "06563006": [295, 341], "74146169": [295, 341], "74215561": [295, 341], "0636413": [295, 341], "56742489": [295, 341], "35291126": [295, 341], "necessarili": [295, 342, 686, 689], "log_poisson_loss": 296, "compute_full_loss": [296, 346], "likelihood": [296, 346], "assumpt": [296, 346], "minu": [296, 346], "term": [296, 346, 503, 528, 656, 672, 674, 683, 689, 709, 719, 724], "plai": [296, 346, 672, 682, 686, 702, 704, 714, 724, 727], "factori": [296, 346], "stirl": [296, 346], "favor": [296, 346], "28402555": [296, 346], "03402555": [296, 346], "1573164": [296, 346], "whilst": [297, 349, 350, 351, 714, 719, 724], "ary3": [297, 351], "third": [297, 355, 371, 504, 512, 552, 614, 688, 701, 717, 723, 724, 730], "tall": [297, 357], "horizot": [297, 363], "shortcut": [297, 366, 682], "linear_ramp": [297, 366], "reflect": [297, 366, 678, 683, 686, 704], "ramp": [297, 366], "mirror": [297, 366, 681, 724], "signatur": [297, 306, 366, 394, 675, 691, 692, 693, 694, 697, 701, 704, 705, 707, 721, 730], "padding_func": [297, 366], "iaxis_pad_width": [297, 366], "iaxi": [297, 366], "style": [297, 366, 511, 612, 683, 696, 724], "unalt": [297, 366], "put_along_axi": 297, "put": [297, 367, 672, 681, 704, 717, 730], "elimin": [297, 371, 682], "consecut": [297, 371], "batch_mean": [300, 374, 376], "batch_var": [300, 374, 376], "running_vari": [300, 374, 376], "6666": [300, 379], "distrubut": [301, 380], "paramter": [301, 380], "seen": [301, 382, 664, 674, 675, 690, 691, 693, 695, 702, 704, 709, 711, 712, 730], "multivari": [301, 382], "bayesian": [301, 382], "supposedli": [304, 386], "indirect": [304, 387], "secondari": [304, 387], "is_ivy_sparse_arrai": 305, "is_native_sparse_arrai": 305, "native_sparse_arrai": 305, "coo_indic": [305, 390], "crow_indic": [305, 390], "col_indic": [305, 390], "ccol_indic": [305, 390], "row_indic": [305, 390], "dense_shap": [305, 390], "native_sparse_array_to_indices_values_and_shap": 305, "nativesparsearrai": 305, "sparsearrai": 305, "linalg": [306, 394, 504, 550, 681, 701, 703], "aw": [306, 394, 675], "48447205": [306, 394], "22727273": [306, 394], "c0": [306, 397], "ck": [306, 397], "i1": [306, 397], "c2": [306, 397], "nanquantil": 306, "idx": [405, 501, 672, 692, 711], "inspect": [405, 501], "retriev": [405, 501, 683, 702], "receiv": [406, 442, 501, 507, 580, 581, 582, 656, 683, 691, 692, 704, 707], "compile_on_next_step": [406, 501, 657, 659, 713], "decor": [409, 501, 641, 643, 648, 685, 686, 689, 691, 692, 698, 701, 702, 703, 707], "recalcul": [409, 501], "my_sum": [409, 501], "val1": [409, 501], "val2": [409, 501], "cached_sum": [409, 501], "line_eq": [409, 501], "slp": [409, 501], "itc": [409, 501], "cached_line_eq": [409, 501], "0353": [410, 501], "424": [410, 501], "58": [410, 501], "176": [410, 501], "339": [410, 501], "271": [410, 501], "168": [410, 501], "391": [410, 501], "417": [411, 501], "583": [411, 501], "0667": [411, 501], "267": [411, 501], "131": [411, 501], "263": [411, 501], "394": [411, 501, 510, 608], "526": [411, 501], "788": [411, 501], "public": [412, 501, 690, 700, 711, 727], "default_str": [414, 501], "46999979": [415, 501], "66000009": [415, 501], "93000001": [415, 501], "29000092": [415, 501], "33999991": [415, 501], "6400001": [415, 501], "96000004": [415, 501], "36000013": [415, 501], "51999998": [415, 501], "67000008": [415, 501], "30000001": [415, 501, 512, 615], "960": [415, 501], "1280": [415, 501, 672], "3600": [415, 501], "bottom": [415, 501, 681, 682, 690, 730], "h1": [415, 501], "w1": [415, 501], "40499985": [416, 501], "61000061": [416, 501], "incas": [420, 421, 501, 642], "max_depth": [427, 501, 508, 595], "seen_set": [427, 501], "local_set": [427, 501], "thrown": [432, 501, 686, 692, 695, 717], "ivyexcept": [432, 463, 501, 667, 695, 699, 701, 702, 705], "allow_dupl": [442, 501], "best": [442, 501, 672, 677, 680, 681, 682, 683, 684, 690, 691, 695, 704, 705, 718, 727, 728], "o": [442, 501, 672, 682, 684, 690, 709, 718], "context": [443, 501, 682, 683, 691, 693], "fork": [443, 501, 677, 685, 690], "forkserv": [443, 501], "spawn": [443, 501], "consol": [445, 501, 683, 696, 704, 711], "garbag": [445, 501], "collector": [445, 501], "get_all_arrays_in_memori": [445, 501], "array_mod": [448, 470, 501, 706], "exept": [449, 501], "exception_trace_mod": [449, 471, 501, 706], "infus": [450, 501], "nestable_mod": [453, 474, 501, 706], "effeci": [454, 475, 501, 706], "wider": [454, 475, 501, 706, 730], "promtion": [454, 501], "precise_mod": [454, 475, 501, 706], "shape_array_mod": [456, 477, 501, 706], "show_func_wrapper_trace_mod": [457, 478, 501, 706], "tmp_dr": [458, 501], "temporari": [458, 479, 501, 681, 691, 706], "tmp_dir": [458, 479, 501, 706], "tmp": [458, 479, 501], "my_tmp": [458, 501], "49999999999975": [460, 501], "5015015015010504": [460, 501], "000444502911705e": [460, 501], "9999999999995j": [460, 501], "isn": [463, 501, 683, 699, 712, 717, 726], "possibli": [465, 501, 704, 717], "100000023841858": [465, 501], "200000047683716": [465, 501], "299999952316284": [465, 501], "400000095367432": [465, 501], "599999904632568": [465, 501], "dictionai": [469, 501], "__name__": [469, 501, 672, 695], "hemant": [469, 501], "set_array_mod": [470, 501, 706], "unset_shape_array_mod": [470, 501], "previous": [471, 501, 664, 682, 687, 698, 700, 704, 709], "set_exception_trace_mod": [471, 501, 695], "set_min_bas": [472, 501], "set_min_denomin": [473, 501], "set_nestable_mod": [474, 501], "set_precise_mod": [475, 501], "set_queue_timeout": [476, 501], "set_shape_array_mod": [477, 501], "set_show_func_wrapper_trace_mod": [478, 501, 695], "set_tmp_dir": [479, 501], "my_dir": [479, 501], "451": [480, 501], "in_ax": [481, 501], "out_ax": [481, 501], "thereof": [481, 501], "fun": [481, 501, 508, 594, 690], "summaris": [481, 501], "grad": [482, 502, 659, 672, 700, 712, 713, 714], "0125": [482, 502], "171": [482, 502, 641], "90000075": [483, 502], "90000164": [483, 502], "9000032": [483, 502], "50000012e": [483, 502], "92558754": [483, 502], "92558694": [483, 502], "92558682": [483, 502], "92558861": [483, 502], "60000025e": [483, 502], "01024": [483, 502], "retain_grad": [484, 502], "xs_grad_idx": [484, 502, 638, 700], "ret_grad_idx": [484, 502, 638, 700], "func_ret": [484, 502, 700], "33333334": [484, 502, 504, 559], "666666": [484, 502], "333332": [484, 502], "66666675": [484, 502], "argnum": [485, 502], "grad_fn": [485, 492, 502, 712], "933": [485, 487, 492, 502], "jacobian": [487, 502, 717, 724], "jac_fn": [487, 502], "639": [488, 502], "361": [488, 502], "value_grad": [492, 502], "423332": [492, 502], "718281828459045": 494, "euler": [494, 716], "141592653589793": 494, "newaxi": 494, "cmp_i": 495, "cmp_isnot": 495, "for_loop": 495, "if_els": 495, "while_loop": 495, "asarray_handle_nest": 496, "asarray_infer_devic": 496, "asarray_infer_dtyp": 496, "asarray_inputs_to_native_shap": 496, "asarray_to_native_arrays_and_back": 496, "as_ivy_dtyp": [497, 702], "as_native_dtyp": 497, "check_float": 497, "closest_valid_dtyp": 497, "default_dtyp": [497, 691, 698], "dtype_bit": 497, "function_supported_dtyp": [497, 691, 704], "function_unsupported_dtyp": [497, 691], "infer_default_dtyp": 497, "invalid_dtyp": [497, 691], "is_hashable_dtyp": 497, "is_native_dtyp": 497, "promote_typ": [497, 691], "promote_types_of_input": [497, 691, 701], "type_promote_arrai": [497, 691], "unset_default_complex_dtyp": 497, "unset_default_float_dtyp": 497, "unset_default_int_dtyp": 497, "unset_default_uint_dtyp": 497, "valid_dtyp": 497, "defaultcomplexdtyp": 497, "defaultdtyp": 497, "defaultfloatdtyp": 497, "defaultintdtyp": 497, "defaultuintdtyp": 497, "as_ivy_dev": [498, 711], "clear_cached_mem_on_dev": 498, "dev_util": [498, 692], "function_supported_devic": 498, "function_unsupported_devic": 498, "get_all_ivy_arrays_on_dev": [498, 692], "gpu_is_avail": [498, 672], "handle_soft_device_vari": 498, "num_cpu_cor": [498, 692], "num_gpu": [498, 692, 704], "num_ivy_arrays_on_dev": 498, "percent_used_mem_on_dev": 498, "print_all_ivy_arrays_on_dev": 498, "set_split_factor": [498, 695], "split_func_cal": 498, "total_mem_on_dev": [498, 692], "tpu_is_avail": 498, "unset_default_devic": 498, "unset_soft_device_mod": 498, "used_mem_on_dev": 498, "defaultdevic": 498, "profil": 498, "save_dir": 498, "arg_info": 501, "arg_nam": 501, "cache_fn": [501, 698], "current_backend_str": [501, 704, 709, 711], "function_supported_devices_and_dtyp": 501, "function_unsupported_devices_and_dtyp": 501, "get_item": [501, 701], "get_referrers_recurs": 501, "inplace_arrays_support": 501, "inplace_variables_support": 501, "is_ivy_nested_arrai": 501, "isscalar": 501, "match_kwarg": 501, "num_arrays_in_memori": 501, "print_all_arrays_in_memori": 501, "set_item": 501, "to_ivy_shap": 501, "to_native_shap": 501, "try_else_non": 501, "unset_array_mod": [501, 706], "unset_exception_trace_mod": 501, "unset_min_bas": 501, "unset_min_denomin": 501, "unset_nestable_mod": 501, "unset_precise_mod": 501, "unset_queue_timeout": 501, "unset_show_func_wrapper_trace_mod": 501, "unset_tmp_dir": 501, "vmap": [501, 717, 724], "arraymod": 501, "manag": [501, 672, 676, 677, 691, 701, 717, 726, 728], "precisemod": 501, "execute_with_gradi": [502, 672, 712, 713, 714, 717], "jac": 502, "value_and_grad": [502, 700], "conv": [503, 656, 707], "channel_last": [503, 516, 523, 524, 641], "filter_format": [503, 516, 523], "feature_group_count": [503, 516, 523, 524], "x_dilat": [503, 516, 523], "channel_first": [503, 516, 523, 524], "oiw": [503, 516, 523], "oihw": [503, 516, 523], "oidhw": [503, 516, 523], "dhwio": [503, 516, 521, 523], "258": [503, 518, 520, 522], "conv_general_dil": [503, 702], "conv_general_transpos": 503, "depthwis": [503, 525, 643, 656], "hwi": [503, 525], "overfit": [503, 526], "1428566": [503, 526], "19999981": [503, 526], "39999962": [503, 526], "4000001": [503, 526], "49000001": [503, 526], "55599999": [503, 526], "21000004": [503, 526], "incom": [503, 527], "666": [503, 504, 527, 543], "4269": [503, 527], "911": [503, 527, 695], "157": [503, 527], "753": [503, 527], "101": [503, 504, 508, 527, 540, 589], "545": [503, 510, 527, 606], "547": [503, 527], "124": [503, 527], "852": [503, 527], "963": [503, 527], "108": [503, 514, 527, 624], "196": [503, 527], "306": [503, 527], "long": [503, 528, 682, 683, 690, 691, 693, 695, 702, 709, 724], "short": [503, 528, 683, 691, 705, 709, 713], "unrol": [503, 528, 709, 712], "lstm": [503, 528, 656, 709, 724], "multi": [503, 504, 529, 532, 643, 656, 672, 693, 708, 717, 720, 722, 724, 728], "head": [503, 529, 656, 672, 680, 682, 690, 702], "paper": [503, 529, 672, 676], "vaswani": [503, 529], "et": [503, 504, 529, 552], "al": [503, 529], "2017": [503, 529], "attend": [503, 529], "num_attention_head": [503, 529], "key_dim": [503, 529, 656], "value_dim": [503, 529, 656], "Then": [503, 529, 679, 681, 682, 683, 688, 690, 699, 701, 704, 705, 717], "query_dim": [503, 529], "measur": [503, 529, 656], "new_": [503, 529], "causal": [503, 529], "attention_weight": [503, 529], "alongsid": [503, 529, 675], "attenion_weight": [503, 529], "out_feat_dim": [503, 529], "axisa": [504, 532], "axisb": [504, 532], "axisc": [504, 532], "293": [504, 533], "46997": [504, 533], "futur": [504, 537, 538, 672, 674, 676, 682, 683, 690, 691, 704, 705, 707, 711, 717, 730], "45033181e": [504, 538], "02829754e": [504, 538], "54220343e": [504, 538], "12647155e": [504, 538], "38447177e": [504, 538], "56155300e": [504, 538], "26794919": [504, 538], "7320509": [504, 538], "0012": [504, 540], "00342": [504, 540], "000565": [504, 540], "0104": [504, 540], "000981": [504, 540], "00282": [504, 540], "000766": [504, 540], "0322": [504, 540], "00237": [504, 540], "000151": [504, 540], "00101": [504, 540], "00019": [504, 540], "0214": [504, 540], "00171": [504, 540], "0107": [504, 540], "0167": [504, 540], "0472": [504, 540], "0536": [504, 540], "0177": [504, 540], "000429": [504, 540], "00762": [504, 540], "lu_factor": 504, "pivot": [504, 541], "lu": [504, 541], "frobeniu": [504, 543], "nuclear": [504, 543], "induc": [504, 543], "ranl": [504, 543], "47722558": [504, 543], "776": [504, 543], "6000004": [504, 543], "118": [504, 544], "moor": [504, 548], "penros": [504, 548], "deteremin": [504, 550], "logsabsdet": [504, 550], "although": [504, 550, 686, 689, 702, 707, 722, 724], "again": [504, 550, 675, 676, 683, 686, 687, 688, 689, 693, 695, 696, 701, 702, 704, 705, 707, 712, 714, 717, 729, 730], "subject": [504, 550], "solut": [504, 551, 672, 682, 683, 689, 691, 703, 704, 707, 722, 726], "ordin": [504, 551, 716], "usvh": [504, 552], "cetera": [504, 552], "ss": [504, 553], "615": [504, 553], "866": [504, 553], "864": [504, 553], "transposit": [504, 554], "success": [504, 514, 556, 628, 630, 675, 690], "0x": [504, 557], "Such": [504, 557, 698, 704], "progress": [504, 557, 682, 683, 714], "alexandr": [504, 557], "theophil": [504, 557], "9000001": [504, 559], "64158917": [504, 559], "skew": [504, 560], "6666193": [505, 561], "67164493e": [505, 561], "05471958e": [505, 561], "32684899e": [505, 561], "30496836e": [505, 561], "e501": [505, 561, 656], "05393649": [505, 561], "49992943": [505, 561], "83330965": [505, 561], "35667497": [505, 562], "793291": [505, 563], "512926": [505, 563], "outsid": [506, 564, 575, 692, 698, 711, 729], "honor": [506, 571], "beyond": [506, 572, 694, 702, 730], "famili": [506, 575], "intxx": [506, 575], "floatxx": [506, 575], "construct": [506, 577, 656, 658, 659, 660, 709, 713, 714, 722, 724, 731], "rep": [506, 577], "fomaml_step": 507, "inner_cost_fn": [507, 580, 581, 582], "outer_cost_fn": [507, 580, 581], "inner_grad_step": [507, 580, 581, 582], "inner_learning_r": [507, 580, 581, 582], "inner_optimization_step": [507, 580, 581, 582], "inner_batch_fn": [507, 580, 581], "outer_batch_fn": [507, 580, 581], "average_across_step": [507, 580, 581], "inner_v": [507, 580, 581], "keep_inner_v": [507, 580, 581], "outer_v": [507, 580, 581], "keep_outer_v": [507, 580, 581], "return_inner_v": [507, 580, 581, 582], "num_task": [507, 580, 581, 582], "maml": [507, 580, 581], "task": [507, 580, 581, 582, 672, 677, 683, 702, 703, 716, 724, 730, 731], "0x7fa8d067ca60": [507, 580, 581, 582], "maml_step": 507, "vanilla": [507, 581, 713, 724], "recev": [507, 581], "reptile_step": 507, "cost_fn": [507, 582], "reptil": [507, 582], "_variabl": [507, 582], "batch_in": [507, 582], "latent": [507, 582], "4485182": [507, 582], "139": [507, 582], "9569855": [507, 582], "9880483": [507, 582], "01766968": [507, 582], "02197957": [507, 582], "02197981": [507, 582], "all_nested_indic": 508, "include_nest": [508, 583], "_index": [508, 583, 594], "_base": [508, 583, 593, 594, 701], "extra_nest_typ": [508, 583, 584, 593, 594, 595], "themselv": [508, 583, 689, 691, 692, 694, 698, 702, 713, 721, 730], "far": [508, 583, 594, 692, 693, 710, 729, 730], "copy_nest": 508, "to_mut": [508, 584, 595], "deepli": [508, 584, 717, 724], "mutabl": [508, 584, 590, 591, 595, 600, 601], "copied_nest": [508, 584], "1337": [508, 584], "duplicate_array_index_chain": 508, "index_nest": [508, 698], "insert_into_nest_at_index": 508, "insert_into_nest_at_indic": 508, "onto": [508, 589, 595, 673, 674, 724], "special_squar": [508, 589], "6666666666666667": [508, 589], "special_pow": [508, 589], "linear_model": [508, 589], "map_nest_at_index": 508, "shallow": [508, 590, 591, 595, 600, 601], "_result": [508, 590, 600], "placehold": [508, 590, 595, 600, 683, 686, 697, 719], "hh": [508, 590], "map_nest_at_indic": 508, "ub": [508, 591], "tb": [508, 591], "multi_index_nest": 508, "nested_ani": 508, "check_nest": [508, 593, 594], "conditon": [508, 593, 594], "nested_argwher": 508, "stop_after_n_found": [508, 594], "nested_indic": [508, 594], "nested_map": [508, 698], "_depth": [508, 595], "_tuple_check_fn": [508, 595], "_list_check_fn": [508, 595], "_dict_check_fn": [508, 595], "wherebi": [508, 595, 681, 721], "nested_multi_map": 508, "index_chain": [508, 596], "nest0": [508, 596], "ivy_arrai": [508, 596, 686, 702], "unappli": [508, 596], "prune_empti": 508, "prune_nest_at_index": 508, "prune_nest_at_indic": 508, "set_nest_at_index": 508, "set_nest_at_indic": 508, "111": [508, 601], "xyz": [508, 601], "pqr": [508, 601], "mini": [509, 602, 656, 658], "217": [509, 602, 695], "uniformli": [510, 604, 606], "22346112": [510, 605], "0922": [510, 605], "49671414": [510, 605], "1382643": [510, 605], "64768857": [510, 605], "5230298": [510, 605], "23415337": [510, 605], "23413695": [510, 605], "9213753": [510, 605], "12818667": [510, 605], "799": [510, 605], "469": [510, 605], "287": [510, 605], "0366": [510, 605], "26431865": [510, 606], "475": [510, 606], "878": [510, 606], "861": [510, 606], "929": [510, 606], "789": [510, 606], "519": [510, 606], "0435": [510, 606], "381": [510, 606], "4608004": [510, 606], "8458502": [510, 606], "67270088": [510, 606], "31128597": [510, 606], "zeroel": [511, 612], "major": [511, 612, 675, 691, 692, 703, 704, 717, 721, 724], "guarante": [512, 614, 616, 676, 686, 691, 717], "aggreg": [512, 614, 690], "fourth": [512, 614], "1141": [512, 614], "8101": [512, 614], "9298": [512, 614], "8460": [512, 614], "2119": [512, 614], "3519": [512, 614], "6252": [512, 614], "4033": [512, 614], "7443": [512, 614], "2577": [512, 614], "3707": [512, 614], "0545": [512, 614], "3238": [512, 614], "5944": [512, 614], "0775": [512, 614], "4327": [512, 614], "62519997": [512, 614], "40329999": [512, 614], "59439999": [512, 614], "74430001": [512, 614], "81010002": [512, 614], "84600002": [512, 614], "92979997": [512, 614], "29999995": [512, 615], "einstein": [514, 624], "summat": [514, 624], "117": [514, 624], "sentinel": [514, 625, 627], "90000004": [514, 626], "intend": [514, 630, 639, 655, 685, 697, 700, 722, 724, 728, 729], "07472222": [514, 631], "00666667": [514, 631], "08966666": [514, 631], "simplicit": [515, 632, 633], "meta": [580, 581, 582, 686, 705, 724], "ivy_test": [636, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 681, 682, 683, 685, 688, 690, 703], "test_ivi": [636, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 681, 682, 683, 688, 690, 703, 704], "helper": [636, 638, 639, 646, 647, 672, 688, 691, 695, 712, 719], "assert_all_clos": [636, 703], "ret_np": [636, 638, 703], "ret_from_gt_np": [636, 703], "ground_truth_backend": [636, 638, 639, 647, 648, 703], "ground": [636, 638, 674, 702, 704], "mark": [636, 681, 683, 685, 704, 709], "fail": [636, 681, 682, 683, 685, 690, 691, 693, 696, 699, 701, 702, 703], "assert_same_type_and_shap": 636, "this_key_chain": 636, "check_unsupported_devic": 636, "input_devic": 636, "all_as_kwargs_np": [636, 638], "presenc": [636, 689, 701], "check_unsupported_device_and_dtyp": 636, "input_dtyp": [636, 638, 647, 703, 704], "check_unsupported_dtyp": 636, "test_unsupported_funct": 636, "value_test": 636, "ret_np_flat": 636, "ret_np_from_gt_flat": 636, "ret_from_np_gt_flat": 636, "function_test": 638, "args_to_contain": 638, "array_arg": [638, 698], "args_to_frontend": 638, "frontend_array_fn": 638, "arrays_to_frontend": 638, "as_list": 638, "compiled_if_requir": 638, "test_compil": [638, 647, 648], "convtru": 638, "nativeclass": 638, "counter": [638, 713], "create_args_kwarg": 638, "args_np": 638, "arg_np_val": 638, "args_idx": 638, "kwargs_np": 638, "kwarg_np_val": 638, "kwargs_idx": 638, "test_flag": [638, 703, 704], "on_devic": [638, 647, 703], "flatten_and_to_np": 638, "flatten_frontend": 638, "flatten_frontend_to_np": 638, "get_frontend_ret": 638, "frontend_fn": 638, "as_ivy_arrai": 638, "get_ret_and_flattened_np_arrai": 638, "backend_to_test": [638, 703], "gradient_incompatible_funct": 638, "gradient_test": [638, 704], "rtol_": 638, "atol_": [638, 703], "gradient_unsupported_dtyp": 638, "kwargs_to_args_n_kwarg": 638, "num_positional_arg": [638, 647, 648, 703, 704], "port": [638, 676], "test_frontend_funct": [638, 703], "fn_tree": [638, 639, 648, 702, 703, 704], "test_valu": [638, 703, 704], "all_alias": [638, 703], "alias": [638, 648, 681, 702, 703], "namespac": [638, 681, 691, 699, 702, 703, 705, 709, 714], "test_frontend_method": [638, 703], "init_input_dtyp": [638, 703], "method_input_dtyp": [638, 703], "init_flag": [638, 703, 704], "method_flag": [638, 647, 703, 704], "init_all_as_kwargs_np": [638, 703], "method_all_as_kwargs_np": [638, 703], "frontend_method_data": [638, 703], "consum": [638, 689, 690, 697, 703, 704], "init_as_variable_flag": [638, 648], "dictat": [638, 686, 693, 697, 701], "init_num_positional_arg": [638, 648], "init_native_array_flag": 638, "with_v": 638, "ret_gt": 638, "test_funct": [638, 682, 683, 690, 703, 704], "fn_name": [638, 639, 648, 687, 703, 704], "return_flat_np_arrai": 638, "functiontestflag": [638, 647], "with_out": [638, 647, 703, 704], "instance_method": [638, 647, 704], "as_vari": [638, 647, 703, 704], "as_variable_flag": [638, 648], "native_array_flag": [638, 648], "container_flag": [638, 647, 648], "test_method": 638, "class_nam": 638, "method_nam": [638, 646, 648, 703], "init_with_v": 638, "method_with_v": 638, "test_gradi": [638, 647, 648], "method_as_variable_flag": [638, 648], "method_num_positional_arg": [638, 648], "method_native_array_flag": 638, "method_container_flag": [638, 648], "tthe": 638, "wrap_frontend_function_arg": 638, "holder": 639, "current_frontend_config": 639, "0x7fa8c59bdb70": 639, "interruptedtest": 639, "test_interrup": 639, "baseexcept": 639, "tri": [639, 691], "testdata": 639, "supported_device_dtyp": 639, "is_method": 639, "setup_api_test": 639, "test_data": 639, "setup_frontend_test": 639, "teardown_api_test": 639, "teardown_frontend_test": 639, "hypothesis_help": [641, 642, 643, 644], "array_help": 641, "array_and_broadcastable_shap": 641, "searchstrategi": [641, 642, 643, 644, 647, 648, 704], "array_bool": [641, 704], "min_valu": [641, 642, 643, 644, 703, 704], "max_valu": [641, 642, 643, 644, 703, 704], "strategi": [641, 642, 643, 644, 648, 681, 703], "array_indices_axi": 641, "array_dtyp": [641, 642, 704], "indices_dtyp": 641, "get_dtyp": [641, 642, 703, 704], "disable_random_axi": 641, "axis_zero": 641, "allow_inf": [641, 644, 703, 704], "min_num_dim": [641, 643, 703, 704], "max_num_dim": [641, 643, 703, 704], "min_dim_s": [641, 643, 703, 704], "max_dim_s": [641, 643, 703], "first_dimension_onli": 641, "indices_same_dim": 641, "valid_bound": 641, "hypothesi": [641, 643, 648, 681, 683, 685, 690, 699], "65536": 641, "44758124e": [641, 704], "array_indices_put_along_axi": 641, "values_dtyp": 641, "array_valu": [641, 704], "abs_smallest_v": [641, 643, 644], "allow_nan": [641, 644, 704], "allow_subnorm": [641, 644, 704], "exclude_min": [641, 644, 704], "exclude_max": [641, 644], "large_abs_safety_factor": [641, 643, 644, 703, 704], "small_abs_safety_factor": [641, 643, 644, 703], "safety_factor_scal": [641, 643, 644, 703, 704], "subnorm": [641, 644], "safeti": [641, 643, 644, 724], "0002": [641, 644], "get_shap": [641, 643, 703, 704], "1806": 641, "36912": 641, "6955": 641, "59576": 641, "1025": 641, "arrays_and_ax": 641, "available_dtyp": [641, 642, 703, 704], "allow_non": [641, 643, 703, 704], "return_dtyp": 641, "force_int_axi": 641, "26e": 641, "24322108": 641, "26446279e": 641, "96046448e": 641, "008": 641, "17549435e": 641, "038": 641, "06541027e": 641, "13725760e": 641, "07143888": 641, "arrays_for_pool": 641, "min_dim": 641, "max_dim": 641, "min_sid": 641, "max_sid": 641, "explicit_or_str_pad": 641, "only_explicit_pad": 641, "return_dil": 641, "mixed_fn_compo": [641, 642, 643, 644, 704], "cond_data_gen_help": 641, "create_nested_input": 641, "leaf_valu": 641, "dtype_and_valu": [641, 703, 704], "num_arrai": [641, 642, 703, 704], "shared_dtyp": [641, 642, 703], "ret_shap": 641, "array_api_dtyp": [641, 642], "shape_kei": 641, "37915": 641, "6322": 641, "26765": 641, "12413": 641, "26986": 641, "34665": 641, "000e": 641, "711e": 641, "100e": 641, "955e": [641, 704], "40817": 641, "56193": 641, "29200": 641, "5851": 641, "9746": 641, "9604645e": 641, "192": 641, "103": 641, "41795": 641, "1170789994": 641, "44251": 641, "44209": 641, "433075925": 641, "24791": 641, "24691": 641, "24892": 641, "16711": 641, "972": 641, "15357": 641, "72057594037927936": 641, "dtype_array_queri": 641, "allow_mask": 641, "allow_neg_step": 641, "dtype_array_query_v": 641, "dtype_values_axi": [641, 704], "min_axi": 641, "max_axi": 641, "valid_axi": 641, "allow_neg_ax": 641, "min_axes_s": 641, "max_axes_s": 641, "force_tuple_axi": 641, "29788": 641, "62222885e": 641, "68281172e": 641, "257j": 641, "40129846e": 641, "90000000e": 641, "63426649e": 641, "50000000e": 641, "91931887e": 641, "29488e": 641, "14361019e": 641, "12445": 641, "einsum_help": 641, "get_first_solve_matrix": 641, "get_second_solve_matrix": 641, "list_of_s": 641, "st": [641, 685, 703, 704], "sampled_from": [641, 703, 704], "min_siz": [641, 643, 648, 704], "max_siz": [641, 643, 648, 704], "size_bound": [641, 704], "00001": 641, "999999999999999": 641, "9394938006792373": 641, "mutually_broadcastable_shap": 641, "num_shap": 641, "base_shap": 641, "dtype_help": 642, "univers": [642, 674, 702], "get_castable_dtyp": 642, "castabl": 642, "prune_funct": 642, "intersect": [642, 690, 704, 716], "signed_integ": 642, "real_and_complex": 642, "float_and_complex": 642, "general_help": 643, "apply_safety_factor": 643, "embedding_help": 643, "get_axi": [643, 704], "allow_neg": 643, "sort_valu": 643, "force_tupl": 643, "force_int": 643, "assertionerror": [643, 685, 695, 703, 704], "get_bound": [643, 704], "get_mean_std": 643, "matrix_is_st": 643, "cond_limit": 643, "instabl": [643, 691], "further": [643, 675, 676, 683, 685, 686, 690, 693, 695, 697, 698, 701, 702, 704, 708, 709, 712, 713, 729, 730], "computation": [643, 682], "heavi": [643, 682, 702, 703, 707, 725], "prone": 643, "thumb": 643, "But": [643, 689, 690, 694, 696, 699, 707, 714], "perfectli": [643, 676], "gradual": 643, "strong": [643, 675, 717, 724], "collinear": 643, "reshape_shap": [643, 704], "subset": [643, 686, 690, 694, 697, 700, 702, 704, 709, 724], "x_and_filt": 643, "number_help": 644, "arbitrarili": [644, 689, 712], "safety_factor": 644, "pipeline_help": 645, "withbackendcontext": 645, "get_frontend_config": 645, "update_backend": [645, 703], "frontendmethoddata": 646, "ivy_init_modul": 646, "framework_init_modul": 646, "init_nam": 646, "test_parameter_flag": 647, "frontendfunctiontestflag": 647, "generate_frontend_arrai": [647, 648], "testflag": 647, "apply_flag": 647, "args_to_iter": 647, "frontendmethodtestflag": 647, "initmethodtestflag": 647, "methodtestflag": 647, "build_flag": 647, "frontend_function_flag": 647, "frontend_method_flag": 647, "function_flag": 647, "init_method_flag": 647, "testing_help": 648, "handle_frontend_method": [648, 703, 704], "class_tre": [648, 703], "init_tre": [648, 703], "init_native_arrai": 648, "_as_varaible_strategi": 648, "method_native_arrai": 648, "_given_kwarg": 648, "wrapper": [648, 686, 688, 689, 691, 695, 698, 701, 702, 711, 719, 720, 724], "handle_frontend_test": [648, 703, 704], "number_positional_arg": [648, 703], "test_with_out": [648, 703], "test_inplac": 648, "handle_method": [648, 704], "method_tre": [648, 703, 704], "_gradient_strategi": 648, "_compile_strategi": 648, "handle_test": [648, 704], "test_instance_method": 648, "num_positional_args_method": 648, "geglu": 652, "leakyrelu": 652, "logsoftmax": 652, "moduleconvert": [653, 657], "from_flax_modul": 653, "native_modul": 653, "params_fx": 653, "rng_seed": 653, "constructor_arg": 653, "constructor_kwarg": 653, "instance_arg": 653, "instance_kwarg": 653, "flax": [653, 676, 714, 717, 724], "from_haiku_modul": 653, "params_hk": 653, "from_keras_modul": 653, "from_paddle_modul": 653, "paddl": [653, 664, 681, 682], "from_torch_modul": 653, "dedic": [653, 697, 707, 711, 713], "to_ivy_modul": [653, 714], "native_module_class": 653, "modulehelp": [654, 657], "check_submod_ret": 654, "expected_submod_ret": [654, 657], "get_mod_kei": 654, "top_mod": 654, "explicit": [654, 682, 689, 691, 700, 701, 702, 703, 709, 717, 724], "mod_depth": 654, "mod_height": 654, "mod_with_top_mod_key_chain": 654, "flatten_key_chain": 654, "iimedi": 654, "parent": [654, 681, 690, 711], "show_mod_in_top_mod": 654, "upper_depth": 654, "lower_depth": 654, "coverag": [654, 691, 704], "prompt": [654, 683], "show_structur": 654, "this_repr": 654, "show_v_in_top_v": 654, "perspect": 654, "top_v": 654, "sub_mod": 654, "show_v": 654, "comopos": 654, "enumer": [654, 672], "track_submod_call_ord": [654, 657], "track_submod_ret": [654, 657], "v_with_top_v_key_chain": 654, "create_vari": [655, 713], "var_shap": [655, 713], "fan_out": [655, 713], "fan_in": [655, 713], "rectangular": 655, "firstlayersiren": 655, "siren": 655, "distribt": 655, "glorotuniform": [655, 656, 713], "glorot": 655, "xavier": 655, "neuron": 655, "w_1x_1": 655, "w_2x_2": 655, "w_nx_n": 655, "w_i": 655, "vanish": 655, "explod": [655, 673, 674], "big": [655, 677, 717, 724], "pick": 655, "abstract": [655, 659, 674, 689, 691, 702, 704, 707, 713, 717, 722, 724, 726, 727, 731], "kaimingnorm": 655, "fan_mod": [655, 713], "kaim": 655, "he": 655, "center": 655, "negative_slop": 655, "fan": 655, "propog": 655, "fan_sum": [655, 713], "proport": 655, "Ones": 655, "randomnorm": 655, "stddev": 655, "w0": 655, "gain": [655, 683, 685, 708, 713, 724], "wlim": 655, "predefin": 655, "initialz": 655, "fan_avg": 655, "adaptiveavgpool1d": 656, "adaptiveavgpool2d": 656, "avgpool1d": 656, "implicit": [656, 689, 694, 702, 704, 709, 724], "avgpool2d": 656, "avgpool3d": 656, "input_channel": [656, 672, 709, 713], "output_channel": [656, 672, 713], "filter_s": 656, "weight_initi": [656, 713], "bias_initi": [656, 713], "conv1dtranspos": 656, "filter_shap": 656, "conv2dtranspos": 656, "conv3dtranspos": 656, "depthwiseconv2d": 656, "num_channel": 656, "bernoul": 656, "renorm": 656, "num_lay": 656, "return_sequ": 656, "return_st": 656, "get_initial_st": 656, "connect": [656, 675, 682, 713, 714, 722], "maxpool1d": 656, "maxpool2d": [656, 672], "maxpool3d": 656, "multiheadattent": 656, "embed_dim": 656, "head_dim": 656, "dropout_r": 656, "use_proj_bia": 656, "attention_ax": 656, "build_mod": [656, 657], "on_init": [656, 657], "parallel": [656, 688, 724, 728, 729], "store_var": 657, "fallback_to_non_compil": [657, 659], "with_partial_v": 657, "submod_depth": 657, "submods_to_track": 657, "varibl": 657, "temporarili": [657, 685, 705], "fall": [657, 659, 681, 691, 708], "from_cal": 657, "trigger": [657, 681], "successfulli": [657, 682, 686], "built_": 657, "compile_kwarg": 657, "_unified_ivy_graph": 657, "_call": 657, "save_weight": 657, "weights_path": 657, "show_graph": 657, "randomness_factor": 657, "save_to_disk": 657, "notebook": 657, "with_edge_label": 657, "with_arg_label": 657, "with_output_label": 657, "output_connected_onli": 657, "highlight_subgraph": 657, "fname": [657, 712], "batchnorm2d": 658, "num_featur": 658, "affin": 658, "track_running_stat": 658, "trail": 658, "layernorm": 658, "normalized_shap": 658, "elementwise_affin": 658, "set_stat": [659, 713], "init_on_first_step": 659, "ignore_miss": 659, "privat": [659, 702, 704], "_step": [659, 713], "miss": [659, 681, 682, 683, 686, 689, 690, 693, 702, 704, 707], "sgd": [659, 724], "stochast": [659, 724], "sub_modul": 660, "check_al": 661, "messag": [661, 667, 671, 675, 682, 683, 690, 693, 695, 696, 702, 709, 711], "check_all_or_any_fn": 661, "check_ani": 661, "check_dev_correct_format": 661, "check_dimens": 661, "check_elem_in_list": [661, 698, 701, 702], "elem": 661, "check_equ": [661, 702], "check_exist": 661, "check_fals": 661, "check_fill_value_and_dtype_are_compat": [661, 705], "check_gather_input_valid": 661, "check_gather_nd_input_valid": 661, "check_great": 661, "allow_equ": [661, 695], "check_inplace_sizes_valid": [661, 701], "check_isinst": 661, "allowed_typ": 661, "check_kernel_padding_s": 661, "padding_s": 661, "check_less": [661, 695], "check_one_way_broadcast": 661, "check_same_dtyp": 661, "check_shapes_broadcast": 661, "check_tru": 661, "check_unsorted_segment_min_valid_param": 661, "ast_help": 663, "importtransform": 663, "nodetransform": 663, "impersonate_import": 663, "tree": [663, 678, 691], "local_ivy_id": 663, "visit_import": 663, "visit_importfrom": 663, "ivyload": 663, "loader": [663, 672, 712, 717], "exec_modul": 663, "ivypathfind": 663, "metapathfind": 663, "find_spec": 663, "fullnam": 663, "contextmanag": 664, "choose_random_backend": 664, "convert_from_numpy_to_target_backend": 664, "variable_id": 664, "numpy_obj": 664, "convert_from_source_backend_to_numpi": 664, "current_backend": [664, 681, 695, 698, 703, 705, 709], "global_backend": 664, "py": [664, 672, 681, 682, 683, 685, 687, 690, 691, 692, 694, 695, 696, 697, 698, 702, 703, 704, 705, 709, 711, 713, 714], "fn_name_from_version_specific_fn_nam": 664, "prevent_access_loc": 664, "previous_backend": [664, 687], "unset": [664, 709], "op": [664, 705, 709, 717], "eagertensor": [664, 703], "subsequ": [664, 682, 686, 690, 691, 693, 697, 698, 701, 704, 713, 725], "Or": [664, 672, 679, 701, 712], "set_backend_to_specific_vers": 664, "set_jax_backend": 664, "set_mxnet_backend": 664, "mxnet": [664, 675, 681, 682, 731], "mx": 664, "set_numpy_backend": 664, "set_paddle_backend": 664, "set_tensorflow_backend": 664, "set_torch_backend": 664, "unset_backend": [664, 687], "with_backend": 664, "sub_backend_handl": 665, "available_sub_backend": 665, "clear_sub_backend": 665, "find_available_sub_backend": 665, "sub_backends_loc": 665, "set_sub_backend": 665, "sub_backend_str": 665, "unset_sub_backend": 665, "dynamic_import": 666, "import_modul": [666, 709], "packag": [666, 672, 678, 682, 690, 702, 717, 718, 724, 726], "ivyattributeerror": [667, 695], "include_backend": [667, 695], "attributeerror": [667, 695, 711], "ivybroadcastshapeerror": [667, 695], "ivydtypepromotionerror": [667, 695], "ivyerror": [667, 672, 695], "ivyindexerror": [667, 695], "ivynotimplementedexcept": [667, 695], "notimplementederror": 667, "ivyvalueerror": [667, 695], "handle_except": [667, 697, 699], "add_array_spec": 668, "fn_array_spec": 668, "set_logging_mod": 669, "debug": [669, 682, 683, 689, 690, 700, 704, 707, 712, 724], "info": [669, 672, 688, 694, 696], "unset_logging_mod": 669, "recent": [669, 674, 675, 682, 683, 704], "print_stat": 670, "viz": 670, "visual": [670, 672, 682, 702, 704, 717, 724, 726, 729], "snakeviz": 670, "bonu": 670, "cprofil": 670, "cprint": [671, 709], "straight": [672, 690, 702, 704, 711], "awai": [672, 722, 724], "dive": [672, 677, 679, 680, 681, 683, 685, 689, 691, 696, 703, 708, 711, 712, 717, 730], "grow": [672, 705, 724], "guid": [672, 677, 681, 682, 683, 688, 696, 702, 730], "own": [672, 675, 676, 682, 685, 690, 691, 694, 695, 701, 702, 705, 709, 717, 719, 720, 723, 724, 729, 730], "variou": [672, 683, 685, 690, 691, 694, 695, 697, 699, 700, 702, 703, 704, 716, 718, 719, 720, 722, 723, 724, 727, 730], "perk": [672, 686, 689], "essenti": [672, 674, 675, 681, 689, 692, 693, 698, 701, 702, 703, 705, 730], "mainli": [672, 681, 684, 700, 702, 704, 710, 712, 719, 724], "handler": [672, 708, 710, 714, 719], "behind": [672, 684, 697, 704, 708, 710], "scene": [672, 673, 674, 684, 708, 710, 724], "facilit": [672, 698, 699], "agnost": [672, 686, 697, 709, 711, 714, 717, 730, 731], "mse_loss": 672, "jax_ms": 672, "tf_mse": 672, "np_mse": 672, "torch_ms": 672, "regressor": 672, "input_dim": 672, "output_dim": 672, "_build": 672, "linear0": [672, 712, 713], "linear1": [672, 712, 713], "_forward": [672, 694, 709, 712, 713], "easili": [672, 675, 682, 686, 690, 702, 707, 712, 713, 714, 717, 724, 730, 731], "favorit": 672, "n_training_exampl": 672, "loss_fn": [672, 712, 713, 714], "epoch": 672, "5f": 672, "finish": [672, 677, 681, 682, 684], "usabl": [672, 697, 705], "cover": [672, 681, 685, 686, 688, 693, 694, 698, 699, 704, 707, 708], "topic": [672, 699, 711, 724], "mechan": [672, 690, 715, 717], "vision": [672, 678, 715, 720, 730], "robot": [672, 715], "reinforc": [672, 716], "gym": 672, "builder": [672, 679, 715, 717, 719], "trainer": [672, 676, 715, 717, 731], "break": [672, 687, 691, 697, 705, 717], "highli": [672, 724], "flexibl": [672, 689, 691, 697, 700, 705, 707, 724], "everyon": [672, 676, 677, 682, 683, 717], "plan": [672, 716, 718], "interoper": [672, 675, 721, 722, 724, 727], "easiest": [672, 679, 682, 718], "command": [672, 679, 682, 685, 688, 690, 696, 718], "python3": [672, 678, 682, 683], "pre": [672, 678, 681, 704, 714, 717, 718, 724], "pull": [672, 676, 677, 678, 681, 682, 685, 693, 696, 705, 707, 717, 718], "unifyai": [672, 678, 679, 682, 683, 688, 718], "everyth": [672, 676, 681, 682, 683, 684, 690, 693, 701, 702, 703, 704, 705, 710, 717, 718], "sweat_smil": 672, "git": [672, 678, 679, 680, 682, 683, 685, 688, 690, 696, 704, 718], "clone": [672, 678, 679, 683, 696, 718], "com": [672, 678, 679, 682, 685, 688, 690, 691, 718], "cd": [672, 678, 679, 682, 683, 718], "page": [672, 681, 682, 683, 688, 690, 710, 711, 714, 715, 718], "instruct": [672, 681, 682, 685, 695, 696, 703, 704, 718, 722, 725, 728, 730], "video": [672, 677, 682, 683, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 718, 722], "tutori": [672, 683, 702, 718], "quit": [672, 683, 686, 693, 694, 698, 699, 704, 707, 724, 730], "lot": [672, 675, 676, 690, 691, 699, 704, 717, 723], "jax_fn": 672, "jax_x": 672, "torch_x": 672, "torch_fn": 672, "focus": [672, 705, 716, 722, 723, 724, 730, 731], "architectur": [672, 682, 714, 717, 722, 723, 724, 727, 728, 729], "orient": [672, 716], "contributor": [672, 677, 682, 683, 702, 708, 724], "nuanc": 672, "background": [672, 682, 688, 724, 726], "contextualis": 672, "problem": [672, 675, 683, 685, 686, 702, 711, 720, 726, 730], "explos": [672, 673, 675], "why": [672, 673, 675, 683, 701, 711], "adher": [672, 674, 675, 685, 691, 694, 697, 707, 709, 714, 720, 721, 730], "lastli": [672, 686], "paint": [672, 674, 709], "pictur": [672, 674, 681, 709], "role": [672, 683, 702, 710, 725, 727, 731], "wide": [672, 683, 704, 722, 724], "demo": [672, 678, 716], "showcas": [672, 693, 716], "shorter": [672, 711], "ensp": 672, "eff_encod": 672, "efficientnet_v2": 672, "efficientnetv2b0": 672, "include_top": 672, "imagenet": 672, "torch_eff_encod": 672, "customiz": [672, 688], "script": [672, 678, 682, 683, 690, 693, 709, 717, 724], "deepmind_perceiver_io": 672, "perceiver_backbon": 672, "dummy_input": 672, "backbon": [672, 709, 712], "perceiverioclassifi": 672, "max_pool": 672, "1024": 672, "sm_framework": 672, "segmentation_model": 672, "sm": 672, "torch_sm": 672, "metric": [672, 717], "iou_scor": 672, "rax": 672, "torch_rax": 672, "poly1_softmax_loss": 672, "madmom": 672, "madmon": 672, "torch_madmom": 672, "freq": 672, "audio": 672, "hz2midi": 672, "reduce_mean": [672, 712, 713, 714], "torch_loss": 672, "output_dens": 672, "maxpooling1d": 672, "pool_siz": 672, "tf_kornia": 672, "sharp": 672, "tf_rax": 672, "tf_madmom": 672, "tf_loss": 672, "hk_eff_encod": 672, "dummy_x": 672, "jax_sm": 672, "jax_madmom": 672, "jax_loss": 672, "jax_enable_x64": 672, "np_kornia": 672, "np_sm": 672, "np_rax": 672, "np_loss": 672, "yourself": [672, 681, 683, 704, 707, 716], "anyon": [672, 675, 677, 683, 690, 717, 730], "classif": [672, 724], "ivynet": 672, "h_w": 672, "extractor": 672, "image_height": 672, "image_width": 672, "favourit": [672, 682], "pure": [672, 694, 697, 702, 707, 711, 714, 717, 724, 730, 731], "generate_batch": 672, "dataset_s": 672, "y_train": 672, "num_correct": 672, "y_pred": 672, "hyperparam": 672, "num_epoch": 672, "model_nam": 672, "epoch_loss": 672, "running_loss": 672, "training_accuraci": 672, "train_loss": 672, "train_correct": 672, "train_loop": 672, "tqdm": 672, "xbatch": 672, "ybatch": 672, "ybatch_encod": 672, "loss_prob": 672, "batch_loss": 672, "set_descript": 672, "set_postfix": 672, "accuracy_percentag": 672, "naverag": 672, "6f": 672, "plot": [672, 724], "_train_summari": 672, "csv": 672, "writer": 672, "writerow": 672, "prepar": [672, 690], "folder": [672, 678, 682, 683, 685, 688, 690, 698, 702, 704, 705, 706], "believ": [672, 675, 683], "feedback": [672, 690], "welcom": [672, 677, 682, 683], "appreci": 672, "amaz": 672, "acceler": [672, 702, 722, 726, 727, 728, 729], "journei": [672, 677], "achiev": [672, 690, 691, 699, 704, 707, 712, 714, 719], "ambiti": 672, "season": 672, "perfect": [672, 716], "idea": [672, 676, 678, 681, 705, 710, 716, 723], "fellow": 672, "twitter": 672, "sneak": 672, "peek": 672, "certainli": [672, 675, 730], "great": [672, 675, 676, 683, 704, 709, 711, 730], "stai": [672, 690], "credit": 672, "accompani": 672, "articl": [672, 696], "lenton2021ivi": 672, "titl": [672, 681, 683, 688], "templat": [672, 683, 688, 694, 704], "inter": [672, 703], "author": [672, 681, 683, 722, 726], "lenton": 672, "daniel": 672, "pardo": 672, "fabio": 672, "falck": 672, "fabian": 672, "jame": 672, "stephen": 672, "clark": 672, "ronald": 672, "journal": 672, "arxiv": 672, "preprint": 672, "2102": 672, "02886": 672, "year": [672, 674, 676, 685, 717, 724], "huge": [673, 675, 690, 712, 724, 730], "collabor": [673, 674, 675], "consortium": [673, 675], "grown": 674, "consider": [674, 681, 693, 697, 707, 721, 722], "especi": [674, 682, 724], "rapidli": 674, "repo": [674, 678, 680, 683, 685, 688, 690, 691, 703, 704, 705], "wonder": [674, 676, 711], "thing": [674, 675, 676, 680, 681, 682, 683, 687, 702, 704, 707, 711, 712, 724], "evolv": [674, 724], "shareabl": 674, "hinder": [674, 697], "outdat": 674, "matter": [674, 693], "month": [674, 682], "rigor": [674, 704], "newest": 674, "softwar": [674, 675, 682, 683, 722, 727, 728, 729], "rapid": [674, 675, 682, 724], "prototyp": [674, 724], "vital": [674, 714], "signific": [674, 675, 706, 717, 724], "bottleneck": 674, "quickli": [674, 676, 682, 683, 690, 712, 713, 724, 731], "obsolet": [674, 676], "constantli": [674, 705, 707], "invent": 674, "wheel": 674, "simultan": [674, 676], "modern": [674, 675, 700, 729], "scalabl": [674, 709, 729, 730], "languag": [674, 676, 702, 709, 719, 722, 725, 727, 728, 729, 730], "front": [674, 702, 708, 709, 712, 722, 724], "runner": 674, "littl": [674, 711, 726], "principl": [674, 722, 724, 727], "almost": [674, 680, 689, 703, 710, 712], "syntax": [674, 675, 691, 724], "unsurprisingli": [674, 693], "fundament": [674, 690, 702, 707, 709, 724], "2006": 674, "cloth": 674, "central": [675, 681, 696, 707, 730], "forgiven": 675, "eyebrow": 675, "somehow": 675, "industri": [675, 724, 726], "wors": 675, "funni": 675, "comic": 675, "strip": 675, "easi": [675, 682, 683, 686, 689, 698, 700, 703, 704, 707, 722, 724, 730, 731], "charger": 675, "charact": [675, 702], "instant": 675, "mandat": [675, 691, 701, 704, 705], "adopt": [675, 683, 686, 697, 707, 723, 724, 729], "despit": [675, 689, 691, 692, 703, 709, 721, 724], "bring": [675, 685, 704, 709, 710, 719], "benefit": [675, 676, 682, 686, 689, 701, 707, 711, 712, 717, 722, 726, 729], "unrel": [675, 683], "contrari": 675, "bumpi": 675, "road": 675, "allud": [675, 712], "technologi": [675, 722, 726], "thank": [675, 712], "bio": [675, 682], "pcie": 675, "motherboard": 675, "raid": 675, "storag": [675, 712], "virtual": [675, 678, 683, 702, 727, 728], "bluetooth": 675, "wireless": 675, "exchang": [675, 680, 720, 722], "btx": 675, "sata": 675, "host": [675, 679, 690, 717, 729], "websit": [675, 682, 685], "tcp": 675, "ip": 675, "commun": [675, 677, 681, 682, 683, 717, 723, 724, 726], "smtp": 675, "send": [675, 729], "gmail": [675, 690], "outlook": 675, "pop": [675, 682], "email": [675, 690], "live": [675, 676, 688, 691, 720, 722], "did": [675, 681, 688, 714, 730], "aris": [675, 691, 696, 717], "substanti": [675, 683, 686, 691, 704, 724], "innov": 675, "growth": [675, 727], "necess": 675, "parti": [675, 688, 717, 723, 724, 730], "engag": [675, 677, 683], "regard": [675, 680, 689, 702, 703, 707], "2015": [675, 724], "frame": [675, 716, 724], "matur": [675, 717, 724], "preced": [675, 713], "aros": 675, "effort": [675, 677, 681, 717, 720, 724, 730], "stage": [675, 677, 683, 684, 688, 704, 724], "mission": [675, 726], "At": [675, 681, 682, 685, 704, 705, 724], "ourselv": [675, 730], "quansight": [675, 730], "compani": [675, 720], "organ": [675, 686, 689, 698, 702, 705, 719], "panda": 675, "scipi": [675, 681, 726, 731], "conda": [675, 682, 726], "apach": [675, 726, 730], "onnx": [675, 722, 730], "scikit": 675, "jupyt": [675, 726], "cupi": [675, 724, 731], "net": [675, 676, 709, 714], "sympi": 675, "modin": 675, "spyder": 675, "googl": [675, 690], "octoml": [675, 730], "sponsor": 675, "lg": 675, "electron": 675, "shaw": 675, "intel": [675, 682, 722, 729], "promis": 675, "pursuit": 675, "unif": [675, 677, 711, 720, 730], "clearli": [675, 681, 683, 693, 703, 704, 728], "thought": [675, 682, 683, 697, 722], "care": [675, 683, 702, 707, 714], "gone": [675, 708], "excit": [675, 677, 684], "complianc": 675, "hope": [675, 717, 730], "suit": [675, 682, 684, 685, 690, 704, 712, 716, 719, 724, 730], "motiv": [675, 711], "convinc": 675, "celebr": 675, "encourag": [675, 696, 716, 717], "foundat": [675, 727], "happi": [676, 682, 717], "abund": 676, "better": [676, 678, 681, 684, 702, 703, 705, 707, 708, 711, 712, 713, 727], "streamlin": [676, 727], "workflow": [676, 681, 683, 687, 691, 700, 702, 712, 715, 719, 723, 730, 731], "week": [676, 683], "sai": [676, 681, 682, 699, 711], "deepmind": 676, "releas": [676, 681, 682, 691, 705, 707, 717, 724, 730], "awesom": 676, "love": 676, "perceiverio": 676, "slew": 676, "rush": 676, "inevit": [676, 725], "often": [676, 680, 685, 695, 697, 698, 702, 704, 717, 725, 728, 731], "erron": 676, "poor": 676, "repositori": [676, 678, 679, 682, 683, 684, 685, 696], "confus": [676, 691, 695, 701, 707, 719], "hour": [676, 690], "spent": 676, "spin": 676, "discuss": [676, 681, 683, 688, 691, 692, 701, 702, 704, 707, 710, 711, 712, 717, 720, 725], "sake": 676, "few": [676, 680, 681, 683, 689, 691, 692, 697, 698, 700, 701, 704, 707, 709, 710, 711, 712, 713, 715, 724, 726], "wouldn": 676, "nice": [676, 704, 724], "frantic": 676, "lucid": 676, "honk": 676, "understand": [676, 678, 680, 681, 682, 683, 684, 685, 688, 693, 694, 697, 703, 708, 720, 730], "hasn": 676, "spend": [676, 724], "torchvis": 676, "sonnet": 676, "statu": [676, 681, 690, 696], "quo": 676, "dopamin": 676, "ignit": 676, "catalyst": 676, "lightn": 676, "fastai": 676, "trax": [676, 714], "objax": [676, 714], "offer": [676, 698, 702, 713, 724, 730, 731], "strongli": [677, 682, 702, 730, 731], "skill": [677, 726], "veteran": 677, "beginn": [677, 724], "aspect": [677, 700, 712, 724], "board": [677, 688], "basic": [677, 681, 693, 704], "local": [677, 678, 682, 685, 688, 698, 703, 704], "resourc": [677, 681, 682, 690], "slightli": [678, 689, 702, 709, 713], "setup": [678, 682, 683, 688, 690], "mech": [678, 679], "grasp": [678, 702], "dir": [678, 712], "mutual": [678, 689, 698], "venv": 678, "ivy_dev": [678, 682, 683], "bat": [678, 682, 683], "mac": [678, 682, 683], "linux": [678, 682, 683, 727, 729], "instal": [678, 679, 682, 683, 687, 688, 696, 716], "edit": [678, 681, 682, 683], "pip": [678, 682, 688, 696, 716], "immedi": [678, 682], "ivy_robot": [678, 716], "docker": [678, 680], "desktop": [678, 682], "my": [678, 690], "mount": [678, 679, 683], "rm": [678, 679, 683], "pwd": [678, 679], "pycharm": [678, 704], "vscode": [678, 682], "devcontain": [678, 682], "remot": [678, 682, 685], "codespac": 678, "good": [678, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 707, 709, 710, 713], "commit": [678, 681, 685, 693, 704], "make_doc": 679, "sh": [679, 682, 683, 685, 690], "ssh": [679, 690], "make_docs_without_dock": [679, 688], "sphinx": [679, 688], "resours": 680, "climb": 680, "steep": 680, "curv": 680, "realpython": 680, "pyn": 680, "platform": [680, 722, 726, 728], "stuck": [680, 681], "spell": 680, "though": [680, 681, 683, 691, 694, 698, 701, 702, 707, 712, 717], "sound": [680, 690, 708], "peopl": [680, 682, 683, 684, 724, 726], "action": [680, 690, 693, 696, 704], "frequent": [681, 683, 724], "outlin": [681, 682, 683, 684, 689, 691, 694, 698, 701, 702, 704], "broad": [681, 726], "individu": [681, 683, 685, 691, 698, 702, 724, 727, 730, 731], "explan": [681, 682, 683, 689, 694, 697, 702, 705, 711], "focu": [681, 700, 722, 723, 726, 731], "pypi": [681, 682, 717], "familiar": [681, 682], "sure": [681, 682, 683, 685, 690, 695, 702, 703, 704, 707, 718], "aforement": 681, "categori": [681, 685, 686, 689, 691, 695, 702, 705, 708], "arraywithelementwis": [681, 686, 711], "containerwithmanipul": 681, "thorough": [681, 694, 697, 704], "comment": [681, 682, 683, 685, 691, 696, 702, 707], "add_reformatting_checklist_": 681, "category_nam": [681, 691, 692, 694, 697, 698], "pr": [681, 683, 685, 696, 702, 703, 704], "autom": [681, 690, 696, 704, 719, 726], "bot": [681, 696], "markdown": [681, 688], "patient": [681, 682], "symbol": [681, 682, 724, 725], "emoji": 681, "legend": 681, "review": [681, 683, 690, 693, 702, 705], "checkbox": [681, 682], "proce": [681, 682], "elabor": 681, "struggl": 681, "assigne": 681, "status": 681, "refrain": 681, "mindspor": 681, "subsect": [681, 682, 683, 685, 690], "verifi": [681, 691, 692, 702, 704, 705], "assess": [681, 707], "merg": [681, 683, 685, 690, 702, 724], "composition": 681, "pend": 681, "helpfulli": [681, 707, 722], "problemat": [681, 682], "unimpl": 681, "issue_link": 681, "alias_nam": 681, "push": [681, 683, 685, 703, 704, 730], "liner": 681, "meanwhil": [681, 690], "reselect": 681, "placement": 681, "categoris": [681, 685, 702], "faithfulli": 681, "creation_routin": [681, 703], "indexing_routin": 681, "ma": 681, "manipulation_routin": 681, "mathematical_funct": [681, 702], "sorting_searching_count": 681, "ufunc": [681, 702], "matrix_and_vector_product": 681, "matrix_eigenvalu": 681, "norms_and_other_numb": 681, "solving_equations_and_inverting_matric": 681, "seem": [681, 682, 707, 713, 714, 717, 724], "gleam": 681, "uncom": 681, "test_numpy_inn": 681, "test_frontend": [681, 690, 703], "unsur": [681, 704], "explor": [681, 682, 683, 691, 707, 710, 714, 716, 724, 727], "confirm": 681, "worri": [681, 682, 696], "readi": [681, 682], "analyz": [681, 719], "relevant_submodul": 681, "encount": [681, 691, 695, 704], "funcion": 681, "defer": [681, 686, 689, 691, 692, 698, 699, 701, 702, 704, 730], "clearer": [681, 695, 703, 712], "backend_nam": [681, 687, 691, 692, 694, 697, 698, 699], "approach": [681, 682, 683, 686, 689, 691, 698, 702, 704, 707, 711, 712, 717, 721, 728, 730], "implementaion": 681, "compost": 681, "sometim": [681, 682, 683, 685, 691, 698, 702, 704, 705, 707], "standalon": [681, 686, 704, 719, 720, 725, 730, 731], "conveni": [681, 691, 692, 697, 703, 710, 712, 713, 719, 730], "rare": [681, 692, 717, 729], "come": [681, 682, 683, 686, 690, 702, 705, 706, 707, 713, 715, 719, 724], "tab": [681, 682, 690, 712], "click": [681, 682, 683, 690, 694, 696, 710], "button": [681, 682, 683], "centr": 681, "predetermin": 681, "report": [681, 704], "superset": [681, 684, 701, 717], "reserv": 681, "interact": [681, 723, 724, 729], "submit": [681, 696], "your_usernam": 682, "gh": 682, "your_fold": 682, "enter": [682, 683, 686, 691, 692, 697, 699], "sync": [682, 685], "nutshel": [682, 697], "hook": [682, 696], "lint": 682, "attempt": [682, 706, 717], "properli": [682, 684, 695, 702, 704], "cours": [682, 683, 685, 686, 693, 701, 702, 705, 707, 712, 717, 729, 730], "whatev": [682, 689, 717], "elig": 682, "student": 682, "licenc": 682, "remind": 682, "licens": [682, 727], "expir": 682, "profession": 682, "trial": 682, "jetbrain": 682, "bui": [682, 730], "paid": 682, "pace": 682, "person": [682, 683], "experi": [682, 695, 704, 710, 712, 717], "abil": [682, 707, 710, 717, 724], "perhap": [682, 711, 712, 713, 717, 730], "icon": [682, 683], "panel": 682, "palett": 682, "ctrl": [682, 683], "On": [682, 691, 702, 704, 707, 710, 714], "m1": 682, "optional_m1_1": 682, "optional_m1_2": 682, "builtin": [682, 711, 713], "cmd": 682, "virtualenv": 682, "tick": [682, 683, 690], "array_api_test": [682, 683, 685], "test_array_api": [682, 683, 685, 704], "mitig": [682, 730], "conflict": [682, 683, 690, 702, 712], "powershel": 682, "admin": 682, "visit": [682, 683, 690], "menu": 682, "tag": [682, 683], "introspect": 682, "usr": 682, "dialog": 682, "persist": 682, "opt": [682, 687, 691, 701, 704, 705, 707], "caus": [682, 683, 685, 687, 689, 690, 691, 693, 701, 703, 704, 717], "earlier": [682, 683, 691], "virtualis": 682, "dropdown": [682, 690], "dockerfil": 682, "navig": [682, 683, 684], "sudo": 682, "apt": 682, "ca": 682, "certif": 682, "curl": 682, "gnupg": 682, "lsb": 682, "mkdir": [682, 690], "keyr": 682, "fssl": 682, "gpg": 682, "dearmor": 682, "deb": 682, "arch": 682, "dpkg": 682, "lsb_releas": 682, "tee": 682, "null": 682, "ce": 682, "cli": 682, "containerd": 682, "io": [682, 690], "plugin": 682, "systemctl": 682, "permiss": [682, 690], "press": [682, 683, 712], "ok": 682, "successful": 682, "4a": 682, "socket": 682, "chmod": [682, 690], "rwx": 682, "sock": 682, "pid": 682, "coupl": [682, 686, 711, 713, 724], "test_ab": [682, 704], "editor": 682, "pytest": [682, 683, 685, 690, 699, 704], "keyboard": 682, "displai": [682, 688, 689, 690, 695, 704, 712], "screenshot": 682, "test_elementwis": 682, "bar": 682, "shell": [682, 683], "run_tests_cli": [682, 685], "run_ivy_core_test": 682, "run_ivy_nn_test": 682, "run_ivy_stateful_test": 682, "run_test": [682, 690], "test_depend": 682, "test_ivy_cor": 682, "test_ivy_nn": 682, "test_ivy_st": 682, "unix": 682, "test_": [682, 703], "test_cor": [682, 683, 703], "bash": [682, 683, 685], "offici": [682, 691, 709], "wish": [682, 702], "ivy_cor": 682, "ivy_nn": 682, "ivy_st": 682, "simplest": [682, 693, 704, 707], "header": [682, 683], "advanc": [682, 723], "arrow": 682, "test_stat": 682, "test_submodule_nam": 682, "test_function_nam": 682, "debugg": 682, "studio": [682, 704], "afterward": [682, 712], "restart": 682, "overlap": [682, 690, 705, 707, 725], "test_file_path": 682, "test_fn_nam": 682, "engin": [682, 724, 726, 727], "comma": 682, "postcreatecommand": 682, "post_create_command": 682, "poststartcommand": 682, "safe": [682, 702], "containerworkspacefold": 682, "reopen": 682, "test_fle_path": 682, "slash": 682, "comfort": [682, 695], "isol": [682, 683, 725, 730], "fledg": [682, 709, 710], "container": 682, "intens": 682, "headach": 682, "arm": [682, 683], "vm": [682, 690], "azur": 682, "cloud": [682, 690, 716, 726], "longer": [682, 691, 701, 704, 724], "theme": [682, 688], "slow": 682, "ipad": 682, "browser": [682, 688], "quota": 682, "requisit": 682, "pane": [682, 683, 690], "six": [682, 707], "dockerfilegpu": 682, "ivv": 682, "multiv": 682, "multivers": 682, "dockerfilemultivers": 682, "dockerhub": 682, "region": 682, "box": 682, "upto": [682, 683], "minut": [682, 690], "launch": 682, "colour": 682, "chanc": 682, "troubleshoot": 682, "ever": [682, 701], "flask": 682, "toolbar": [682, 683], "_array_modul": [682, 685], "refresh": 682, "workspac": 682, "pytestarg": 682, "unittesten": 682, "pytesten": 682, "conftest": 682, "quick": [683, 684, 703, 713], "tendenc": 683, "land": 683, "world": [683, 726], "fly": [683, 724], "hard": [683, 711, 724], "respons": [683, 690, 691], "internship": 683, "serv": [683, 686, 689, 697, 698, 702, 703, 704, 707, 708, 719, 722], "suspect": 683, "iii": 683, "reformat": [683, 696], "issue_numb": 683, "delet": [683, 690], "clean": [683, 705, 709, 710, 712], "rememb": 683, "respond": 683, "master": [683, 685, 690, 705, 724], "dai": [683, 696], "freed": 683, "basi": [683, 685, 712], "situat": [683, 690, 714], "upon": [683, 693, 701, 704, 707, 717, 723, 724], "unabl": [683, 707], "obvious": [683, 690], "qualiti": 683, "hypothet": 683, "frustrat": 683, "busi": 683, "fine": [683, 691, 693, 702, 711, 714, 730], "inact": 683, "me": 683, "unfairli": 683, "investig": 683, "wherea": [683, 686, 689, 691, 692, 693, 697, 698, 704, 705, 714, 721], "invit": [683, 702, 707], "roadmap": [683, 690], "think": [683, 690, 693, 707, 725], "deem": [683, 702], "subtask": 683, "practic": [683, 690, 702, 727], "checkout": [683, 685, 704], "name_of_your_branch": 683, "date": [683, 705], "complic": [683, 703, 709], "merge_with_upstream": 683, "abort": 683, "tediou": [683, 693, 707], "stash": [683, 696], "reinstat": 683, "fetch": [683, 685, 690], "uncommit": 683, "unstag": [683, 696], "untrack": 683, "comprehens": [683, 685], "atlassian": 683, "wrote": 683, "blame": 683, "revis": 683, "eg": 683, "grep": 683, "commit_id": 683, "handi": 683, "histori": 683, "toggl": 683, "highlight": [683, 690, 693, 702], "whenev": [683, 690, 691, 695, 699, 701, 704, 706, 712], "approv": 683, "someon": [683, 717], "hash": [683, 712], "cancel": 683, "speedup": 683, "unavail": 683, "tickbox": 683, "span": [683, 722, 730], "intent": [683, 701], "discourag": 683, "philosophi": 683, "valuabl": 683, "infrequ": 683, "earli": [683, 724], "wast": [683, 690], "spot": [683, 693, 698], "mistak": 683, "propos": [683, 702, 707, 724], "mountain": 683, "advoc": [683, 717], "actual": [683, 684, 690, 698, 699, 701, 702, 703, 704, 707, 708, 713, 717, 725, 730], "aim": [683, 685, 699, 702, 704, 708, 722, 724, 727], "session": [683, 724], "beauti": 683, "concern": [683, 684, 689, 691, 693, 701, 707, 708, 730], "undo": 683, "stress": 683, "nifti": 683, "reassur": 683, "fact": [683, 685, 690, 702, 704, 709, 712], "local_path_to_ivi": 683, "subfold": [683, 703, 704, 705], "dep": 683, "fresh": 683, "arsen": 683, "declar": 683, "exec": 683, "rf": 683, "cp": 683, "ivy_contain": 683, "test_imag": 683, "test_random_crop": 683, "test_creation_funct": 683, "test_arang": 683, "cursor": 683, "alt": 683, "blog": 683, "breakpoint": 683, "gutter": 683, "caret": 683, "f8": 683, "f9": 683, "Into": 683, "f7": 683, "smart": 683, "fragment": [683, 720, 722, 726], "pychram": 683, "dummi": 683, "wherein": [683, 698, 704], "failur": [683, 690, 703, 704], "who": [684, 695, 708, 717, 724, 726], "weed": [684, 708], "tour": 684, "goe": [684, 696, 701, 707], "runtim": [684, 698, 704, 707, 724], "borrow": 684, "conjunct": 685, "establish": [685, 726], "2020": [685, 724], "popular": [685, 724], "sens": [685, 693, 702, 711], "unconnect": 685, "decis": [685, 689, 691, 707, 709, 711, 724], "initialis": [685, 702, 704], "everytim": [685, 691], "thoroughli": 685, "test_linalg": [685, 703], "test_set_funct": 685, "test_signatur": 685, "excess": [685, 687, 693], "array_modul": 685, "vv": 685, "test_manipulation_funct": 685, "test_concat": [685, 704], "nb": 685, "liber": 685, "fortun": 685, "falsifi": [685, 704], "______________________": 685, "test_remaind": 685, "_______________________": 685, "test_operators_and_elementwise_funct": 685, "1264": 685, "1277": 685, "binary_param_assert_against_refimpl": 685, "ctx": 685, "mod": 685, "620": 685, "binary_assert_against_refimpl": 685, "324": 685, "scalar_o": 685, "17304064": 685, "binaryparamcontext": 685, "reproduce_failur": [685, 699, 704], "axic42baaowcnp": 685, "rumwmabaear0": 685, "make_binary_param": 685, "dh": 685, "numeric_dtyp": 685, "left_strat": 685, "left_sym": 685, "right_strat": 685, "right_sym": 685, "right_is_scalar": 685, "binary_param_assert_dtyp": 685, "binary_param_assert_shap": 685, "recreat": 685, "unexpectedli": 685, "discrep": [685, 703], "varieti": [685, 690, 691, 692, 704, 706, 720, 722, 726, 727, 730, 731], "test_asarray_arrai": 685, "test_floor_divid": 685, "health": 685, "test_iop": 685, "__imod__": 685, "isequ": 685, "test_matrix_norm": 685, "alter": 685, "tweak": 685, "array_api_methods_to_test": 685, "test_trac": 685, "scheme": [685, 713, 724], "test_special_cas": 685, "__ipow__": 685, "is_integ": 685, "easier": [685, 686, 691, 703, 705, 719, 724, 726], "revisit": [685, 697], "_data": [686, 701, 702, 711], "organiz": [686, 689, 702], "inherit": [686, 689, 695, 711, 717, 719], "bear": [686, 689, 691, 702], "underpin": [686, 689, 709], "programmat": [686, 689, 725], "backup": [686, 688, 689], "accident": [686, 689, 702], "readabl": [686, 689, 695, 696, 697, 704, 705, 711, 712], "absent": [686, 689], "auto": [686, 688, 689, 696, 712], "__mul__": [686, 689, 693, 697, 707, 711], "throw": [686, 691, 695, 711, 724], "imposs": 686, "inputs_to_native_arrai": [686, 698, 699], "outputs_to_ivy_arrai": [686, 691, 692, 697, 698, 699], "firstli": [686, 691, 693, 694, 695, 698, 699, 701, 707, 712, 720, 730], "anywai": [686, 699, 702], "secondli": [686, 691], "permit": [686, 697, 702, 704, 707], "__ivy_array_function__": 686, "inspir": [686, 716], "__torch_function__": 686, "myarrai": 686, "handled_funct": 686, "notimpl": 686, "four": [686, 691, 693, 697, 698, 704, 707, 712], "enough": [686, 690, 704, 711, 712, 713], "ivy_funct": 686, "my_ab": 686, "my_arrai": 686, "Of": [686, 701, 702, 712, 729, 730], "implicit_backend": [687, 709], "__dict__": [687, 701, 709], "ivy_original_dict": [687, 709], "get_backend": [687, 698], "fallback": 687, "set_dynamic_backend": 687, "backend_handl": [687, 709], "requires_grad": 687, "memory_format": 687, "preserve_format": 687, "weren": 687, "vast": [687, 691, 724], "minor": [687, 707, 717], "fn_name_v_1p12_and_abov": 687, "fn_name_v_1p01_to_1p1": 687, "heavili": [688, 699, 717], "characterist": 688, "conf": 688, "cleanup": 688, "disabl": 688, "procedur": [688, 690, 693, 703], "readm": [688, 717], "toctre": 688, "maxdepth": 688, "caption": 688, "related_work": 688, "deep_div": 688, "faq": 688, "glossari": 688, "autosummari": 688, "top_functional_toc": 688, "restructuredtext": 688, "render": [688, 694], "inlin": 688, "discov": [688, 691], "ivy_toctree_caption_map": 688, "stub": 688, "inturn": 688, "unfortun": [688, 696], "forc": [688, 690], "linker": 688, "foo": 688, "discussion_channel_map": 688, "1000043690254946374": 688, "1028298816526499912": 688, "1000043749088436315": 688, "1028298847950225519": 688, "seri": [688, 702, 704, 724, 726], "discussion_paragraph": 688, "discord_link": 688, "channel_link": 688, "forum_link": 688, "gg": 688, "zvqdvbznqj": 688, "799879767196958751": 688, "channel_id": 688, "forum_id": 688, "paragraph": 688, "autoskippablemethod": 688, "skippable_method_attribut": 688, "__qualname__": 688, "autodoc": 688, "atribut": 688, "__doc__": 688, "pars": [688, 693, 717], "autoivydata": 688, "five": [689, 712], "recap": [689, 693, 713], "multi_map": 689, "containerwithelementwis": 689, "__repr__": 689, "__contains__": 689, "__getstate__": 689, "__setstate__": 689, "unpickl": 689, "num_dim": [689, 714], "__len__": 689, "enforc": [689, 711], "extern": [689, 697, 702, 704, 705], "lefthand": 689, "righthand": 689, "handle_nest": [689, 697, 698, 699, 709], "addition": [689, 701, 702, 730], "absenc": [689, 697, 724], "implicitli": [689, 700, 704, 709], "log_pr": [689, 698, 701], "intuit": [689, 704, 712, 713, 720], "chronolog": 689, "concurr": [689, 690, 698, 724], "had": [689, 690, 701, 709, 724, 725], "implic": 689, "whatsoev": [689, 698, 719, 730], "eager": [689, 717, 724], "children": 689, "shallowest": 689, "deepest": 689, "regularli": 690, "rollback": 690, "incorpor": [690, 703, 712, 724], "fold": 690, "techniqu": 690, "subser": 690, "triplet": 690, "test_torch": [690, 703], "test_tensor": [690, 703], "test_torch_instance_arctan_": 690, "12500": 690, "daili": 690, "shoot": 690, "ideal": [690, 702, 707, 712], "impact": [690, 704, 713, 726], "_reduce_loss": [690, 698, 701], "test_nn": 690, "test_loss": 690, "test_binary_cross_entropy_with_logit": 690, "test_cross_entropi": 690, "test_binary_cross_entropi": 690, "test_sparse_cross_entropi": 690, "test_loss_funct": 690, "test_torch_binary_cross_entropi": 690, "test_torch_cross_entropi": 690, "binary_cross_entropy_with_logit": 690, "torch_binary_cross_entropi": 690, "torch_cross_entropi": 690, "underneath": [690, 722], "magic": 690, "readthedoc": 690, "affect": [690, 702], "pedagog": 690, "f_1": 690, "t_1": 690, "t_3": 690, "t_7": 690, "t_": 690, "f_m": 690, "cyclic": 690, "intellig": [690, 704, 726], "tests_fil": 690, "file_nam": [690, 704, 705], "del": 690, "tests_lin": 690, "elif": [690, 695, 701, 702, 703], "correspondingli": 690, "tests_to_run": 690, "determine_tests_lin": 690, "mongodb": 690, "databas": [690, 704], "secret": 690, "db": 690, "ssh_deploy_kei": 690, "suffic": [690, 699, 704], "massiv": 690, "constraint": [690, 691, 700], "mb": 690, "yml": 690, "felicit": 690, "clone_map": 690, "home": 690, "deploy_kei": 690, "user_email": 690, "rashul": 690, "chutani": 690, "user_nam": 690, "target_branch": 690, "github_serv": 690, "deploy_key_fil": 690, "ssh_known_hosts_fil": 690, "known_host": 690, "keyscan": 690, "export": [690, 723, 730], "git_ssh_command": 690, "userknownhostsfil": 690, "methodologi": 690, "master1": 690, "restructur": 690, "_map": 690, "t_2": 690, "t_n": 690, "index_map": 690, "test_map": 690, "routin": [690, 701, 702, 707, 717, 724], "incorrect": 690, "snowbal": 690, "irrelev": [690, 691, 693], "recalibr": 690, "workflow_dispatch": 690, "schedul": [690, 717, 724, 731], "cron": 690, "saturdai": 690, "night": 690, "pm": 690, "gut": 690, "lesser": [690, 695], "lol": 690, "cater": 690, "master2": 690, "master32": 690, "synchron": 690, "runner2": 690, "corrupt": 690, "discard": 690, "decoupl": [690, 713], "150": 690, "cycl": [690, 704], "rashulchutani": 690, "yellow": 690, "queu": 690, "redirect": 690, "book": 690, "onrend": 690, "jo": 690, "ran": 690, "badg": 690, "clickabl": 690, "all_dtyp": 691, "all_numeric_dtyp": 691, "all_int_dtyp": 691, "all_float_dtyp": 691, "replic": [691, 693, 700, 701, 702], "thirdli": 691, "native_float32": 691, "importantli": [691, 711, 714, 716], "arguabl": [691, 692, 702], "jaxarrai": [691, 692, 695, 697, 701, 705, 709], "_handle_0_dim_output": 691, "experiment": [691, 702, 705, 709, 724], "subtli": [691, 701], "promote_types_frontend_nam": 691, "promote_types_of_frontend_name_input": 691, "frontend_nam": 691, "demonstr": [691, 693, 695, 711], "accuraci": 691, "upcast": 691, "nearli": [691, 697, 699, 724], "downcast": 691, "footprint": 691, "concret": 691, "compound": 691, "infer_dtyp": [691, 692, 697, 699], "settabl": [691, 692], "handle_out_argu": [691, 692, 697, 698, 699, 701, 709], "infer_devic": [691, 692, 697, 699], "deleg": [691, 731], "shape_to_tupl": 691, "with_supported_dtyp": 691, "with_unsupported_dtyp": [691, 699, 702], "unment": 691, "backend_vers": 691, "_cast_for_unary_op": [691, 698, 701], "target_typ": 691, "unsupported_dtyp": 691, "supported_dtypes_and_devic": 691, "globals_getter_func": 691, "f1": 691, "f2": 691, "lack": [691, 701, 724, 731], "inconsist": [691, 695, 700], "84530": 691, "unwarr": 691, "risk": [691, 730], "needlessli": 691, "bloat": 691, "undergo": [691, 717], "supported_dtyp": 691, "unsupported_devic": 691, "supported_devic": 691, "slight": [691, 704, 713], "downsid": 691, "inflat": 691, "undesir": 691, "accomplish": 691, "upcast_data_typ": 691, "downcast_data_typ": 691, "crosscast_data_typ": 691, "cast_data_typ": 691, "avaiabl": 691, "downcast_data_dtyp": 691, "vice": 691, "versa": 691, "till": 691, "crosscast": 691, "exmp1": 691, "watch": [691, 702], "cate": 691, "understood": 691, "consumpt": [691, 728], "dual": 692, "categor": [692, 698, 702], "eight": [693, 708], "static_func_nam": 693, "op_nam": 693, "__r": 693, "combinatori": 693, "variat": [693, 702, 704], "unus": [693, 701], "okai": [693, 707, 709], "meant": [693, 701], "spec": [693, 694], "my_func": [693, 705], "some_flag": 693, "another_flag": 693, "jointli": 693, "5574077": 693, "1850398": 693, "5463025": 693, "8422884": 693, "91601413": 693, "9647598": 693, "3738229": 693, "1597457": 693, "0963247": 693, "9955841": 693, "3278579": 693, "asid": [693, 716], "14254655": 693, "1578213": 693, "380515": 693, "trivial": [693, 701], "exlud": 693, "failing_fn_nam": 693, "onlin": [693, 694], "minutest": 693, "suffici": [693, 702, 704], "fault": [693, 724], "contrast": [694, 697, 702, 730], "instanti": 694, "preview": 694, "needless": [694, 703], "renam": [694, 702], "judgment": 694, "operator_nam": 694, "succinct": 694, "contstructor": 694, "docst": 694, "native_error": 695, "isinst": [695, 702, 704, 705, 713, 714], "_combine_messag": 695, "truli": [695, 711], "wrong": [695, 696, 699, 702, 707], "198": 695, "_handle_except": 695, "_handle_nest": 695, "392": 695, "_handle_array_like_without_promot": 695, "805": 695, "_handle_out_argu": 695, "432": 695, "_inputs_to_native_arrai": 695, "new_arg": 695, "new_kwarg": 695, "_outputs_to_ivy_arrai": 695, "349": 695, "_handle_array_funct": 695, "other_test": 695, "523": 695, "_handle_numpy_out": 695, "396": [695, 713], "_outputs_to_numpy_arrai": 695, "_inputs_to_ivy_arrays_np": 695, "ivy_arg": 695, "ivy_kwarg": 695, "453": 695, "_from_zero_dim_arrays_to_scalar": 695, "truth_value_test": 695, "switch": [695, 698, 699, 731], "visibl": 695, "unwieldi": 695, "awar": [695, 696], "squash": 695, "hid": 695, "cleaner": [695, 712], "caught": [695, 696], "functool": [695, 702, 711], "rethrow": 695, "_print_traceback_histori": 695, "error_stack": 695, "axiserror": 695, "got": 695, "polici": [695, 699, 704, 706, 716], "moreov": 695, "met": 695, "black": 696, "flake8": 696, "formatt": 696, "linter": 696, "autoflak": 696, "docformatt": 696, "pydocstyl": 696, "cfg": 696, "yaml": 696, "patch1687898304": 696, "8072": 696, "3516aed563": 696, "akshai": 696, "jain": 696, "gui": 696, "cryptic": 696, "garden": 696, "utc": 696, "didn": 696, "adress": 697, "handle_array_like_without_promot": [697, 699], "to_native_arrays_and_back": [697, 699, 709], "handle_array_funct": [697, 699], "handle_numpy_arrays_in_specific_backend": 697, "inputs_to_native_shap": [697, 699], "sole": [697, 705, 723, 724, 725], "rational": 697, "__div__": [697, 707], "dicat": 697, "484": 697, "annot": 697, "brittl": 697, "freeli": 697, "inde": [697, 707, 717, 722], "technic": [697, 701, 717, 724, 726], "original_typ": 697, "cumbersom": 697, "venn": 698, "diagram": [698, 730], "light": [698, 717, 719, 725, 730], "maximis": 698, "encompass": 698, "partial_mixed_handl": [698, 699, 707], "handle_partial_mixed_funct": [698, 699, 707], "compo": 698, "insight": 698, "mixed_backend_wrapp": [698, 701], "to_add": 698, "to_skip": 698, "inputs_to_ivy_arrai": [698, 699], "FOr": 698, "deal": [698, 700, 702, 717], "modif": [698, 724], "briefli": [698, 704, 712], "get_all_arrays_on_dev": 698, "outputs_to_native_arrai": 699, "handle_view_index": [699, 701], "handle_view": [699, 701], "handle_nan": 699, "handle_mixed_funct": 699, "outputs_to_ivy_shap": 699, "to_native_shapes_and_back": 699, "crucial": 700, "scenario": 700, "inter_func": 700, "custom_grad_fn": 700, "args1": 700, "detach": 700, "eas": [700, 724], "captur": [700, 704, 714, 725], "program": [701, 721, 722, 724, 727, 728, 731], "ration": [701, 707], "speak": 701, "val_n": 701, "base_idx": 701, "_manipulation_stack": 701, "base_flat": 701, "_view_ref": 701, "_update_view": 701, "contigu": 701, "c_contigu": 701, "ascontiguousarrai": 701, "copyto": 701, "_is_vari": 701, "tensor_scatter_nd_upd": 701, "is_vari": 701, "_update_torch_view": 701, "predominantli": [701, 705, 716], "support_native_out": [701, 709], "_scalar_output_to_0d_arrai": 701, "_wrap_fn": 701, "dim0": 701, "dim1": 701, "res_floor": 701, "mul": [701, 711], "extent": [701, 702], "maxim": [701, 709, 721, 722, 726, 727, 728], "to_out_fn": 701, "add_wrapp": 701, "input_arrai": 701, "mostli": [701, 704], "metadata": 701, "paradigm": [701, 717, 724], "expans": 701, "brief": [701, 704], "weak": 701, "_torch_bas": 701, "_torch_view_ref": 701, "_torch_manipul": 701, "weakli": 701, "adequ": 701, "exhaust": [701, 704, 721, 730], "tf_frontend": 702, "lax": [702, 703, 707, 714, 717], "torch_frontend": [702, 703], "numpy_frontend": 702, "jax_frontend": 702, "to_ivy_arrays_and_back": [702, 703], "fidel": 702, "algebra": [702, 722, 723, 724, 727, 731], "xla": [702, 717, 719, 724], "dynamic": 702, "mimic": 702, "arithmetic_oper": 702, "handle_numpy_out": 702, "handle_numpy_dtyp": 702, "handle_numpy_cast": 702, "from_zero_dim_arrays_to_scalar": 702, "_add": 702, "same_kind": 702, "subok": [702, 703, 707], "promote_types_of_numpy_input": 702, "underscor": 702, "unhandl": 702, "trigonometric_funct": 702, "_tan": 702, "check_tensorflow_cast": 702, "raw_op": [702, 703], "tackl": 702, "map_raw_ops_alia": 702, "unnecessari": 702, "output_typ": 702, "kwargs_to_upd": 702, "implemnt": 702, "pointwise_op": 702, "slower": 702, "sensibl": 702, "ahead": [702, 724], "reduce_logsumexp": 702, "input_tensor": 702, "logsumexp": 702, "trick": 702, "max_input_tensor": 702, "meet": 702, "preferred_element_typ": 702, "finer": 702, "margin": 702, "logicaland": 702, "np_frontend": 702, "_ivy_arrai": 702, "radd": 702, "_init_data": 702, "_process_str_data": 702, "_dtype": [702, 703, 711], "_shape": [702, 711], "govern": 702, "promote_types_of_": 702, "_input": 702, "promote_types_of_torch_input": [702, 703], "saniti": 702, "func_wrapp": [702, 706], "handle_numpy_casting_speci": 702, "new_fn": 702, "equiv": 702, "unsaf": 702, "array_type_test": 702, "_isfinit": 702, "organis": 702, "youtub": 702, "jump": 703, "knowledg": 703, "lift": [703, 725], "np_frontend_help": 703, "test_jax": 703, "test_lax": 703, "test_oper": 703, "dtype_and_x": [703, 704], "test_jax_tan": 703, "backend_fw": 703, "test_numpi": 703, "test_mathematical_funct": 703, "test_trigonometric_funct": 703, "dtypes_values_cast": 703, "dtypes_values_casting_dtyp": 703, "arr_func": 703, "get_num_positional_args_ufunc": 703, "test_numpy_tan": 703, "handle_where_and_array_bool": 703, "test_tensorflow": 703, "test_math": 703, "test_tensorflow_tan": 703, "test_pointwise_op": 703, "test_torch_tan": 703, "_fill_valu": 703, "test_glob": 703, "test_jax_ful": 703, "test_from_shape_or_valu": 703, "_input_fill_and_dtyp": 703, "dtype_and_input": 703, "dtype_to_cast": 703, "input_fill_dtyp": 703, "test_numpy_ful": 703, "test_raw_op": 703, "test_tensorflow_fil": 703, "test_creation_op": 703, "with_arrai": 703, "test_torch_ful": 703, "add_nois": 703, "all_clos": 703, "_get_dtype_and_matrix": 703, "test_torch_qr": 703, "frontend_ret": 703, "frontend_q": 703, "frontend_r": 703, "walkthrough": 703, "comparison_op": 703, "test_comparison_op": 703, "test_torch_great": 703, "test_ndarrai": 703, "test_numpy_instance_add__": 703, "test_tensorflow_instance_add": 703, "1e04": 703, "allow_infin": 703, "test_torch_instance_add": 703, "_arrays_idx_n_dtyp": 703, "test_manipul": [703, 704], "surprisingli": 703, "closest_relevant_group": 703, "strive": [703, 704, 707, 717, 726], "fixtur": 704, "eleg": [704, 724], "unexplor": 704, "upload": 704, "artifact": 704, "bespok": 704, "_array_or_typ": 704, "test_default_int_dtyp": 704, "clariti": [704, 707, 724], "print_hypothesis_exampl": 704, "custom_strategi": 704, "randomis": 704, "simplist": 704, "intricaci": 704, "glanc": 704, "capabl": [704, 707], "stratigi": 704, "one_of": 704, "datum": 704, "pipe": 704, "shorthand": 704, "array_or_scal": 704, "len_of_arrai": 704, "test_add": 704, "test_gpu_is_avail": 704, "requri": 704, "summara": 704, "pretest": 704, "slighlti": 704, "pytet": 704, "thankfulli": 704, "seamlessli": 704, "criterion": 704, "valid_ax": 704, "craft": 704, "hoc": 704, "11228": 704, "456": 704, "268": 704, "wherev": 704, "9622": 704, "28136": 704, "6375": 704, "12720": 704, "21354": 704, "900e": 704, "57384": 704, "25687": 704, "248": 704, "test_devic": 704, "array_shap": 704, "common_shap": 704, "test_lay": 704, "stand": 704, "some_sequ": 704, "arrays_valu": 704, "36418": 704, "213": 704, "21716926": 704, "none_or_list_of_float": 704, "get_prob": 704, "103515625e": 704, "099609375": 704, "probabilist": 704, "number_positional_argu": 704, "unreproduc": 704, "x_and_linear": 704, "is_torch_backend": 704, "x_shape": [704, 709], "weight_shap": 704, "bias_shap": 704, "ivy_np": 704, "valid_float_dtyp": 704, "test_demo": 704, "failing_test": 704, "traceback": 704, "shrink": 704, "prescrib": 704, "scratch": 704, "therebi": 704, "test_gelu": 704, "test_fil": 704, "phase": [704, 717, 724], "notabl": [704, 724], "verbos": [704, 709], "newer": 704, "max_exampl": 704, "deadlin": 704, "weird": 704, "systemat": 704, "safeguard": 704, "inabl": 704, "test_result_typ": 704, "9090909090909091": 704, "judgement": 705, "some_namespac": 705, "some_backend": 705, "another_backend": 705, "refactor": 705, "ongo": 705, "_assert_fill_value_and_dtype_are_compat": 705, "_to_devic": 705, "unbound": 705, "battl": 705, "unsett": 706, "array_significant_figur": 706, "figur": 706, "array_decimal_valu": 706, "warning_level": 706, "nan_polici": 706, "stablest": 706, "answer": [707, 711, 717], "contradict": 707, "entail": 707, "sacrif": 707, "dimems": 707, "jacfwd": 707, "jacrev": 707, "banner": 707, "ravel": 707, "expens": 707, "incredibli": [707, 712, 717, 727], "price": 707, "pai": 707, "intrus": 707, "x_beta": 707, "equip": 707, "priorit": 707, "simplif": 707, "allevi": 707, "ineffici": [707, 717, 724], "fuse": 707, "hybrid": 707, "workaround": 707, "slip": 707, "radar": 707, "stumbl": 707, "fulfil": 708, "syntact": [709, 714], "power_seq": 709, "backend_stack": 709, "_determine_backend_from_arg": 709, "importlib": 709, "_backend_dict": 709, "illustr": [709, 716], "x_flat": 709, "wi": 709, "wi_x": 709, "wii_x": 709, "wif_x": 709, "wig_x": 709, "wio_x": 709, "wh": 709, "ht": 709, "ct": 709, "hts_list": 709, "wii_xt": 709, "wif_xt": 709, "wig_xt": 709, "wio_xt": 709, "zip": 709, "htm1": 709, "ctm1": 709, "wh_htm1": 709, "whi_htm1": 709, "whf_htm1": 709, "whg_htm1": 709, "who_htm1": 709, "ft": 709, "ot": 709, "reliabl": 709, "sacrific": 709, "hear": 709, "virtu": [709, 721], "pure_ivi": 709, "compile_graph": [709, 714], "pure_torch": 709, "_layer": 709, "unclean": 709, "wx": 709, "temp": 709, "ivy_func": 709, "emphas": 709, "torchscript": [709, 719, 731], "example_input": 709, "primit": [710, 717, 722, 724], "upcom": 710, "hierarch": [710, 712, 713, 724], "arraywithactiv": 711, "arraywithcr": 711, "arraywithdatatyp": 711, "arraywithdevic": 711, "arraywithgener": 711, "arraywithgradi": 711, "arraywithimag": 711, "arraywithlay": 711, "arraywithlinearalgebra": 711, "arraywithloss": 711, "arraywithmanipul": 711, "arraywithnorm": 711, "arraywithrandom": 711, "arraywithsearch": 711, "arraywithset": 711, "arraywithsort": 711, "arraywithstatist": 711, "arraywithutil": 711, "_init": 711, "_size": 711, "_devic": 711, "_dev_str": 711, "_pre_repr": 711, "_post_repr": 711, "framework_str": 711, "noinspect": 711, "pypep8nam": 711, "immut": 711, "claim": 711, "_native_wrapp": 711, "genuin": 711, "some_method": 711, "rewritten": 711, "strang": 711, "compartment": 711, "newshap": 711, "new_shap": 711, "tidi": 711, "crystal": 711, "ton": 712, "ado": [712, 713], "soup": 712, "walk": [712, 713], "cnt": 712, "combo": 712, "3333335": 712, "delimit": 712, "autocomplet": 712, "midwai": 712, "agent": 712, "total_spe": 712, "total_height": 712, "total_width": 712, "ag": 712, "tot": 712, "total_": 712, "total_h": 712, "cnt0": 712, "cnt1": 712, "diff_0": 712, "diff_1": 712, "config0": 712, "config1": 712, "decod": 712, "l0": 712, "decoder__l0": 712, "decoder__l1": 712, "encoder__l0": 712, "encoder__l1": 712, "l0__b": 712, "l0__w": 712, "l1__b": 712, "l1__w": 712, "printabl": 712, "obviou": [712, 724], "foresight": 712, "untidili": 712, "update_ag": 712, "normalize_img": 712, "img_max": 712, "reduce_max": 712, "img_min": 712, "reduce_min": 712, "img_rang": 712, "agent_posit": 712, "agent_veloc": 712, "agent_cam_front_rgb": 712, "agent_cam_front_depth": 712, "agent_cam_rear_rgb": 712, "agent_cam_rear_depth": 712, "agent_cam_lidar": 712, "camera": 712, "front_rgb": 712, "front_depth": 712, "rear_rgb": 712, "rear_depth": 712, "lidar": 712, "rgb": 712, "rear": 712, "veloc": 712, "cam": 712, "cam_max": 712, "cam_min": 712, "cam_rang": 712, "perman": 712, "thread": [712, 724], "pretti": [712, 730], "straightforward": 712, "dataload": [712, 715], "_cnt": 712, "img_": 712, "png": 712, "_dataset_s": 712, "_batch_siz": 712, "_count": [712, 713], "__next__": 712, "img_fnam": 712, "loaded_img": 712, "cv2": 712, "imread": 712, "from_numpi": 712, "batch_slic": 712, "mymodel": 712, "x_in": [712, 713, 714], "0145": 712, "addbackward0": 712, "_create_vari": 713, "_input_channel": 713, "_output_channel": 713, "_w_shape": 713, "_b_shape": 713, "_with_bia": 713, "764": 713, "872": 713, "211": 713, "439": 713, "nightmar": 713, "overcom": 713, "v0": 713, "v1": 713, "key0": 713, "linear3": 713, "v2": 713, "_w_init": 713, "_b_init": 713, "misnom": 713, "saw": 713, "_beta1": 713, "_beta2": 713, "_epsilon": 713, "_mw": 713, "_vw": 713, "_first_pass": 713, "_should_compil": 713, "new_v": 713, "_lr": 713, "_inplac": 713, "_stop_gradi": 713, "clip_by_valu": 714, "sparse_funct": 714, "_linear": 714, "jax_graph": 714, "to_backend": 714, "thinli": 714, "to_haiku_modul": 714, "loss_fn_t": 714, "without_apply_rng": 714, "update_rul": 714, "tree_multimap": 714, "differenti": [716, 724], "pose": 716, "quaternion": 716, "ivy_mech": 716, "target_facing_rotation_matrix": 716, "polar_to_cartesian_coord": 716, "warp": 716, "optic": 716, "voxel": 716, "ivy_vis": 716, "coords_to_voxel_grid": 716, "render_pixel_coord": 716, "radianc": 716, "nerf": 716, "trajectori": 716, "motion": 716, "mobil": [716, 724], "sample_spline_path": 716, "rigidmobil": 716, "sample_bodi": 716, "drone": 716, "sample_link": 716, "openai": 716, "swimmer": 716, "reward": 716, "supervis": 716, "door": [716, 717], "cartpol": 716, "mountain_car": 716, "pendulum": 716, "reacher": 716, "learnt": 716, "ture": 716, "ntm": 716, "egospher": 716, "esm": 716, "ivy_memori": 716, "egocentr": 716, "room": 716, "doubt": 717, "grate": 717, "probe": 717, "remark": 717, "lock": 717, "gold": 717, "dex": 717, "ye": 717, "tricki": [717, 719], "predictor": 717, "tight": 717, "driver": 717, "dispatch": [717, 724, 727], "ast": 717, "checkpoint": 717, "autodiff": 717, "shine": 717, "merci": 717, "autograd": 717, "compet": [717, 724], "parallelis": 717, "spmd": 717, "mixtur": 717, "expert": 717, "sophist": 717, "depart": 717, "hundr": 717, "thousand": 717, "broadli": [717, 730], "supplementari": 717, "reusabl": [717, 722, 724], "fanci": [717, 724], "fusion": [717, 728], "lose": 717, "pmap": 717, "eventu": 717, "supplement": 717, "backdoor": 717, "callback": 717, "record": [717, 725], "somewhat": [717, 724], "outsourc": 717, "nail": 719, "funtion": 719, "asset": 719, "scientist": 719, "correl": 719, "conceptu": [720, 725], "broken": [720, 724], "tracer": 720, "infrastructur": [720, 726, 727], "vendor": [720, 726], "complimentari": [720, 730], "acycl": [720, 725], "insert_numb": 721, "insert_t": 721, "scaffold": [722, 730], "heart": 722, "toolchain": [722, 727], "intermedi": [722, 723, 724, 725, 730], "ir": [722, 725, 730], "assembli": [722, 729, 730], "idl": 722, "middl": 722, "emit": 722, "gnu": [722, 727], "gcc": [722, 729], "broader": 722, "heterogen": 722, "aid": 722, "coprocessor": 722, "ai": [722, 726], "programm": [722, 729], "gate": 722, "onednn": 722, "sit": [722, 725, 730], "tandem": 722, "possess": 722, "khrono": [723, 729], "appl": 723, "coremltool": 723, "albeit": 723, "promin": 724, "abbrevi": 724, "laboratori": 724, "proprietari": [724, 728, 729], "mathwork": 724, "commerci": 724, "1984": 724, "toolbox": 724, "mupad": 724, "simulink": 724, "graphic": [724, 728, 729], "simul": 724, "million": [724, 727], "worldwid": 724, "scienc": [724, 726], "econom": 724, "2001": 724, "scientif": 724, "od": 724, "solver": 724, "cython": 724, "friendli": 724, "2002": 724, "lua": 724, "luajit": 724, "idiap": 724, "epfl": 724, "2005": 724, "numarrai": 724, "cpython": 724, "partli": 724, "2007": 724, "regress": [724, 731], "forest": 724, "boost": 724, "dbscan": 724, "inbuilt": 724, "esqu": 724, "aesara": 724, "2008": 724, "datafram": 724, "critic": [724, 730], "2012": 724, "Its": 724, "polymorph": 724, "mpi": 724, "openmp": 724, "glue": 724, "jaot": 724, "nasa": 724, "cern": 724, "climat": 724, "allianc": 724, "influenti": 724, "2014": 724, "scala": 724, "ship": 724, "forgiv": 724, "decemb": 724, "announc": 724, "transit": 724, "mainten": 724, "v7": 724, "meaning": 724, "2016": 724, "imper": 724, "amazon": 724, "traction": 724, "cognit": [724, 731], "toolkit": [724, 725, 731], "grade": 724, "realiz": 724, "dnn": 724, "cnn": 724, "rnn": 724, "backpropag": 724, "succumb": 724, "came": 724, "monitor": 724, "practition": [724, 728, 729, 730], "hobbyist": 724, "tremend": 724, "ecosystem": 724, "gear": 724, "batteri": 724, "zygot": 724, "jl": 724, "workload": 724, "daggerflux": 724, "frontier": 724, "hessian": 724, "2018": 724, "lightweight": [724, 731], "shortcom": 724, "barrier": 724, "inexperienc": 724, "underdevelop": 724, "fanat": 724, "ounc": 724, "infanc": 724, "emerg": 724, "nich": 724, "introduct": 724, "lite": 724, "enterpris": 724, "reinvent": [724, 726], "inertia": 724, "creator": [724, 726], "paszk": 724, "hi": 724, "bulk": 724, "haskel": 724, "dataflow": 725, "distil": 725, "essenc": [725, 730], "enclos": 725, "scope": [725, 729], "trace_modul": 725, "scriptfunct": 725, "scriptmodul": 725, "fake": 725, "proxi": 725, "site": 725, "graphmodul": 725, "travi": 726, "oliph": 726, "leader": 726, "cornerston": 726, "numba": 726, "numfocu": 726, "pydata": 726, "confer": 726, "consult": 726, "servic": 726, "expertis": 726, "devop": 726, "mlop": 726, "dashboard": 726, "startup": 726, "mlir": [726, 727, 730], "Their": 726, "held": 726, "privileg": 726, "presum": 726, "llvm": [726, 729], "founder": 726, "tvm": [726, 730], "sustain": 726, "empow": 726, "har": 726, "burden": 726, "benchmark": 726, "convention": 727, "precompil": 727, "executor": 727, "exploit": 727, "julia": [727, 730], "fsf": 727, "gpl": 727, "biggest": [727, 730], "nvidia": [728, 729], "conduct": 728, "throughput": 728, "autotun": 728, "gpgpu": 728, "talk": 729, "classic": 729, "sycl": 729, "dpc": 729, "processor": 729, "maco": 729, "x86": 729, "oneapi": 729, "ia": 729, "aka": 729, "xeon": 729, "gen9": 729, "xe": 729, "card": 729, "arria": 729, "gx": 729, "fpga": 729, "tune": [729, 730], "lofti": 730, "ambit": 730, "realm": 730, "bedrock": 730, "flux": 730, "bite": 730, "chew": 730, "eagerpi": 730, "tensorli": 730, "thinc": 730, "neuropod": 730, "exhibit": 730, "emploi": 730, "fx": 730, "retrain": 730, "closer": 730, "greatli": 730, "challeng": 730, "modular": 730, "anywher": 730, "theano": 731, "plaidml": 731, "partial_svd": 731, "tucker_mode_dot": 731, "excel": 731, "subsystem": 731}, "objects": {"ivy.Array": [[167, 0, 1, "", "abs"], [168, 0, 1, "", "acos"], [169, 0, 1, "", "acosh"], [482, 0, 1, "", "adam_step"], [483, 0, 1, "", "adam_update"], [308, 0, 1, "", "adaptive_avg_pool1d"], [309, 0, 1, "", "adaptive_avg_pool2d"], [170, 0, 1, "", "add"], [337, 0, 1, "", "adjoint"], [632, 0, 1, "", "all"], [404, 0, 1, "", "all_equal"], [261, 0, 1, "", "allclose"], [171, 0, 1, "", "angle"], [633, 0, 1, "", "any"], [609, 0, 1, "", "argmax"], [610, 0, 1, "", "argmin"], [618, 0, 1, "", "argsort"], [611, 0, 1, "", "argwhere"], [407, 0, 1, "", "array_equal"], [347, 0, 1, "", "as_strided"], [71, 0, 1, "", "asarray"], [172, 0, 1, "", "asin"], [173, 0, 1, "", "asinh"], [408, 0, 1, "", "assert_supports_inplace"], [348, 0, 1, "", "associative_scan"], [99, 0, 1, "", "astype"], [174, 0, 1, "", "atan"], [175, 0, 1, "", "atan2"], [176, 0, 1, "", "atanh"], [349, 0, 1, "", "atleast_1d"], [350, 0, 1, "", "atleast_2d"], [351, 0, 1, "", "atleast_3d"], [311, 0, 1, "", "avg_pool1d"], [312, 0, 1, "", "avg_pool2d"], [313, 0, 1, "", "avg_pool3d"], [374, 0, 1, "", "batch_norm"], [380, 0, 1, "", "bernoulli"], [381, 0, 1, "", "beta"], [262, 0, 1, "", "binarizer"], [561, 0, 1, "", "binary_cross_entropy"], [392, 0, 1, "", "bincount"], [177, 0, 1, "", "bitwise_and"], [178, 0, 1, "", "bitwise_invert"], [179, 0, 1, "", "bitwise_left_shift"], [180, 0, 1, "", "bitwise_or"], [181, 0, 1, "", "bitwise_right_shift"], [182, 0, 1, "", "bitwise_xor"], [100, 0, 1, "", "broadcast_arrays"], [101, 0, 1, "", "broadcast_to"], [102, 0, 1, "", "can_cast"], [183, 0, 1, "", "ceil"], [531, 0, 1, "", "cholesky"], [564, 0, 1, "", "clip"], [410, 0, 1, "", "clip_matrix_norm"], [411, 0, 1, "", "clip_vector_norm"], [565, 0, 1, "", "concat"], [353, 0, 1, "", "concat_from_sequence"], [338, 0, 1, "", "cond"], [263, 0, 1, "", "conj"], [566, 0, 1, "", "constant_pad"], [517, 0, 1, "", "conv1d"], [518, 0, 1, "", "conv1d_transpose"], [519, 0, 1, "", "conv2d"], [520, 0, 1, "", "conv2d_transpose"], [521, 0, 1, "", "conv3d"], [522, 0, 1, "", "conv3d_transpose"], [77, 0, 1, "", "copy_array"], [264, 0, 1, "", "copysign"], [393, 0, 1, "", "corrcoef"], [184, 0, 1, "", "cos"], [185, 0, 1, "", "cosh"], [265, 0, 1, "", "count_nonzero"], [394, 0, 1, "", "cov"], [532, 0, 1, "", "cross"], [562, 0, 1, "", "cross_entropy"], [395, 0, 1, "", "cummax"], [396, 0, 1, "", "cummin"], [622, 0, 1, "", "cumprod"], [623, 0, 1, "", "cumsum"], [314, 0, 1, "", "dct"], [414, 0, 1, "", "default"], [186, 0, 1, "", "deg2rad"], [525, 0, 1, "", "depthwise_conv2d"], [533, 0, 1, "", "det"], [144, 0, 1, "", "dev"], [315, 0, 1, "", "dft"], [534, 0, 1, "", "diag"], [339, 0, 1, "", "diagflat"], [535, 0, 1, "", "diagonal"], [266, 0, 1, "", "diff"], [382, 0, 1, "", "dirichlet"], [187, 0, 1, "", "divide"], [526, 0, 1, "", "dropout"], [316, 0, 1, "", "dropout1d"], [317, 0, 1, "", "dropout2d"], [318, 0, 1, "", "dropout3d"], [354, 0, 1, "", "dsplit"], [355, 0, 1, "", "dstack"], [110, 0, 1, "", "dtype"], [340, 0, 1, "", "eig"], [537, 0, 1, "", "eigh"], [341, 0, 1, "", "eigh_tridiagonal"], [342, 0, 1, "", "eigvals"], [538, 0, 1, "", "eigvalsh"], [415, 0, 1, "", "einops_rearrange"], [416, 0, 1, "", "einops_reduce"], [417, 0, 1, "", "einops_repeat"], [624, 0, 1, "", "einsum"], [242, 0, 1, "", "elu"], [319, 0, 1, "", "embedding"], [79, 0, 1, "", "empty_like"], [188, 0, 1, "", "equal"], [189, 0, 1, "", "erf"], [418, 0, 1, "", "exists"], [190, 0, 1, "", "exp"], [191, 0, 1, "", "exp2"], [356, 0, 1, "", "expand"], [567, 0, 1, "", "expand_dims"], [192, 0, 1, "", "expm1"], [250, 0, 1, "", "eye_like"], [320, 0, 1, "", "fft"], [321, 0, 1, "", "fft2"], [357, 0, 1, "", "fill_diagonal"], [112, 0, 1, "", "finfo"], [267, 0, 1, "", "fix"], [358, 0, 1, "", "flatten"], [568, 0, 1, "", "flip"], [359, 0, 1, "", "fliplr"], [360, 0, 1, "", "flipud"], [268, 0, 1, "", "float_power"], [193, 0, 1, "", "floor"], [194, 0, 1, "", "floor_divide"], [269, 0, 1, "", "fmax"], [195, 0, 1, "", "fmin"], [196, 0, 1, "", "fmod"], [419, 0, 1, "", "fourier_encode"], [270, 0, 1, "", "frexp"], [81, 0, 1, "", "from_dlpack"], [84, 0, 1, "", "full_like"], [383, 0, 1, "", "gamma"], [422, 0, 1, "", "gather"], [423, 0, 1, "", "gather_nd"], [197, 0, 1, "", "gcd"], [55, 0, 1, "", "gelu"], [426, 0, 1, "", "get_num_dims"], [271, 0, 1, "", "gradient"], [486, 0, 1, "", "gradient_descent_update"], [198, 0, 1, "", "greater"], [199, 0, 1, "", "greater_equal"], [375, 0, 1, "", "group_norm"], [56, 0, 1, "", "hardswish"], [428, 0, 1, "", "has_nans"], [361, 0, 1, "", "heaviside"], [397, 0, 1, "", "histogram"], [362, 0, 1, "", "hsplit"], [363, 0, 1, "", "hstack"], [272, 0, 1, "", "hypot"], [364, 0, 1, "", "i0"], [324, 0, 1, "", "idct"], [325, 0, 1, "", "ifft"], [326, 0, 1, "", "ifftn"], [398, 0, 1, "", "igamma"], [115, 0, 1, "", "iinfo"], [200, 0, 1, "", "imag"], [539, 0, 1, "", "inner"], [430, 0, 1, "", "inplace_decrement"], [431, 0, 1, "", "inplace_increment"], [432, 0, 1, "", "inplace_update"], [376, 0, 1, "", "instance_norm"], [328, 0, 1, "", "interpolate"], [540, 0, 1, "", "inv"], [434, 0, 1, "", "is_array"], [118, 0, 1, "", "is_bool_dtype"], [120, 0, 1, "", "is_float_dtype"], [122, 0, 1, "", "is_int_dtype"], [435, 0, 1, "", "is_ivy_array"], [436, 0, 1, "", "is_ivy_container"], [438, 0, 1, "", "is_native_array"], [124, 0, 1, "", "is_uint_dtype"], [273, 0, 1, "", "isclose"], [201, 0, 1, "", "isfinite"], [439, 0, 1, "", "isin"], [202, 0, 1, "", "isinf"], [203, 0, 1, "", "isnan"], [204, 0, 1, "", "isreal"], [441, 0, 1, "", "itemsize"], [343, 0, 1, "", "kron"], [377, 0, 1, "", "l1_normalize"], [378, 0, 1, "", "l2_normalize"], [488, 0, 1, "", "lamb_update"], [489, 0, 1, "", "lars_update"], [602, 0, 1, "", "layer_norm"], [205, 0, 1, "", "lcm"], [274, 0, 1, "", "ldexp"], [57, 0, 1, "", "leaky_relu"], [275, 0, 1, "", "lerp"], [206, 0, 1, "", "less"], [207, 0, 1, "", "less_equal"], [387, 0, 1, "", "lexsort"], [276, 0, 1, "", "lgamma"], [527, 0, 1, "", "linear"], [85, 0, 1, "", "linspace"], [208, 0, 1, "", "log"], [209, 0, 1, "", "log10"], [210, 0, 1, "", "log1p"], [211, 0, 1, "", "log2"], [58, 0, 1, "", "log_softmax"], [212, 0, 1, "", "logaddexp"], [213, 0, 1, "", "logaddexp2"], [214, 0, 1, "", "logical_and"], [215, 0, 1, "", "logical_not"], [216, 0, 1, "", "logical_or"], [217, 0, 1, "", "logical_xor"], [243, 0, 1, "", "logit"], [244, 0, 1, "", "logsigmoid"], [86, 0, 1, "", "logspace"], [379, 0, 1, "", "lp_normalize"], [528, 0, 1, "", "lstm_update"], [542, 0, 1, "", "matmul"], [344, 0, 1, "", "matrix_exp"], [543, 0, 1, "", "matrix_norm"], [544, 0, 1, "", "matrix_power"], [545, 0, 1, "", "matrix_rank"], [546, 0, 1, "", "matrix_transpose"], [625, 0, 1, "", "max"], [329, 0, 1, "", "max_pool1d"], [330, 0, 1, "", "max_pool2d"], [331, 0, 1, "", "max_pool3d"], [218, 0, 1, "", "maximum"], [626, 0, 1, "", "mean"], [399, 0, 1, "", "median"], [87, 0, 1, "", "meshgrid"], [627, 0, 1, "", "min"], [219, 0, 1, "", "minimum"], [59, 0, 1, "", "mish"], [277, 0, 1, "", "modf"], [365, 0, 1, "", "moveaxis"], [619, 0, 1, "", "msort"], [345, 0, 1, "", "multi_dot"], [529, 0, 1, "", "multi_head_attention"], [603, 0, 1, "", "multinomial"], [220, 0, 1, "", "multiply"], [221, 0, 1, "", "nan_to_num"], [400, 0, 1, "", "nanmean"], [401, 0, 1, "", "nanmedian"], [278, 0, 1, "", "nansum"], [88, 0, 1, "", "native_array"], [222, 0, 1, "", "negative"], [279, 0, 1, "", "nextafter"], [612, 0, 1, "", "nonzero"], [223, 0, 1, "", "not_equal"], [89, 0, 1, "", "one_hot"], [91, 0, 1, "", "ones_like"], [490, 0, 1, "", "optimizer_update"], [547, 0, 1, "", "outer"], [366, 0, 1, "", "pad"], [569, 0, 1, "", "permute_dims"], [548, 0, 1, "", "pinv"], [384, 0, 1, "", "poisson"], [224, 0, 1, "", "positive"], [225, 0, 1, "", "pow"], [245, 0, 1, "", "prelu"], [628, 0, 1, "", "prod"], [549, 0, 1, "", "qr"], [403, 0, 1, "", "quantile"], [226, 0, 1, "", "rad2deg"], [604, 0, 1, "", "randint"], [605, 0, 1, "", "random_normal"], [606, 0, 1, "", "random_uniform"], [227, 0, 1, "", "real"], [228, 0, 1, "", "reciprocal"], [284, 0, 1, "", "reduce"], [335, 0, 1, "", "reduce_window"], [60, 0, 1, "", "relu"], [246, 0, 1, "", "relu6"], [229, 0, 1, "", "remainder"], [570, 0, 1, "", "repeat"], [571, 0, 1, "", "reshape"], [127, 0, 1, "", "result_type"], [336, 0, 1, "", "rfftn"], [572, 0, 1, "", "roll"], [368, 0, 1, "", "rot90"], [230, 0, 1, "", "round"], [530, 0, 1, "", "scaled_dot_product_attention"], [446, 0, 1, "", "scatter_flat"], [447, 0, 1, "", "scatter_nd"], [620, 0, 1, "", "searchsorted"], [247, 0, 1, "", "selu"], [459, 0, 1, "", "shape"], [608, 0, 1, "", "shuffle"], [61, 0, 1, "", "sigmoid"], [231, 0, 1, "", "sign"], [280, 0, 1, "", "signbit"], [248, 0, 1, "", "silu"], [232, 0, 1, "", "sin"], [281, 0, 1, "", "sinc"], [233, 0, 1, "", "sinh"], [550, 0, 1, "", "slogdet"], [62, 0, 1, "", "softmax"], [63, 0, 1, "", "softplus"], [551, 0, 1, "", "solve"], [621, 0, 1, "", "sort"], [563, 0, 1, "", "sparse_cross_entropy"], [573, 0, 1, "", "split"], [234, 0, 1, "", "sqrt"], [235, 0, 1, "", "square"], [574, 0, 1, "", "squeeze"], [460, 0, 1, "", "stable_divide"], [461, 0, 1, "", "stable_pow"], [575, 0, 1, "", "stack"], [629, 0, 1, "", "std"], [491, 0, 1, "", "stop_gradient"], [462, 0, 1, "", "strides"], [236, 0, 1, "", "subtract"], [630, 0, 1, "", "sum"], [463, 0, 1, "", "supports_inplace_updates"], [552, 0, 1, "", "svd"], [553, 0, 1, "", "svdvals"], [576, 0, 1, "", "swapaxes"], [369, 0, 1, "", "take_along_axis"], [237, 0, 1, "", "tan"], [238, 0, 1, "", "tanh"], [554, 0, 1, "", "tensordot"], [555, 0, 1, "", "tensorsolve"], [249, 0, 1, "", "thresholded_relu"], [577, 0, 1, "", "tile"], [161, 0, 1, "", "to_device"], [465, 0, 1, "", "to_list"], [467, 0, 1, "", "to_numpy"], [468, 0, 1, "", "to_scalar"], [370, 0, 1, "", "top_k"], [556, 0, 1, "", "trace"], [239, 0, 1, "", "trapz"], [92, 0, 1, "", "tril"], [93, 0, 1, "", "triu"], [240, 0, 1, "", "trunc"], [241, 0, 1, "", "trunc_divide"], [614, 0, 1, "", "unique_all"], [371, 0, 1, "", "unique_consecutive"], [615, 0, 1, "", "unique_counts"], [616, 0, 1, "", "unique_inverse"], [617, 0, 1, "", "unique_values"], [385, 0, 1, "", "unravel_index"], [259, 0, 1, "", "unsorted_segment_min"], [578, 0, 1, "", "unstack"], [480, 0, 1, "", "value_is_nan"], [557, 0, 1, "", "vander"], [631, 0, 1, "", "var"], [558, 0, 1, "", "vecdot"], [559, 0, 1, "", "vector_norm"], [560, 0, 1, "", "vector_to_skew_symmetric_matrix"], [372, 0, 1, "", "vsplit"], [373, 0, 1, "", "vstack"], [613, 0, 1, "", "where"], [282, 0, 1, "", "xlogy"], [579, 0, 1, "", "zero_pad"], [96, 0, 1, "", "zeros_like"], [283, 0, 1, "", "zeta"]], "ivy": [[501, 1, 1, "", "ArrayMode"], [497, 1, 1, "", "DefaultComplexDtype"], [498, 1, 1, "", "DefaultDevice"], [497, 1, 1, "", "DefaultDtype"], [497, 1, 1, "", "DefaultFloatDtype"], [497, 1, 1, "", "DefaultIntDtype"], [497, 1, 1, "", "DefaultUintDtype"], [305, 1, 1, "", "NativeSparseArray"], [496, 1, 1, "", "NestedSequence"], [501, 1, 1, "", "PreciseMode"], [498, 1, 1, "", "Profiler"], [305, 1, 1, "", "SparseArray"], [167, 2, 1, "", "abs"], [168, 2, 1, "", "acos"], [169, 2, 1, "", "acosh"], [502, 2, 1, "", "adam_step"], [502, 2, 1, "", "adam_update"], [294, 2, 1, "", "adaptive_avg_pool1d"], [294, 2, 1, "", "adaptive_avg_pool2d"], [170, 2, 1, "", "add"], [295, 2, 1, "", "adjoint"], [515, 2, 1, "", "all"], [404, 2, 1, "", "all_equal"], [508, 2, 1, "", "all_nested_indices"], [291, 2, 1, "", "allclose"], [171, 2, 1, "", "angle"], [515, 2, 1, "", "any"], [496, 2, 1, "", "arange"], [294, 2, 1, "", "area_interpolate"], [405, 2, 1, "", "arg_info"], [406, 2, 1, "", "arg_names"], [511, 2, 1, "", "argmax"], [511, 2, 1, "", "argmin"], [513, 2, 1, "", "argsort"], [511, 2, 1, "", "argwhere"], [496, 2, 1, "", "array"], [407, 2, 1, "", "array_equal"], [140, 2, 1, "", "as_ivy_dev"], [497, 2, 1, "", "as_ivy_dtype"], [141, 2, 1, "", "as_native_dev"], [497, 2, 1, "", "as_native_dtype"], [297, 2, 1, "", "as_strided"], [496, 2, 1, "", "asarray"], [496, 2, 1, "", "asarray_handle_nestable"], [496, 2, 1, "", "asarray_infer_device"], [496, 2, 1, "", "asarray_infer_dtype"], [496, 2, 1, "", "asarray_inputs_to_native_shapes"], [496, 2, 1, "", "asarray_to_native_arrays_and_back"], [172, 2, 1, "", "asin"], [173, 2, 1, "", "asinh"], [408, 2, 1, "", "assert_supports_inplace"], [297, 2, 1, "", "associative_scan"], [497, 2, 1, "", "astype"], [174, 2, 1, "", "atan"], [175, 2, 1, "", "atan2"], [176, 2, 1, "", "atanh"], [297, 2, 1, "", "atleast_1d"], [297, 2, 1, "", "atleast_2d"], [297, 2, 1, "", "atleast_3d"], [294, 2, 1, "", "avg_pool1d"], [294, 2, 1, "", "avg_pool2d"], [294, 2, 1, "", "avg_pool3d"], [300, 2, 1, "", "batch_norm"], [301, 2, 1, "", "bernoulli"], [301, 2, 1, "", "beta"], [291, 2, 1, "", "binarizer"], [505, 2, 1, "", "binary_cross_entropy"], [306, 2, 1, "", "bincount"], [293, 2, 1, "", "bind_custom_gradient_function"], [177, 2, 1, "", "bitwise_and"], [178, 2, 1, "", "bitwise_invert"], [179, 2, 1, "", "bitwise_left_shift"], [180, 2, 1, "", "bitwise_or"], [181, 2, 1, "", "bitwise_right_shift"], [182, 2, 1, "", "bitwise_xor"], [497, 2, 1, "", "broadcast_arrays"], [297, 2, 1, "", "broadcast_shapes"], [497, 2, 1, "", "broadcast_to"], [409, 2, 1, "", "cache_fn"], [497, 2, 1, "", "can_cast"], [183, 2, 1, "", "ceil"], [497, 2, 1, "", "check_float"], [531, 2, 1, "", "cholesky"], [142, 2, 1, "", "clear_cached_mem_on_dev"], [506, 2, 1, "", "clip"], [410, 2, 1, "", "clip_matrix_norm"], [411, 2, 1, "", "clip_vector_norm"], [497, 2, 1, "", "closest_valid_dtype"], [495, 2, 1, "", "cmp_is"], [495, 2, 1, "", "cmp_isnot"], [0, 2, 1, "", "compile"], [506, 2, 1, "", "concat"], [297, 2, 1, "", "concat_from_sequence"], [295, 2, 1, "", "cond"], [291, 2, 1, "", "conj"], [506, 2, 1, "", "constant_pad"], [412, 2, 1, "", "container_types"], [516, 2, 1, "", "conv"], [517, 2, 1, "", "conv1d"], [518, 2, 1, "", "conv1d_transpose"], [519, 2, 1, "", "conv2d"], [520, 2, 1, "", "conv2d_transpose"], [521, 2, 1, "", "conv3d"], [522, 2, 1, "", "conv3d_transpose"], [523, 2, 1, "", "conv_general_dilated"], [524, 2, 1, "", "conv_general_transpose"], [496, 2, 1, "", "copy_array"], [508, 2, 1, "", "copy_nest"], [291, 2, 1, "", "copysign"], [306, 2, 1, "", "corrcoef"], [184, 2, 1, "", "cos"], [185, 2, 1, "", "cosh"], [291, 2, 1, "", "count_nonzero"], [306, 2, 1, "", "cov"], [532, 2, 1, "", "cross"], [505, 2, 1, "", "cross_entropy"], [306, 2, 1, "", "cummax"], [306, 2, 1, "", "cummin"], [514, 2, 1, "", "cumprod"], [514, 2, 1, "", "cumsum"], [413, 2, 1, "", "current_backend_str"], [294, 2, 1, "", "dct"], [414, 2, 1, "", "default"], [497, 2, 1, "", "default_complex_dtype"], [143, 2, 1, "", "default_device"], [497, 2, 1, "", "default_dtype"], [497, 2, 1, "", "default_float_dtype"], [497, 2, 1, "", "default_int_dtype"], [497, 2, 1, "", "default_uint_dtype"], [186, 2, 1, "", "deg2rad"], [525, 2, 1, "", "depthwise_conv2d"], [533, 2, 1, "", "det"], [144, 2, 1, "", "dev"], [145, 2, 1, "", "dev_util"], [294, 2, 1, "", "dft"], [534, 2, 1, "", "diag"], [295, 2, 1, "", "diagflat"], [535, 2, 1, "", "diagonal"], [291, 2, 1, "", "diff"], [301, 2, 1, "", "dirichlet"], [187, 2, 1, "", "divide"], [526, 2, 1, "", "dropout"], [294, 2, 1, "", "dropout1d"], [294, 2, 1, "", "dropout2d"], [294, 2, 1, "", "dropout3d"], [297, 2, 1, "", "dsplit"], [297, 2, 1, "", "dstack"], [497, 2, 1, "", "dtype"], [497, 2, 1, "", "dtype_bits"], [508, 2, 1, "", "duplicate_array_index_chains"], [494, 6, 1, "", "e"], [295, 2, 1, "", "eig"], [537, 2, 1, "", "eigh"], [295, 2, 1, "", "eigh_tridiagonal"], [295, 2, 1, "", "eigvals"], [538, 2, 1, "", "eigvalsh"], [415, 2, 1, "", "einops_rearrange"], [416, 2, 1, "", "einops_reduce"], [417, 2, 1, "", "einops_repeat"], [514, 2, 1, "", "einsum"], [286, 2, 1, "", "elu"], [294, 2, 1, "", "embedding"], [496, 2, 1, "", "empty"], [496, 2, 1, "", "empty_like"], [188, 2, 1, "", "equal"], [189, 2, 1, "", "erf"], [502, 2, 1, "", "execute_with_gradients"], [418, 2, 1, "", "exists"], [190, 2, 1, "", "exp"], [191, 2, 1, "", "exp2"], [297, 2, 1, "", "expand"], [506, 2, 1, "", "expand_dims"], [192, 2, 1, "", "expm1"], [496, 2, 1, "", "eye"], [288, 2, 1, "", "eye_like"], [294, 2, 1, "", "fft"], [294, 2, 1, "", "fft2"], [297, 2, 1, "", "fill_diagonal"], [497, 2, 1, "", "finfo"], [291, 2, 1, "", "fix"], [297, 2, 1, "", "flatten"], [506, 2, 1, "", "flip"], [297, 2, 1, "", "fliplr"], [297, 2, 1, "", "flipud"], [291, 2, 1, "", "float_power"], [193, 2, 1, "", "floor"], [194, 2, 1, "", "floor_divide"], [291, 2, 1, "", "fmax"], [195, 2, 1, "", "fmin"], [196, 2, 1, "", "fmod"], [507, 2, 1, "", "fomaml_step"], [495, 2, 1, "", "for_loop"], [419, 2, 1, "", "fourier_encode"], [291, 2, 1, "", "frexp"], [496, 2, 1, "", "from_dlpack"], [496, 2, 1, "", "frombuffer"], [496, 2, 1, "", "full"], [496, 2, 1, "", "full_like"], [146, 2, 1, "", "function_supported_devices"], [420, 2, 1, "", "function_supported_devices_and_dtypes"], [497, 2, 1, "", "function_supported_dtypes"], [147, 2, 1, "", "function_unsupported_devices"], [421, 2, 1, "", "function_unsupported_devices_and_dtypes"], [497, 2, 1, "", "function_unsupported_dtypes"], [301, 2, 1, "", "gamma"], [422, 2, 1, "", "gather"], [423, 2, 1, "", "gather_nd"], [197, 2, 1, "", "gcd"], [55, 2, 1, "", "gelu"], [294, 2, 1, "", "generate_einsum_equation"], [424, 2, 1, "", "get_all_arrays_in_memory"], [148, 2, 1, "", "get_all_ivy_arrays_on_dev"], [294, 2, 1, "", "get_interpolate_kernel"], [425, 2, 1, "", "get_item"], [426, 2, 1, "", "get_num_dims"], [427, 2, 1, "", "get_referrers_recursive"], [149, 2, 1, "", "gpu_is_available"], [502, 2, 1, "", "grad"], [291, 2, 1, "", "gradient"], [502, 2, 1, "", "gradient_descent_update"], [198, 2, 1, "", "greater"], [199, 2, 1, "", "greater_equal"], [300, 2, 1, "", "group_norm"], [288, 2, 1, "", "hamming_window"], [150, 2, 1, "", "handle_soft_device_variable"], [288, 2, 1, "", "hann_window"], [56, 2, 1, "", "hardswish"], [428, 2, 1, "", "has_nans"], [297, 2, 1, "", "heaviside"], [306, 2, 1, "", "histogram"], [297, 2, 1, "", "hsplit"], [297, 2, 1, "", "hstack"], [291, 2, 1, "", "hypot"], [297, 2, 1, "", "i0"], [294, 2, 1, "", "idct"], [495, 2, 1, "", "if_else"], [294, 2, 1, "", "ifft"], [294, 2, 1, "", "ifftn"], [306, 2, 1, "", "igamma"], [497, 2, 1, "", "iinfo"], [200, 2, 1, "", "imag"], [508, 2, 1, "", "index_nest"], [288, 2, 1, "", "indices"], [494, 6, 1, "", "inf"], [497, 2, 1, "", "infer_default_dtype"], [539, 2, 1, "", "inner"], [429, 2, 1, "", "inplace_arrays_supported"], [430, 2, 1, "", "inplace_decrement"], [431, 2, 1, "", "inplace_increment"], [432, 2, 1, "", "inplace_update"], [433, 2, 1, "", "inplace_variables_supported"], [508, 2, 1, "", "insert_into_nest_at_index"], [508, 2, 1, "", "insert_into_nest_at_indices"], [300, 2, 1, "", "instance_norm"], [294, 2, 1, "", "interp"], [294, 2, 1, "", "interpolate"], [504, 2, 1, "", "inv"], [497, 2, 1, "", "invalid_dtype"], [304, 2, 1, "", "invert_permutation"], [434, 2, 1, "", "is_array"], [497, 2, 1, "", "is_bool_dtype"], [497, 2, 1, "", "is_complex_dtype"], [120, 2, 1, "", "is_float_dtype"], [121, 2, 1, "", "is_hashable_dtype"], [122, 2, 1, "", "is_int_dtype"], [435, 2, 1, "", "is_ivy_array"], [436, 2, 1, "", "is_ivy_container"], [437, 2, 1, "", "is_ivy_nested_array"], [305, 2, 1, "", "is_ivy_sparse_array"], [438, 2, 1, "", "is_native_array"], [123, 2, 1, "", "is_native_dtype"], [305, 2, 1, "", "is_native_sparse_array"], [124, 2, 1, "", "is_uint_dtype"], [291, 2, 1, "", "isclose"], [201, 2, 1, "", "isfinite"], [439, 2, 1, "", "isin"], [202, 2, 1, "", "isinf"], [203, 2, 1, "", "isnan"], [204, 2, 1, "", "isreal"], [440, 2, 1, "", "isscalar"], [441, 2, 1, "", "itemsize"], [502, 2, 1, "", "jac"], [288, 2, 1, "", "kaiser_bessel_derived_window"], [288, 2, 1, "", "kaiser_window"], [295, 2, 1, "", "kron"], [300, 2, 1, "", "l1_normalize"], [300, 2, 1, "", "l2_normalize"], [502, 2, 1, "", "lamb_update"], [502, 2, 1, "", "lars_update"], [509, 2, 1, "", "layer_norm"], [205, 2, 1, "", "lcm"], [291, 2, 1, "", "ldexp"], [57, 2, 1, "", "leaky_relu"], [291, 2, 1, "", "lerp"], [206, 2, 1, "", "less"], [207, 2, 1, "", "less_equal"], [304, 2, 1, "", "lexsort"], [291, 2, 1, "", "lgamma"], [527, 2, 1, "", "linear"], [496, 2, 1, "", "linspace"], [515, 2, 1, "", "load"], [208, 2, 1, "", "log"], [209, 2, 1, "", "log10"], [210, 2, 1, "", "log1p"], [211, 2, 1, "", "log2"], [296, 2, 1, "", "log_poisson_loss"], [58, 2, 1, "", "log_softmax"], [212, 2, 1, "", "logaddexp"], [213, 2, 1, "", "logaddexp2"], [214, 2, 1, "", "logical_and"], [215, 2, 1, "", "logical_not"], [216, 2, 1, "", "logical_or"], [217, 2, 1, "", "logical_xor"], [286, 2, 1, "", "logit"], [286, 2, 1, "", "logsigmoid"], [496, 2, 1, "", "logspace"], [300, 2, 1, "", "lp_normalize"], [528, 2, 1, "", "lstm_update"], [504, 2, 1, "", "lu_factor"], [507, 2, 1, "", "maml_step"], [508, 2, 1, "", "map"], [508, 2, 1, "", "map_nest_at_index"], [508, 2, 1, "", "map_nest_at_indices"], [442, 2, 1, "", "match_kwargs"], [504, 2, 1, "", "matmul"], [295, 2, 1, "", "matrix_exp"], [504, 2, 1, "", "matrix_norm"], [504, 2, 1, "", "matrix_power"], [504, 2, 1, "", "matrix_rank"], [504, 2, 1, "", "matrix_transpose"], [514, 2, 1, "", "max"], [294, 2, 1, "", "max_pool1d"], [294, 2, 1, "", "max_pool2d"], [294, 2, 1, "", "max_pool3d"], [294, 2, 1, "", "max_unpool1d"], [218, 2, 1, "", "maximum"], [514, 2, 1, "", "mean"], [306, 2, 1, "", "median"], [496, 2, 1, "", "meshgrid"], [514, 2, 1, "", "min"], [219, 2, 1, "", "minimum"], [59, 2, 1, "", "mish"], [291, 2, 1, "", "modf"], [297, 2, 1, "", "moveaxis"], [513, 2, 1, "", "msort"], [295, 2, 1, "", "multi_dot"], [529, 2, 1, "", "multi_head_attention"], [508, 2, 1, "", "multi_index_nest"], [510, 2, 1, "", "multinomial"], [220, 2, 1, "", "multiply"], [443, 2, 1, "", "multiprocessing"], [494, 6, 1, "", "nan"], [221, 2, 1, "", "nan_to_num"], [306, 2, 1, "", "nanmean"], [306, 2, 1, "", "nanmedian"], [306, 2, 1, "", "nanquantile"], [291, 2, 1, "", "nansum"], [496, 2, 1, "", "native_array"], [305, 2, 1, "", "native_sparse_array"], [305, 2, 1, "", "native_sparse_array_to_indices_values_and_shape"], [288, 2, 1, "", "ndenumerate"], [288, 2, 1, "", "ndindex"], [294, 2, 1, "", "nearest_interpolate"], [222, 2, 1, "", "negative"], [508, 2, 1, "", "nested_any"], [508, 2, 1, "", "nested_argwhere"], [508, 2, 1, "", "nested_map"], [508, 2, 1, "", "nested_multi_map"], [494, 6, 1, "", "newaxis"], [291, 2, 1, "", "nextafter"], [511, 2, 1, "", "nonzero"], [223, 2, 1, "", "not_equal"], [444, 2, 1, "", "num_arrays_in_memory"], [151, 2, 1, "", "num_cpu_cores"], [152, 2, 1, "", "num_gpus"], [153, 2, 1, "", "num_ivy_arrays_on_dev"], [496, 2, 1, "", "one_hot"], [496, 2, 1, "", "ones"], [496, 2, 1, "", "ones_like"], [502, 2, 1, "", "optimizer_update"], [504, 2, 1, "", "outer"], [297, 2, 1, "", "pad"], [154, 2, 1, "", "percent_used_mem_on_dev"], [506, 2, 1, "", "permute_dims"], [494, 6, 1, "", "pi"], [504, 2, 1, "", "pinv"], [301, 2, 1, "", "poisson"], [294, 2, 1, "", "pool"], [224, 2, 1, "", "positive"], [225, 2, 1, "", "pow"], [286, 2, 1, "", "prelu"], [445, 2, 1, "", "print_all_arrays_in_memory"], [155, 2, 1, "", "print_all_ivy_arrays_on_dev"], [514, 2, 1, "", "prod"], [125, 2, 1, "", "promote_types"], [126, 2, 1, "", "promote_types_of_inputs"], [508, 2, 1, "", "prune_empty"], [508, 2, 1, "", "prune_nest_at_index"], [508, 2, 1, "", "prune_nest_at_indices"], [297, 2, 1, "", "put_along_axis"], [504, 2, 1, "", "qr"], [306, 2, 1, "", "quantile"], [226, 2, 1, "", "rad2deg"], [510, 2, 1, "", "randint"], [510, 2, 1, "", "random_normal"], [510, 2, 1, "", "random_uniform"], [227, 2, 1, "", "real"], [228, 2, 1, "", "reciprocal"], [292, 2, 1, "", "reduce"], [294, 2, 1, "", "reduce_window"], [493, 2, 1, "", "relu"], [286, 2, 1, "", "relu6"], [229, 2, 1, "", "remainder"], [506, 2, 1, "", "repeat"], [507, 2, 1, "", "reptile_step"], [506, 2, 1, "", "reshape"], [127, 2, 1, "", "result_type"], [294, 2, 1, "", "rfftn"], [506, 2, 1, "", "roll"], [297, 2, 1, "", "rot90"], [230, 2, 1, "", "round"], [515, 2, 1, "", "save"], [530, 2, 1, "", "scaled_dot_product_attention"], [446, 2, 1, "", "scatter_flat"], [447, 2, 1, "", "scatter_nd"], [513, 2, 1, "", "searchsorted"], [510, 2, 1, "", "seed"], [286, 2, 1, "", "selu"], [448, 2, 1, "", "set_array_mode"], [128, 2, 1, "", "set_default_complex_dtype"], [156, 2, 1, "", "set_default_device"], [129, 2, 1, "", "set_default_dtype"], [130, 2, 1, "", "set_default_float_dtype"], [131, 2, 1, "", "set_default_int_dtype"], [132, 2, 1, "", "set_default_uint_dtype"], [449, 2, 1, "", "set_exception_trace_mode"], [450, 2, 1, "", "set_item"], [451, 2, 1, "", "set_min_base"], [452, 2, 1, "", "set_min_denominator"], [508, 2, 1, "", "set_nest_at_index"], [508, 2, 1, "", "set_nest_at_indices"], [453, 2, 1, "", "set_nestable_mode"], [454, 2, 1, "", "set_precise_mode"], [455, 2, 1, "", "set_queue_timeout"], [456, 2, 1, "", "set_shape_array_mode"], [457, 2, 1, "", "set_show_func_wrapper_trace_mode"], [157, 2, 1, "", "set_soft_device_mode"], [158, 2, 1, "", "set_split_factor"], [458, 2, 1, "", "set_tmp_dir"], [459, 2, 1, "", "shape"], [510, 2, 1, "", "shuffle"], [493, 2, 1, "", "sigmoid"], [231, 2, 1, "", "sign"], [291, 2, 1, "", "signbit"], [286, 2, 1, "", "silu"], [232, 2, 1, "", "sin"], [291, 2, 1, "", "sinc"], [233, 2, 1, "", "sinh"], [504, 2, 1, "", "slogdet"], [493, 2, 1, "", "softmax"], [493, 2, 1, "", "softplus"], [504, 2, 1, "", "solve"], [513, 2, 1, "", "sort"], [505, 2, 1, "", "sparse_cross_entropy"], [506, 2, 1, "", "split"], [159, 2, 1, "", "split_factor"], [160, 2, 1, "", "split_func_call"], [234, 2, 1, "", "sqrt"], [235, 2, 1, "", "square"], [506, 2, 1, "", "squeeze"], [460, 2, 1, "", "stable_divide"], [461, 2, 1, "", "stable_pow"], [506, 2, 1, "", "stack"], [514, 2, 1, "", "std"], [502, 2, 1, "", "stop_gradient"], [462, 2, 1, "", "strides"], [236, 2, 1, "", "subtract"], [514, 2, 1, "", "sum"], [463, 2, 1, "", "supports_inplace_updates"], [504, 2, 1, "", "svd"], [504, 2, 1, "", "svdvals"], [506, 2, 1, "", "swapaxes"], [297, 2, 1, "", "take_along_axis"], [237, 2, 1, "", "tan"], [238, 2, 1, "", "tanh"], [504, 2, 1, "", "tensordot"], [504, 2, 1, "", "tensorsolve"], [286, 2, 1, "", "thresholded_relu"], [506, 2, 1, "", "tile"], [161, 2, 1, "", "to_device"], [464, 2, 1, "", "to_ivy_shape"], [465, 2, 1, "", "to_list"], [466, 2, 1, "", "to_native_shape"], [467, 2, 1, "", "to_numpy"], [468, 2, 1, "", "to_scalar"], [297, 2, 1, "", "top_k"], [162, 2, 1, "", "total_mem_on_dev"], [163, 2, 1, "", "tpu_is_available"], [504, 2, 1, "", "trace"], [2, 2, 1, "", "transpile"], [239, 2, 1, "", "trapz"], [496, 2, 1, "", "tril"], [288, 2, 1, "", "tril_indices"], [496, 2, 1, "", "triu"], [496, 2, 1, "", "triu_indices"], [240, 2, 1, "", "trunc"], [241, 2, 1, "", "trunc_divide"], [469, 2, 1, "", "try_else_none"], [133, 2, 1, "", "type_promote_arrays"], [2, 2, 1, "", "unify"], [512, 2, 1, "", "unique_all"], [297, 2, 1, "", "unique_consecutive"], [512, 2, 1, "", "unique_counts"], [512, 2, 1, "", "unique_inverse"], [512, 2, 1, "", "unique_values"], [302, 2, 1, "", "unravel_index"], [470, 2, 1, "", "unset_array_mode"], [134, 2, 1, "", "unset_default_complex_dtype"], [164, 2, 1, "", "unset_default_device"], [135, 2, 1, "", "unset_default_dtype"], [136, 2, 1, "", "unset_default_float_dtype"], [137, 2, 1, "", "unset_default_int_dtype"], [138, 2, 1, "", "unset_default_uint_dtype"], [471, 2, 1, "", "unset_exception_trace_mode"], [472, 2, 1, "", "unset_min_base"], [473, 2, 1, "", "unset_min_denominator"], [474, 2, 1, "", "unset_nestable_mode"], [475, 2, 1, "", "unset_precise_mode"], [476, 2, 1, "", "unset_queue_timeout"], [477, 2, 1, "", "unset_shape_array_mode"], [478, 2, 1, "", "unset_show_func_wrapper_trace_mode"], [165, 2, 1, "", "unset_soft_device_mode"], [479, 2, 1, "", "unset_tmp_dir"], [288, 2, 1, "", "unsorted_segment_min"], [506, 2, 1, "", "unstack"], [166, 2, 1, "", "used_mem_on_dev"], [139, 2, 1, "", "valid_dtype"], [502, 2, 1, "", "value_and_grad"], [501, 2, 1, "", "value_is_nan"], [504, 2, 1, "", "vander"], [514, 2, 1, "", "var"], [504, 2, 1, "", "vecdot"], [504, 2, 1, "", "vector_norm"], [504, 2, 1, "", "vector_to_skew_symmetric_matrix"], [501, 2, 1, "", "vmap"], [288, 2, 1, "", "vorbis_window"], [297, 2, 1, "", "vsplit"], [297, 2, 1, "", "vstack"], [511, 2, 1, "", "where"], [495, 2, 1, "", "while_loop"], [291, 2, 1, "", "xlogy"], [506, 2, 1, "", "zero_pad"], [496, 2, 1, "", "zeros"], [496, 2, 1, "", "zeros_like"], [291, 2, 1, "", "zeta"]], "ivy.Container": [[167, 0, 1, "", "abs"], [168, 0, 1, "", "acos"], [169, 0, 1, "", "acosh"], [482, 0, 1, "", "adam_step"], [483, 0, 1, "", "adam_update"], [308, 0, 1, "", "adaptive_avg_pool1d"], [309, 0, 1, "", "adaptive_avg_pool2d"], [170, 0, 1, "", "add"], [337, 0, 1, "", "adjoint"], [632, 0, 1, "", "all"], [404, 0, 1, "", "all_equal"], [261, 0, 1, "", "allclose"], [171, 0, 1, "", "angle"], [633, 0, 1, "", "any"], [609, 0, 1, "", "argmax"], [610, 0, 1, "", "argmin"], [618, 0, 1, "", "argsort"], [611, 0, 1, "", "argwhere"], [407, 0, 1, "", "array_equal"], [347, 0, 1, "", "as_strided"], [71, 0, 1, "", "asarray"], [172, 0, 1, "", "asin"], [173, 0, 1, "", "asinh"], [408, 0, 1, "", "assert_supports_inplace"], [348, 0, 1, "", "associative_scan"], [99, 0, 1, "", "astype"], [174, 0, 1, "", "atan"], [175, 0, 1, "", "atan2"], [176, 0, 1, "", "atanh"], [349, 0, 1, "", "atleast_1d"], [350, 0, 1, "", "atleast_2d"], [351, 0, 1, "", "atleast_3d"], [311, 0, 1, "", "avg_pool1d"], [312, 0, 1, "", "avg_pool2d"], [313, 0, 1, "", "avg_pool3d"], [374, 0, 1, "", "batch_norm"], [380, 0, 1, "", "bernoulli"], [381, 0, 1, "", "beta"], [262, 0, 1, "", "binarizer"], [561, 0, 1, "", "binary_cross_entropy"], [392, 0, 1, "", "bincount"], [177, 0, 1, "", "bitwise_and"], [178, 0, 1, "", "bitwise_invert"], [179, 0, 1, "", "bitwise_left_shift"], [180, 0, 1, "", "bitwise_or"], [181, 0, 1, "", "bitwise_right_shift"], [182, 0, 1, "", "bitwise_xor"], [100, 0, 1, "", "broadcast_arrays"], [352, 0, 1, "", "broadcast_shapes"], [101, 0, 1, "", "broadcast_to"], [102, 0, 1, "", "can_cast"], [183, 0, 1, "", "ceil"], [531, 0, 1, "", "cholesky"], [564, 0, 1, "", "clip"], [410, 0, 1, "", "clip_matrix_norm"], [411, 0, 1, "", "clip_vector_norm"], [565, 0, 1, "", "concat"], [353, 0, 1, "", "concat_from_sequence"], [338, 0, 1, "", "cond"], [263, 0, 1, "", "conj"], [566, 0, 1, "", "constant_pad"], [517, 0, 1, "", "conv1d"], [518, 0, 1, "", "conv1d_transpose"], [519, 0, 1, "", "conv2d"], [520, 0, 1, "", "conv2d_transpose"], [521, 0, 1, "", "conv3d"], [522, 0, 1, "", "conv3d_transpose"], [77, 0, 1, "", "copy_array"], [264, 0, 1, "", "copysign"], [393, 0, 1, "", "corrcoef"], [184, 0, 1, "", "cos"], [185, 0, 1, "", "cosh"], [265, 0, 1, "", "count_nonzero"], [394, 0, 1, "", "cov"], [532, 0, 1, "", "cross"], [562, 0, 1, "", "cross_entropy"], [395, 0, 1, "", "cummax"], [396, 0, 1, "", "cummin"], [622, 0, 1, "", "cumprod"], [623, 0, 1, "", "cumsum"], [314, 0, 1, "", "dct"], [186, 0, 1, "", "deg2rad"], [525, 0, 1, "", "depthwise_conv2d"], [533, 0, 1, "", "det"], [144, 0, 1, "", "dev"], [315, 0, 1, "", "dft"], [534, 0, 1, "", "diag"], [339, 0, 1, "", "diagflat"], [535, 0, 1, "", "diagonal"], [266, 0, 1, "", "diff"], [382, 0, 1, "", "dirichlet"], [187, 0, 1, "", "divide"], [526, 0, 1, "", "dropout"], [316, 0, 1, "", "dropout1d"], [317, 0, 1, "", "dropout2d"], [318, 0, 1, "", "dropout3d"], [354, 0, 1, "", "dsplit"], [355, 0, 1, "", "dstack"], [110, 0, 1, "", "dtype"], [340, 0, 1, "", "eig"], [537, 0, 1, "", "eigh"], [341, 0, 1, "", "eigh_tridiagonal"], [342, 0, 1, "", "eigvals"], [538, 0, 1, "", "eigvalsh"], [415, 0, 1, "", "einops_rearrange"], [416, 0, 1, "", "einops_reduce"], [417, 0, 1, "", "einops_repeat"], [624, 0, 1, "", "einsum"], [242, 0, 1, "", "elu"], [319, 0, 1, "", "embedding"], [79, 0, 1, "", "empty_like"], [188, 0, 1, "", "equal"], [189, 0, 1, "", "erf"], [190, 0, 1, "", "exp"], [191, 0, 1, "", "exp2"], [356, 0, 1, "", "expand"], [567, 0, 1, "", "expand_dims"], [192, 0, 1, "", "expm1"], [250, 0, 1, "", "eye_like"], [320, 0, 1, "", "fft"], [357, 0, 1, "", "fill_diagonal"], [112, 0, 1, "", "finfo"], [267, 0, 1, "", "fix"], [358, 0, 1, "", "flatten"], [568, 0, 1, "", "flip"], [359, 0, 1, "", "fliplr"], [360, 0, 1, "", "flipud"], [268, 0, 1, "", "float_power"], [193, 0, 1, "", "floor"], [194, 0, 1, "", "floor_divide"], [269, 0, 1, "", "fmax"], [195, 0, 1, "", "fmin"], [196, 0, 1, "", "fmod"], [419, 0, 1, "", "fourier_encode"], [270, 0, 1, "", "frexp"], [81, 0, 1, "", "from_dlpack"], [82, 0, 1, "", "frombuffer"], [84, 0, 1, "", "full_like"], [383, 0, 1, "", "gamma"], [422, 0, 1, "", "gather"], [423, 0, 1, "", "gather_nd"], [197, 0, 1, "", "gcd"], [55, 0, 1, "", "gelu"], [426, 0, 1, "", "get_num_dims"], [271, 0, 1, "", "gradient"], [486, 0, 1, "", "gradient_descent_update"], [198, 0, 1, "", "greater"], [199, 0, 1, "", "greater_equal"], [375, 0, 1, "", "group_norm"], [251, 0, 1, "", "hamming_window"], [252, 0, 1, "", "hann_window"], [56, 0, 1, "", "hardswish"], [428, 0, 1, "", "has_nans"], [361, 0, 1, "", "heaviside"], [397, 0, 1, "", "histogram"], [362, 0, 1, "", "hsplit"], [363, 0, 1, "", "hstack"], [272, 0, 1, "", "hypot"], [364, 0, 1, "", "i0"], [324, 0, 1, "", "idct"], [325, 0, 1, "", "ifft"], [326, 0, 1, "", "ifftn"], [398, 0, 1, "", "igamma"], [115, 0, 1, "", "iinfo"], [200, 0, 1, "", "imag"], [539, 0, 1, "", "inner"], [430, 0, 1, "", "inplace_decrement"], [431, 0, 1, "", "inplace_increment"], [432, 0, 1, "", "inplace_update"], [376, 0, 1, "", "instance_norm"], [328, 0, 1, "", "interpolate"], [540, 0, 1, "", "inv"], [386, 0, 1, "", "invert_permutation"], [434, 0, 1, "", "is_array"], [118, 0, 1, "", "is_bool_dtype"], [119, 0, 1, "", "is_complex_dtype"], [120, 0, 1, "", "is_float_dtype"], [122, 0, 1, "", "is_int_dtype"], [435, 0, 1, "", "is_ivy_array"], [438, 0, 1, "", "is_native_array"], [124, 0, 1, "", "is_uint_dtype"], [273, 0, 1, "", "isclose"], [201, 0, 1, "", "isfinite"], [439, 0, 1, "", "isin"], [202, 0, 1, "", "isinf"], [203, 0, 1, "", "isnan"], [204, 0, 1, "", "isreal"], [441, 0, 1, "", "itemsize"], [254, 0, 1, "", "kaiser_bessel_derived_window"], [255, 0, 1, "", "kaiser_window"], [343, 0, 1, "", "kron"], [377, 0, 1, "", "l1_normalize"], [378, 0, 1, "", "l2_normalize"], [488, 0, 1, "", "lamb_update"], [489, 0, 1, "", "lars_update"], [602, 0, 1, "", "layer_norm"], [205, 0, 1, "", "lcm"], [274, 0, 1, "", "ldexp"], [57, 0, 1, "", "leaky_relu"], [275, 0, 1, "", "lerp"], [206, 0, 1, "", "less"], [207, 0, 1, "", "less_equal"], [387, 0, 1, "", "lexsort"], [527, 0, 1, "", "linear"], [85, 0, 1, "", "linspace"], [208, 0, 1, "", "log"], [209, 0, 1, "", "log10"], [210, 0, 1, "", "log1p"], [211, 0, 1, "", "log2"], [58, 0, 1, "", "log_softmax"], [212, 0, 1, "", "logaddexp"], [213, 0, 1, "", "logaddexp2"], [214, 0, 1, "", "logical_and"], [215, 0, 1, "", "logical_not"], [216, 0, 1, "", "logical_or"], [217, 0, 1, "", "logical_xor"], [243, 0, 1, "", "logit"], [244, 0, 1, "", "logsigmoid"], [86, 0, 1, "", "logspace"], [379, 0, 1, "", "lp_normalize"], [528, 0, 1, "", "lstm_update"], [542, 0, 1, "", "matmul"], [344, 0, 1, "", "matrix_exp"], [543, 0, 1, "", "matrix_norm"], [544, 0, 1, "", "matrix_power"], [545, 0, 1, "", "matrix_rank"], [546, 0, 1, "", "matrix_transpose"], [625, 0, 1, "", "max"], [329, 0, 1, "", "max_pool1d"], [330, 0, 1, "", "max_pool2d"], [331, 0, 1, "", "max_pool3d"], [218, 0, 1, "", "maximum"], [626, 0, 1, "", "mean"], [399, 0, 1, "", "median"], [87, 0, 1, "", "meshgrid"], [627, 0, 1, "", "min"], [219, 0, 1, "", "minimum"], [59, 0, 1, "", "mish"], [277, 0, 1, "", "modf"], [365, 0, 1, "", "moveaxis"], [619, 0, 1, "", "msort"], [345, 0, 1, "", "multi_dot"], [529, 0, 1, "", "multi_head_attention"], [603, 0, 1, "", "multinomial"], [220, 0, 1, "", "multiply"], [221, 0, 1, "", "nan_to_num"], [400, 0, 1, "", "nanmean"], [401, 0, 1, "", "nanmedian"], [278, 0, 1, "", "nansum"], [88, 0, 1, "", "native_array"], [222, 0, 1, "", "negative"], [279, 0, 1, "", "nextafter"], [612, 0, 1, "", "nonzero"], [223, 0, 1, "", "not_equal"], [89, 0, 1, "", "one_hot"], [91, 0, 1, "", "ones_like"], [490, 0, 1, "", "optimizer_update"], [547, 0, 1, "", "outer"], [366, 0, 1, "", "pad"], [569, 0, 1, "", "permute_dims"], [548, 0, 1, "", "pinv"], [384, 0, 1, "", "poisson"], [224, 0, 1, "", "positive"], [225, 0, 1, "", "pow"], [245, 0, 1, "", "prelu"], [628, 0, 1, "", "prod"], [549, 0, 1, "", "qr"], [403, 0, 1, "", "quantile"], [226, 0, 1, "", "rad2deg"], [604, 0, 1, "", "randint"], [605, 0, 1, "", "random_normal"], [606, 0, 1, "", "random_uniform"], [227, 0, 1, "", "real"], [228, 0, 1, "", "reciprocal"], [284, 0, 1, "", "reduce"], [335, 0, 1, "", "reduce_window"], [60, 0, 1, "", "relu"], [246, 0, 1, "", "relu6"], [229, 0, 1, "", "remainder"], [570, 0, 1, "", "repeat"], [571, 0, 1, "", "reshape"], [127, 0, 1, "", "result_type"], [336, 0, 1, "", "rfftn"], [572, 0, 1, "", "roll"], [368, 0, 1, "", "rot90"], [230, 0, 1, "", "round"], [530, 0, 1, "", "scaled_dot_product_attention"], [446, 0, 1, "", "scatter_flat"], [447, 0, 1, "", "scatter_nd"], [620, 0, 1, "", "searchsorted"], [247, 0, 1, "", "selu"], [608, 0, 1, "", "shuffle"], [61, 0, 1, "", "sigmoid"], [231, 0, 1, "", "sign"], [280, 0, 1, "", "signbit"], [248, 0, 1, "", "silu"], [232, 0, 1, "", "sin"], [281, 0, 1, "", "sinc"], [233, 0, 1, "", "sinh"], [550, 0, 1, "", "slogdet"], [62, 0, 1, "", "softmax"], [63, 0, 1, "", "softplus"], [551, 0, 1, "", "solve"], [621, 0, 1, "", "sort"], [563, 0, 1, "", "sparse_cross_entropy"], [573, 0, 1, "", "split"], [234, 0, 1, "", "sqrt"], [235, 0, 1, "", "square"], [574, 0, 1, "", "squeeze"], [460, 0, 1, "", "stable_divide"], [461, 0, 1, "", "stable_pow"], [575, 0, 1, "", "stack"], [629, 0, 1, "", "std"], [491, 0, 1, "", "stop_gradient"], [462, 0, 1, "", "strides"], [236, 0, 1, "", "subtract"], [630, 0, 1, "", "sum"], [463, 0, 1, "", "supports_inplace_updates"], [552, 0, 1, "", "svd"], [553, 0, 1, "", "svdvals"], [576, 0, 1, "", "swapaxes"], [369, 0, 1, "", "take_along_axis"], [237, 0, 1, "", "tan"], [238, 0, 1, "", "tanh"], [554, 0, 1, "", "tensordot"], [555, 0, 1, "", "tensorsolve"], [249, 0, 1, "", "thresholded_relu"], [577, 0, 1, "", "tile"], [161, 0, 1, "", "to_device"], [465, 0, 1, "", "to_list"], [467, 0, 1, "", "to_numpy"], [468, 0, 1, "", "to_scalar"], [370, 0, 1, "", "top_k"], [556, 0, 1, "", "trace"], [239, 0, 1, "", "trapz"], [92, 0, 1, "", "tril"], [258, 0, 1, "", "tril_indices"], [93, 0, 1, "", "triu"], [94, 0, 1, "", "triu_indices"], [240, 0, 1, "", "trunc"], [241, 0, 1, "", "trunc_divide"], [614, 0, 1, "", "unique_all"], [371, 0, 1, "", "unique_consecutive"], [615, 0, 1, "", "unique_counts"], [616, 0, 1, "", "unique_inverse"], [617, 0, 1, "", "unique_values"], [385, 0, 1, "", "unravel_index"], [259, 0, 1, "", "unsorted_segment_min"], [578, 0, 1, "", "unstack"], [480, 0, 1, "", "value_is_nan"], [557, 0, 1, "", "vander"], [631, 0, 1, "", "var"], [558, 0, 1, "", "vecdot"], [559, 0, 1, "", "vector_norm"], [560, 0, 1, "", "vector_to_skew_symmetric_matrix"], [260, 0, 1, "", "vorbis_window"], [372, 0, 1, "", "vsplit"], [373, 0, 1, "", "vstack"], [613, 0, 1, "", "where"], [282, 0, 1, "", "xlogy"], [579, 0, 1, "", "zero_pad"], [96, 0, 1, "", "zeros_like"], [283, 0, 1, "", "zeta"]], "ivy.data_classes.array": [[3, 3, 0, "-", "activations"], [48, 3, 0, "-", "array"], [4, 3, 0, "-", "conversions"], [5, 3, 0, "-", "creation"], [6, 3, 0, "-", "data_type"], [7, 3, 0, "-", "device"], [8, 3, 0, "-", "elementwise"], [9, 3, 0, "-", "experimental"], [10, 3, 0, "-", "general"], [11, 3, 0, "-", "gradients"], [12, 3, 0, "-", "image"], [13, 3, 0, "-", "layers"], [14, 3, 0, "-", "linear_algebra"], [15, 3, 0, "-", "losses"], [16, 3, 0, "-", "manipulation"], [17, 3, 0, "-", "norms"], [18, 3, 0, "-", "random"], [19, 3, 0, "-", "searching"], [20, 3, 0, "-", "set"], [21, 3, 0, "-", "sorting"], [22, 3, 0, "-", "statistical"], [23, 3, 0, "-", "utility"], [24, 3, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[3, 1, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[3, 4, 1, "", "_abc_impl"], [3, 0, 1, "", "gelu"], [3, 0, 1, "", "hardswish"], [3, 0, 1, "", "leaky_relu"], [3, 0, 1, "", "log_softmax"], [3, 0, 1, "", "mish"], [3, 0, 1, "", "relu"], [3, 0, 1, "", "sigmoid"], [3, 0, 1, "", "softmax"], [3, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[48, 1, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[48, 5, 1, "", "T"], [48, 0, 1, "", "__abs__"], [48, 0, 1, "", "__add__"], [48, 0, 1, "", "__eq__"], [48, 0, 1, "", "__ge__"], [48, 0, 1, "", "__gt__"], [48, 0, 1, "", "__init__"], [48, 0, 1, "", "__le__"], [48, 0, 1, "", "__lt__"], [48, 0, 1, "", "__ne__"], [48, 0, 1, "", "__pow__"], [48, 0, 1, "", "__radd__"], [48, 0, 1, "", "__rrshift__"], [48, 0, 1, "", "__rshift__"], [48, 0, 1, "", "__rsub__"], [48, 0, 1, "", "__sub__"], [48, 0, 1, "", "__truediv__"], [48, 0, 1, "", "__xor__"], [48, 5, 1, "", "backend"], [48, 5, 1, "", "base"], [48, 5, 1, "", "data"], [48, 5, 1, "", "device"], [48, 5, 1, "", "dtype"], [48, 5, 1, "", "dynamic_backend"], [48, 5, 1, "", "itemsize"], [48, 5, 1, "", "mT"], [48, 5, 1, "", "ndim"], [48, 5, 1, "", "shape"], [48, 5, 1, "", "size"], [48, 5, 1, "", "strides"]], "ivy.data_classes.array.conversions": [[4, 2, 1, "", "_to_ivy"], [4, 2, 1, "", "_to_native"], [4, 2, 1, "", "args_to_ivy"], [4, 2, 1, "", "args_to_native"], [4, 2, 1, "", "to_ivy"], [4, 2, 1, "", "to_native"]], "ivy.data_classes.array.creation": [[5, 1, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[5, 4, 1, "", "_abc_impl"], [5, 0, 1, "", "asarray"], [5, 0, 1, "", "copy_array"], [5, 0, 1, "", "empty_like"], [5, 0, 1, "", "from_dlpack"], [5, 0, 1, "", "full_like"], [5, 0, 1, "", "linspace"], [5, 0, 1, "", "logspace"], [5, 0, 1, "", "meshgrid"], [5, 0, 1, "", "native_array"], [5, 0, 1, "", "one_hot"], [5, 0, 1, "", "ones_like"], [5, 0, 1, "", "tril"], [5, 0, 1, "", "triu"], [5, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[6, 1, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[6, 4, 1, "", "_abc_impl"], [6, 0, 1, "", "astype"], [6, 0, 1, "", "broadcast_arrays"], [6, 0, 1, "", "broadcast_to"], [6, 0, 1, "", "can_cast"], [6, 0, 1, "", "dtype"], [6, 0, 1, "", "finfo"], [6, 0, 1, "", "iinfo"], [6, 0, 1, "", "is_bool_dtype"], [6, 0, 1, "", "is_float_dtype"], [6, 0, 1, "", "is_int_dtype"], [6, 0, 1, "", "is_uint_dtype"], [6, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[7, 1, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[7, 4, 1, "", "_abc_impl"], [7, 0, 1, "", "dev"], [7, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[8, 1, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[8, 4, 1, "", "_abc_impl"], [8, 0, 1, "", "abs"], [8, 0, 1, "", "acos"], [8, 0, 1, "", "acosh"], [8, 0, 1, "", "add"], [8, 0, 1, "", "angle"], [8, 0, 1, "", "asin"], [8, 0, 1, "", "asinh"], [8, 0, 1, "", "atan"], [8, 0, 1, "", "atan2"], [8, 0, 1, "", "atanh"], [8, 0, 1, "", "bitwise_and"], [8, 0, 1, "", "bitwise_invert"], [8, 0, 1, "", "bitwise_left_shift"], [8, 0, 1, "", "bitwise_or"], [8, 0, 1, "", "bitwise_right_shift"], [8, 0, 1, "", "bitwise_xor"], [8, 0, 1, "", "ceil"], [8, 0, 1, "", "cos"], [8, 0, 1, "", "cosh"], [8, 0, 1, "", "deg2rad"], [8, 0, 1, "", "divide"], [8, 0, 1, "", "equal"], [8, 0, 1, "", "erf"], [8, 0, 1, "", "exp"], [8, 0, 1, "", "exp2"], [8, 0, 1, "", "expm1"], [8, 0, 1, "", "floor"], [8, 0, 1, "", "floor_divide"], [8, 0, 1, "", "fmin"], [8, 0, 1, "", "gcd"], [8, 0, 1, "", "greater"], [8, 0, 1, "", "greater_equal"], [8, 0, 1, "", "imag"], [8, 0, 1, "", "isfinite"], [8, 0, 1, "", "isinf"], [8, 0, 1, "", "isnan"], [8, 0, 1, "", "isreal"], [8, 0, 1, "", "lcm"], [8, 0, 1, "", "less"], [8, 0, 1, "", "less_equal"], [8, 0, 1, "", "log"], [8, 0, 1, "", "log10"], [8, 0, 1, "", "log1p"], [8, 0, 1, "", "log2"], [8, 0, 1, "", "logaddexp"], [8, 0, 1, "", "logaddexp2"], [8, 0, 1, "", "logical_and"], [8, 0, 1, "", "logical_not"], [8, 0, 1, "", "logical_or"], [8, 0, 1, "", "logical_xor"], [8, 0, 1, "", "maximum"], [8, 0, 1, "", "minimum"], [8, 0, 1, "", "multiply"], [8, 0, 1, "", "nan_to_num"], [8, 0, 1, "", "negative"], [8, 0, 1, "", "not_equal"], [8, 0, 1, "", "positive"], [8, 0, 1, "", "pow"], [8, 0, 1, "", "rad2deg"], [8, 0, 1, "", "real"], [8, 0, 1, "", "reciprocal"], [8, 0, 1, "", "remainder"], [8, 0, 1, "", "round"], [8, 0, 1, "", "sign"], [8, 0, 1, "", "sin"], [8, 0, 1, "", "sinh"], [8, 0, 1, "", "sqrt"], [8, 0, 1, "", "square"], [8, 0, 1, "", "subtract"], [8, 0, 1, "", "tan"], [8, 0, 1, "", "tanh"], [8, 0, 1, "", "trapz"], [8, 0, 1, "", "trunc"], [8, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[9, 3, 0, "-", "activations"], [9, 3, 0, "-", "conversions"], [9, 3, 0, "-", "creation"], [9, 3, 0, "-", "data_type"], [9, 3, 0, "-", "device"], [9, 3, 0, "-", "elementwise"], [9, 3, 0, "-", "general"], [9, 3, 0, "-", "gradients"], [9, 3, 0, "-", "image"], [9, 3, 0, "-", "layers"], [9, 3, 0, "-", "linear_algebra"], [9, 3, 0, "-", "losses"], [9, 3, 0, "-", "manipulation"], [9, 3, 0, "-", "norms"], [9, 3, 0, "-", "random"], [9, 3, 0, "-", "searching"], [9, 3, 0, "-", "set"], [9, 3, 0, "-", "sorting"], [9, 3, 0, "-", "statistical"], [9, 3, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[9, 1, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "elu"], [9, 0, 1, "", "logit"], [9, 0, 1, "", "logsigmoid"], [9, 0, 1, "", "prelu"], [9, 0, 1, "", "relu6"], [9, 0, 1, "", "selu"], [9, 0, 1, "", "silu"], [9, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[9, 1, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[9, 1, 1, "", "_ArrayWithCreationExperimental"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "eye_like"], [9, 0, 1, "", "unsorted_segment_min"]], "ivy.data_classes.array.experimental.data_type": [[9, 1, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[9, 1, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[9, 1, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "allclose"], [9, 0, 1, "", "binarizer"], [9, 0, 1, "", "conj"], [9, 0, 1, "", "copysign"], [9, 0, 1, "", "count_nonzero"], [9, 0, 1, "", "diff"], [9, 0, 1, "", "fix"], [9, 0, 1, "", "float_power"], [9, 0, 1, "", "fmax"], [9, 0, 1, "", "fmod"], [9, 0, 1, "", "frexp"], [9, 0, 1, "", "gradient"], [9, 0, 1, "", "hypot"], [9, 0, 1, "", "isclose"], [9, 0, 1, "", "ldexp"], [9, 0, 1, "", "lerp"], [9, 0, 1, "", "lgamma"], [9, 0, 1, "", "modf"], [9, 0, 1, "", "nansum"], [9, 0, 1, "", "nextafter"], [9, 0, 1, "", "signbit"], [9, 0, 1, "", "sinc"], [9, 0, 1, "", "xlogy"], [9, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[9, 1, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "reduce"]], "ivy.data_classes.array.experimental.gradients": [[9, 1, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[9, 1, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[9, 1, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "adaptive_avg_pool1d"], [9, 0, 1, "", "adaptive_avg_pool2d"], [9, 0, 1, "", "avg_pool1d"], [9, 0, 1, "", "avg_pool2d"], [9, 0, 1, "", "avg_pool3d"], [9, 0, 1, "", "dct"], [9, 0, 1, "", "dft"], [9, 0, 1, "", "embedding"], [9, 0, 1, "", "fft"], [9, 0, 1, "", "fft2"], [9, 0, 1, "", "idct"], [9, 0, 1, "", "ifft"], [9, 0, 1, "", "ifftn"], [9, 0, 1, "", "interpolate"], [9, 0, 1, "", "max_pool1d"], [9, 0, 1, "", "max_pool2d"], [9, 0, 1, "", "max_pool3d"], [9, 0, 1, "", "reduce_window"], [9, 0, 1, "", "rfftn"]], "ivy.data_classes.array.experimental.linear_algebra": [[9, 1, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "adjoint"], [9, 0, 1, "", "cond"], [9, 0, 1, "", "diagflat"], [9, 0, 1, "", "eig"], [9, 0, 1, "", "eigh_tridiagonal"], [9, 0, 1, "", "eigvals"], [9, 0, 1, "", "kron"], [9, 0, 1, "", "matrix_exp"], [9, 0, 1, "", "multi_dot"]], "ivy.data_classes.array.experimental.losses": [[9, 1, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.manipulation": [[9, 1, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "as_strided"], [9, 0, 1, "", "associative_scan"], [9, 0, 1, "", "atleast_1d"], [9, 0, 1, "", "atleast_2d"], [9, 0, 1, "", "atleast_3d"], [9, 0, 1, "", "concat_from_sequence"], [9, 0, 1, "", "dsplit"], [9, 0, 1, "", "dstack"], [9, 0, 1, "", "expand"], [9, 0, 1, "", "fill_diagonal"], [9, 0, 1, "", "flatten"], [9, 0, 1, "", "fliplr"], [9, 0, 1, "", "flipud"], [9, 0, 1, "", "heaviside"], [9, 0, 1, "", "hsplit"], [9, 0, 1, "", "hstack"], [9, 0, 1, "", "i0"], [9, 0, 1, "", "moveaxis"], [9, 0, 1, "", "pad"], [9, 0, 1, "", "rot90"], [9, 0, 1, "", "take_along_axis"], [9, 0, 1, "", "top_k"], [9, 0, 1, "", "unique_consecutive"], [9, 0, 1, "", "vsplit"], [9, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[9, 1, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "batch_norm"], [9, 0, 1, "", "group_norm"], [9, 0, 1, "", "instance_norm"], [9, 0, 1, "", "l1_normalize"], [9, 0, 1, "", "l2_normalize"], [9, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[9, 1, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "bernoulli"], [9, 0, 1, "", "beta"], [9, 0, 1, "", "dirichlet"], [9, 0, 1, "", "gamma"], [9, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[9, 1, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[9, 1, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[9, 1, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "lexsort"]], "ivy.data_classes.array.experimental.statistical": [[9, 1, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[9, 4, 1, "", "_abc_impl"], [9, 0, 1, "", "bincount"], [9, 0, 1, "", "corrcoef"], [9, 0, 1, "", "cov"], [9, 0, 1, "", "cummax"], [9, 0, 1, "", "cummin"], [9, 0, 1, "", "histogram"], [9, 0, 1, "", "igamma"], [9, 0, 1, "", "median"], [9, 0, 1, "", "nanmean"], [9, 0, 1, "", "nanmedian"], [9, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[9, 1, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[9, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.general": [[10, 1, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[10, 4, 1, "", "_abc_impl"], [10, 0, 1, "", "all_equal"], [10, 0, 1, "", "array_equal"], [10, 0, 1, "", "assert_supports_inplace"], [10, 0, 1, "", "clip_matrix_norm"], [10, 0, 1, "", "clip_vector_norm"], [10, 0, 1, "", "default"], [10, 0, 1, "", "einops_rearrange"], [10, 0, 1, "", "einops_reduce"], [10, 0, 1, "", "einops_repeat"], [10, 0, 1, "", "exists"], [10, 0, 1, "", "fourier_encode"], [10, 0, 1, "", "gather"], [10, 0, 1, "", "gather_nd"], [10, 0, 1, "", "get_num_dims"], [10, 0, 1, "", "has_nans"], [10, 0, 1, "", "inplace_decrement"], [10, 0, 1, "", "inplace_increment"], [10, 0, 1, "", "inplace_update"], [10, 0, 1, "", "is_array"], [10, 0, 1, "", "is_ivy_array"], [10, 0, 1, "", "is_ivy_container"], [10, 0, 1, "", "is_native_array"], [10, 0, 1, "", "isin"], [10, 0, 1, "", "scatter_flat"], [10, 0, 1, "", "scatter_nd"], [10, 0, 1, "", "stable_divide"], [10, 0, 1, "", "stable_pow"], [10, 0, 1, "", "supports_inplace_updates"], [10, 0, 1, "", "to_file"], [10, 0, 1, "", "to_list"], [10, 0, 1, "", "to_numpy"], [10, 0, 1, "", "to_scalar"], [10, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[11, 1, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[11, 4, 1, "", "_abc_impl"], [11, 0, 1, "", "adam_step"], [11, 0, 1, "", "adam_update"], [11, 0, 1, "", "gradient_descent_update"], [11, 0, 1, "", "lamb_update"], [11, 0, 1, "", "lars_update"], [11, 0, 1, "", "optimizer_update"], [11, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[12, 1, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[12, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[13, 1, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[13, 4, 1, "", "_abc_impl"], [13, 0, 1, "", "conv1d"], [13, 0, 1, "", "conv1d_transpose"], [13, 0, 1, "", "conv2d"], [13, 0, 1, "", "conv2d_transpose"], [13, 0, 1, "", "conv3d"], [13, 0, 1, "", "conv3d_transpose"], [13, 0, 1, "", "depthwise_conv2d"], [13, 0, 1, "", "dropout"], [13, 0, 1, "", "dropout1d"], [13, 0, 1, "", "dropout2d"], [13, 0, 1, "", "dropout3d"], [13, 0, 1, "", "linear"], [13, 0, 1, "", "lstm_update"], [13, 0, 1, "", "multi_head_attention"], [13, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[14, 1, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[14, 4, 1, "", "_abc_impl"], [14, 0, 1, "", "cholesky"], [14, 0, 1, "", "cross"], [14, 0, 1, "", "det"], [14, 0, 1, "", "diag"], [14, 0, 1, "", "diagonal"], [14, 0, 1, "", "eig"], [14, 0, 1, "", "eigh"], [14, 0, 1, "", "eigvalsh"], [14, 0, 1, "", "inner"], [14, 0, 1, "", "inv"], [14, 0, 1, "", "matmul"], [14, 0, 1, "", "matrix_norm"], [14, 0, 1, "", "matrix_power"], [14, 0, 1, "", "matrix_rank"], [14, 0, 1, "", "matrix_transpose"], [14, 0, 1, "", "outer"], [14, 0, 1, "", "pinv"], [14, 0, 1, "", "qr"], [14, 0, 1, "", "slogdet"], [14, 0, 1, "", "solve"], [14, 0, 1, "", "svd"], [14, 0, 1, "", "svdvals"], [14, 0, 1, "", "tensordot"], [14, 0, 1, "", "tensorsolve"], [14, 0, 1, "", "trace"], [14, 0, 1, "", "vander"], [14, 0, 1, "", "vecdot"], [14, 0, 1, "", "vector_norm"], [14, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[15, 1, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[15, 4, 1, "", "_abc_impl"], [15, 0, 1, "", "binary_cross_entropy"], [15, 0, 1, "", "cross_entropy"], [15, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[16, 1, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[16, 4, 1, "", "_abc_impl"], [16, 0, 1, "", "clip"], [16, 0, 1, "", "concat"], [16, 0, 1, "", "constant_pad"], [16, 0, 1, "", "expand_dims"], [16, 0, 1, "", "flip"], [16, 0, 1, "", "permute_dims"], [16, 0, 1, "", "repeat"], [16, 0, 1, "", "reshape"], [16, 0, 1, "", "roll"], [16, 0, 1, "", "split"], [16, 0, 1, "", "squeeze"], [16, 0, 1, "", "stack"], [16, 0, 1, "", "swapaxes"], [16, 0, 1, "", "tile"], [16, 0, 1, "", "unstack"], [16, 0, 1, "", "view"], [16, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[17, 1, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[17, 4, 1, "", "_abc_impl"], [17, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[18, 1, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[18, 4, 1, "", "_abc_impl"], [18, 0, 1, "", "multinomial"], [18, 0, 1, "", "randint"], [18, 0, 1, "", "random_normal"], [18, 0, 1, "", "random_uniform"], [18, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[19, 1, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[19, 4, 1, "", "_abc_impl"], [19, 0, 1, "", "argmax"], [19, 0, 1, "", "argmin"], [19, 0, 1, "", "argwhere"], [19, 0, 1, "", "nonzero"], [19, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[20, 1, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[20, 4, 1, "", "_abc_impl"], [20, 0, 1, "", "unique_all"], [20, 0, 1, "", "unique_counts"], [20, 0, 1, "", "unique_inverse"], [20, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[21, 1, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[21, 4, 1, "", "_abc_impl"], [21, 0, 1, "", "argsort"], [21, 0, 1, "", "msort"], [21, 0, 1, "", "searchsorted"], [21, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[22, 1, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[22, 4, 1, "", "_abc_impl"], [22, 0, 1, "", "cumprod"], [22, 0, 1, "", "cumsum"], [22, 0, 1, "", "einsum"], [22, 0, 1, "", "max"], [22, 0, 1, "", "mean"], [22, 0, 1, "", "min"], [22, 0, 1, "", "prod"], [22, 0, 1, "", "std"], [22, 0, 1, "", "sum"], [22, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[23, 1, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[23, 4, 1, "", "_abc_impl"], [23, 0, 1, "", "all"], [23, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[24, 2, 1, "", "_wrap_function"], [24, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[25, 3, 0, "-", "activations"], [26, 3, 0, "-", "base"], [49, 3, 0, "-", "container"], [27, 3, 0, "-", "conversions"], [28, 3, 0, "-", "creation"], [29, 3, 0, "-", "data_type"], [30, 3, 0, "-", "device"], [31, 3, 0, "-", "elementwise"], [32, 3, 0, "-", "experimental"], [33, 3, 0, "-", "general"], [34, 3, 0, "-", "gradients"], [35, 3, 0, "-", "image"], [36, 3, 0, "-", "layers"], [37, 3, 0, "-", "linear_algebra"], [38, 3, 0, "-", "losses"], [39, 3, 0, "-", "manipulation"], [40, 3, 0, "-", "norms"], [41, 3, 0, "-", "random"], [42, 3, 0, "-", "searching"], [43, 3, 0, "-", "set"], [44, 3, 0, "-", "sorting"], [45, 3, 0, "-", "statistical"], [46, 3, 0, "-", "utility"], [47, 3, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[25, 1, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[25, 4, 1, "", "_abc_impl"], [25, 0, 1, "", "_static_gelu"], [25, 0, 1, "", "_static_hardswish"], [25, 0, 1, "", "_static_leaky_relu"], [25, 0, 1, "", "_static_log_softmax"], [25, 0, 1, "", "_static_mish"], [25, 0, 1, "", "_static_relu"], [25, 0, 1, "", "_static_sigmoid"], [25, 0, 1, "", "_static_softmax"], [25, 0, 1, "", "_static_softplus"], [25, 0, 1, "", "gelu"], [25, 0, 1, "", "hardswish"], [25, 0, 1, "", "leaky_relu"], [25, 0, 1, "", "log_softmax"], [25, 0, 1, "", "mish"], [25, 0, 1, "", "relu"], [25, 0, 1, "", "sigmoid"], [25, 0, 1, "", "softmax"], [25, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[26, 1, 1, "", "ContainerBase"], [26, 2, 1, "", "_is_jsonable"], [26, 2, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[26, 0, 1, "", "__getitem__"], [26, 0, 1, "", "__init__"], [26, 0, 1, "", "__setitem__"], [26, 4, 1, "", "_abc_impl"], [26, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [26, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [26, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [26, 0, 1, "", "_cont_concat_unify"], [26, 0, 1, "", "_cont_get_dev"], [26, 0, 1, "", "_cont_get_shape"], [26, 0, 1, "", "_cont_get_shapes"], [26, 5, 1, "", "_cont_ivy"], [26, 0, 1, "", "_cont_mean_unify"], [26, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [26, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [26, 0, 1, "", "_cont_slice_keys"], [26, 0, 1, "", "_cont_sum_unify"], [26, 0, 1, "", "_get_queue_item"], [26, 0, 1, "", "cont_all_false"], [26, 0, 1, "", "cont_all_key_chains"], [26, 0, 1, "", "cont_all_true"], [26, 0, 1, "", "cont_as_bools"], [26, 0, 1, "", "cont_assert_contains_sub_container"], [26, 0, 1, "", "cont_assert_contains_sub_structure"], [26, 0, 1, "", "cont_assert_identical"], [26, 0, 1, "", "cont_assert_identical_structure"], [26, 0, 1, "", "cont_at_key_chain"], [26, 0, 1, "", "cont_at_key_chains"], [26, 0, 1, "", "cont_at_keys"], [26, 0, 1, "", "cont_combine"], [26, 0, 1, "", "cont_common_key_chains"], [26, 5, 1, "", "cont_config"], [26, 0, 1, "", "cont_contains_sub_container"], [26, 0, 1, "", "cont_contains_sub_structure"], [26, 0, 1, "", "cont_copy"], [26, 0, 1, "", "cont_create_if_absent"], [26, 0, 1, "", "cont_cutoff_at_depth"], [26, 0, 1, "", "cont_cutoff_at_height"], [26, 0, 1, "", "cont_deep_copy"], [26, 5, 1, "", "cont_dev"], [26, 5, 1, "", "cont_dev_str"], [26, 0, 1, "", "cont_diff"], [26, 0, 1, "", "cont_duplicate_array_keychains"], [26, 0, 1, "", "cont_find_sub_container"], [26, 0, 1, "", "cont_find_sub_structure"], [26, 0, 1, "", "cont_flatten_key_chain"], [26, 0, 1, "", "cont_flatten_key_chains"], [26, 0, 1, "", "cont_format_key_chains"], [26, 0, 1, "", "cont_from_disk_as_hdf5"], [26, 0, 1, "", "cont_from_disk_as_json"], [26, 0, 1, "", "cont_from_disk_as_pickled"], [26, 0, 1, "", "cont_from_flat_list"], [26, 0, 1, "", "cont_handle_inplace"], [26, 0, 1, "", "cont_has_key"], [26, 0, 1, "", "cont_has_key_chain"], [26, 0, 1, "", "cont_identical"], [26, 0, 1, "", "cont_identical_array_shapes"], [26, 0, 1, "", "cont_identical_configs"], [26, 0, 1, "", "cont_identical_structure"], [26, 0, 1, "", "cont_if_exists"], [26, 0, 1, "", "cont_inplace_update"], [26, 5, 1, "", "cont_ivy"], [26, 0, 1, "", "cont_key_chains_containing"], [26, 0, 1, "", "cont_list_join"], [26, 0, 1, "", "cont_list_stack"], [26, 0, 1, "", "cont_load"], [26, 0, 1, "", "cont_map"], [26, 0, 1, "", "cont_map_sub_conts"], [26, 5, 1, "", "cont_max_depth"], [26, 0, 1, "", "cont_multi_map"], [26, 0, 1, "", "cont_multi_map_in_function"], [26, 0, 1, "", "cont_num_arrays"], [26, 0, 1, "", "cont_overwrite_at_key_chain"], [26, 0, 1, "", "cont_overwrite_at_key_chains"], [26, 0, 1, "", "cont_prune_empty"], [26, 0, 1, "", "cont_prune_key_chain"], [26, 0, 1, "", "cont_prune_key_chains"], [26, 0, 1, "", "cont_prune_key_from_key_chains"], [26, 0, 1, "", "cont_prune_keys"], [26, 0, 1, "", "cont_prune_keys_from_key_chains"], [26, 0, 1, "", "cont_reduce"], [26, 0, 1, "", "cont_remove_key_length_limit"], [26, 0, 1, "", "cont_remove_print_limit"], [26, 0, 1, "", "cont_reshape_like"], [26, 0, 1, "", "cont_restructure"], [26, 0, 1, "", "cont_restructure_key_chains"], [26, 0, 1, "", "cont_save"], [26, 0, 1, "", "cont_set_at_key_chain"], [26, 0, 1, "", "cont_set_at_key_chains"], [26, 0, 1, "", "cont_set_at_keys"], [26, 5, 1, "", "cont_shape"], [26, 5, 1, "", "cont_shapes"], [26, 0, 1, "", "cont_show"], [26, 0, 1, "", "cont_show_sub_container"], [26, 0, 1, "", "cont_size_ordered_arrays"], [26, 0, 1, "", "cont_slice_keys"], [26, 0, 1, "", "cont_slice_via_key"], [26, 0, 1, "", "cont_sort_by_key"], [26, 0, 1, "", "cont_structural_diff"], [26, 0, 1, "", "cont_to_dict"], [26, 0, 1, "", "cont_to_disk_as_hdf5"], [26, 0, 1, "", "cont_to_disk_as_json"], [26, 0, 1, "", "cont_to_disk_as_pickled"], [26, 0, 1, "", "cont_to_flat_list"], [26, 0, 1, "", "cont_to_iterator"], [26, 0, 1, "", "cont_to_iterator_keys"], [26, 0, 1, "", "cont_to_iterator_values"], [26, 0, 1, "", "cont_to_jsonable"], [26, 0, 1, "", "cont_to_nested_list"], [26, 0, 1, "", "cont_to_raw"], [26, 0, 1, "", "cont_trim_key"], [26, 0, 1, "", "cont_try_kc"], [26, 0, 1, "", "cont_unify"], [26, 0, 1, "", "cont_unstack_conts"], [26, 0, 1, "", "cont_update_config"], [26, 0, 1, "", "cont_with_default_key_color"], [26, 0, 1, "", "cont_with_entries_as_lists"], [26, 0, 1, "", "cont_with_ivy_backend"], [26, 0, 1, "", "cont_with_key_length_limit"], [26, 0, 1, "", "cont_with_print_indent"], [26, 0, 1, "", "cont_with_print_limit"], [26, 0, 1, "", "cont_with_print_line_spacing"], [26, 5, 1, "", "dynamic_backend"], [26, 0, 1, "", "h5_file_size"], [26, 0, 1, "", "shuffle_h5_file"], [26, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[49, 1, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[49, 0, 1, "", "__abs__"], [49, 0, 1, "", "__add__"], [49, 0, 1, "", "__eq__"], [49, 0, 1, "", "__ge__"], [49, 0, 1, "", "__gt__"], [49, 0, 1, "", "__init__"], [49, 0, 1, "", "__le__"], [49, 0, 1, "", "__lt__"], [49, 0, 1, "", "__ne__"], [49, 0, 1, "", "__pow__"], [49, 0, 1, "", "__radd__"], [49, 0, 1, "", "__rrshift__"], [49, 0, 1, "", "__rshift__"], [49, 0, 1, "", "__rsub__"], [49, 0, 1, "", "__sub__"], [49, 0, 1, "", "__truediv__"], [49, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[27, 1, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[27, 4, 1, "", "_abc_impl"], [27, 0, 1, "", "_static_to_ivy"], [27, 0, 1, "", "_static_to_native"], [27, 0, 1, "", "to_ivy"], [27, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[28, 1, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[28, 4, 1, "", "_abc_impl"], [28, 0, 1, "", "_static_arange"], [28, 0, 1, "", "_static_asarray"], [28, 0, 1, "", "_static_copy_array"], [28, 0, 1, "", "_static_empty"], [28, 0, 1, "", "_static_empty_like"], [28, 0, 1, "", "_static_eye"], [28, 0, 1, "", "_static_from_dlpack"], [28, 0, 1, "", "_static_full"], [28, 0, 1, "", "_static_full_like"], [28, 0, 1, "", "_static_linspace"], [28, 0, 1, "", "_static_logspace"], [28, 0, 1, "", "_static_meshgrid"], [28, 0, 1, "", "_static_native_array"], [28, 0, 1, "", "_static_one_hot"], [28, 0, 1, "", "_static_ones"], [28, 0, 1, "", "_static_ones_like"], [28, 0, 1, "", "_static_tril"], [28, 0, 1, "", "_static_triu"], [28, 0, 1, "", "_static_zeros"], [28, 0, 1, "", "_static_zeros_like"], [28, 0, 1, "", "asarray"], [28, 0, 1, "", "copy_array"], [28, 0, 1, "", "empty_like"], [28, 0, 1, "", "from_dlpack"], [28, 0, 1, "", "frombuffer"], [28, 0, 1, "", "full_like"], [28, 0, 1, "", "linspace"], [28, 0, 1, "", "logspace"], [28, 0, 1, "", "meshgrid"], [28, 0, 1, "", "native_array"], [28, 0, 1, "", "one_hot"], [28, 0, 1, "", "ones_like"], [28, 0, 1, "", "static_frombuffer"], [28, 0, 1, "", "static_triu_indices"], [28, 0, 1, "", "tril"], [28, 0, 1, "", "triu"], [28, 0, 1, "", "triu_indices"], [28, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[29, 1, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[29, 4, 1, "", "_abc_impl"], [29, 0, 1, "", "_static_astype"], [29, 0, 1, "", "_static_broadcast_arrays"], [29, 0, 1, "", "_static_broadcast_to"], [29, 0, 1, "", "_static_can_cast"], [29, 0, 1, "", "_static_default_complex_dtype"], [29, 0, 1, "", "_static_default_float_dtype"], [29, 0, 1, "", "_static_dtype"], [29, 0, 1, "", "_static_finfo"], [29, 0, 1, "", "_static_function_supported_dtypes"], [29, 0, 1, "", "_static_function_unsupported_dtypes"], [29, 0, 1, "", "_static_iinfo"], [29, 0, 1, "", "_static_is_bool_dtype"], [29, 0, 1, "", "_static_is_complex_dtype"], [29, 0, 1, "", "_static_is_float_dtype"], [29, 0, 1, "", "_static_is_int_dtype"], [29, 0, 1, "", "_static_is_uint_dtype"], [29, 0, 1, "", "_static_result_type"], [29, 0, 1, "", "astype"], [29, 0, 1, "", "broadcast_arrays"], [29, 0, 1, "", "broadcast_to"], [29, 0, 1, "", "can_cast"], [29, 0, 1, "", "dtype"], [29, 0, 1, "", "finfo"], [29, 0, 1, "", "iinfo"], [29, 0, 1, "", "is_bool_dtype"], [29, 0, 1, "", "is_complex_dtype"], [29, 0, 1, "", "is_float_dtype"], [29, 0, 1, "", "is_int_dtype"], [29, 0, 1, "", "is_uint_dtype"], [29, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[30, 1, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[30, 4, 1, "", "_abc_impl"], [30, 0, 1, "", "_static_dev"], [30, 0, 1, "", "_static_to_device"], [30, 0, 1, "", "dev"], [30, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[31, 1, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[31, 4, 1, "", "_abc_impl"], [31, 0, 1, "", "_static_abs"], [31, 0, 1, "", "_static_acos"], [31, 0, 1, "", "_static_acosh"], [31, 0, 1, "", "_static_add"], [31, 0, 1, "", "_static_asin"], [31, 0, 1, "", "_static_asinh"], [31, 0, 1, "", "_static_atan"], [31, 0, 1, "", "_static_atan2"], [31, 0, 1, "", "_static_atanh"], [31, 0, 1, "", "_static_bitwise_and"], [31, 0, 1, "", "_static_bitwise_invert"], [31, 0, 1, "", "_static_bitwise_left_shift"], [31, 0, 1, "", "_static_bitwise_or"], [31, 0, 1, "", "_static_bitwise_right_shift"], [31, 0, 1, "", "_static_bitwise_xor"], [31, 0, 1, "", "_static_ceil"], [31, 0, 1, "", "_static_cos"], [31, 0, 1, "", "_static_cosh"], [31, 0, 1, "", "_static_deg2rad"], [31, 0, 1, "", "_static_divide"], [31, 0, 1, "", "_static_equal"], [31, 0, 1, "", "_static_erf"], [31, 0, 1, "", "_static_exp"], [31, 0, 1, "", "_static_expm1"], [31, 0, 1, "", "_static_floor"], [31, 0, 1, "", "_static_floor_divide"], [31, 0, 1, "", "_static_greater"], [31, 0, 1, "", "_static_greater_equal"], [31, 0, 1, "", "_static_isfinite"], [31, 0, 1, "", "_static_isinf"], [31, 0, 1, "", "_static_isnan"], [31, 0, 1, "", "_static_isreal"], [31, 0, 1, "", "_static_lcm"], [31, 0, 1, "", "_static_less"], [31, 0, 1, "", "_static_less_equal"], [31, 0, 1, "", "_static_log"], [31, 0, 1, "", "_static_log10"], [31, 0, 1, "", "_static_log1p"], [31, 0, 1, "", "_static_log2"], [31, 0, 1, "", "_static_logaddexp"], [31, 0, 1, "", "_static_logical_and"], [31, 0, 1, "", "_static_logical_not"], [31, 0, 1, "", "_static_logical_or"], [31, 0, 1, "", "_static_logical_xor"], [31, 0, 1, "", "_static_maximum"], [31, 0, 1, "", "_static_minimum"], [31, 0, 1, "", "_static_multiply"], [31, 0, 1, "", "_static_negative"], [31, 0, 1, "", "_static_not_equal"], [31, 0, 1, "", "_static_positive"], [31, 0, 1, "", "_static_pow"], [31, 0, 1, "", "_static_rad2deg"], [31, 0, 1, "", "_static_reciprocal"], [31, 0, 1, "", "_static_remainder"], [31, 0, 1, "", "_static_round"], [31, 0, 1, "", "_static_sign"], [31, 0, 1, "", "_static_sin"], [31, 0, 1, "", "_static_sinh"], [31, 0, 1, "", "_static_sqrt"], [31, 0, 1, "", "_static_square"], [31, 0, 1, "", "_static_subtract"], [31, 0, 1, "", "_static_tan"], [31, 0, 1, "", "_static_tanh"], [31, 0, 1, "", "_static_trapz"], [31, 0, 1, "", "_static_trunc"], [31, 0, 1, "", "_static_trunc_divide"], [31, 0, 1, "", "abs"], [31, 0, 1, "", "acos"], [31, 0, 1, "", "acosh"], [31, 0, 1, "", "add"], [31, 0, 1, "", "angle"], [31, 0, 1, "", "asin"], [31, 0, 1, "", "asinh"], [31, 0, 1, "", "atan"], [31, 0, 1, "", "atan2"], [31, 0, 1, "", "atanh"], [31, 0, 1, "", "bitwise_and"], [31, 0, 1, "", "bitwise_invert"], [31, 0, 1, "", "bitwise_left_shift"], [31, 0, 1, "", "bitwise_or"], [31, 0, 1, "", "bitwise_right_shift"], [31, 0, 1, "", "bitwise_xor"], [31, 0, 1, "", "ceil"], [31, 0, 1, "", "cos"], [31, 0, 1, "", "cosh"], [31, 0, 1, "", "deg2rad"], [31, 0, 1, "", "divide"], [31, 0, 1, "", "equal"], [31, 0, 1, "", "erf"], [31, 0, 1, "", "exp"], [31, 0, 1, "", "exp2"], [31, 0, 1, "", "expm1"], [31, 0, 1, "", "floor"], [31, 0, 1, "", "floor_divide"], [31, 0, 1, "", "fmin"], [31, 0, 1, "", "gcd"], [31, 0, 1, "", "greater"], [31, 0, 1, "", "greater_equal"], [31, 0, 1, "", "imag"], [31, 0, 1, "", "isfinite"], [31, 0, 1, "", "isinf"], [31, 0, 1, "", "isnan"], [31, 0, 1, "", "isreal"], [31, 0, 1, "", "lcm"], [31, 0, 1, "", "less"], [31, 0, 1, "", "less_equal"], [31, 0, 1, "", "log"], [31, 0, 1, "", "log10"], [31, 0, 1, "", "log1p"], [31, 0, 1, "", "log2"], [31, 0, 1, "", "logaddexp"], [31, 0, 1, "", "logaddexp2"], [31, 0, 1, "", "logical_and"], [31, 0, 1, "", "logical_not"], [31, 0, 1, "", "logical_or"], [31, 0, 1, "", "logical_xor"], [31, 0, 1, "", "maximum"], [31, 0, 1, "", "minimum"], [31, 0, 1, "", "multiply"], [31, 0, 1, "", "nan_to_num"], [31, 0, 1, "", "negative"], [31, 0, 1, "", "not_equal"], [31, 0, 1, "", "positive"], [31, 0, 1, "", "pow"], [31, 0, 1, "", "rad2deg"], [31, 0, 1, "", "real"], [31, 0, 1, "", "reciprocal"], [31, 0, 1, "", "remainder"], [31, 0, 1, "", "round"], [31, 0, 1, "", "sign"], [31, 0, 1, "", "sin"], [31, 0, 1, "", "sinh"], [31, 0, 1, "", "sqrt"], [31, 0, 1, "", "square"], [31, 0, 1, "", "static_angle"], [31, 0, 1, "", "static_exp2"], [31, 0, 1, "", "static_fmin"], [31, 0, 1, "", "static_gcd"], [31, 0, 1, "", "static_imag"], [31, 0, 1, "", "static_logaddexp2"], [31, 0, 1, "", "static_nan_to_num"], [31, 0, 1, "", "static_real"], [31, 0, 1, "", "subtract"], [31, 0, 1, "", "tan"], [31, 0, 1, "", "tanh"], [31, 0, 1, "", "trapz"], [31, 0, 1, "", "trunc"], [31, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[32, 3, 0, "-", "activations"], [32, 3, 0, "-", "conversions"], [32, 3, 0, "-", "creation"], [32, 3, 0, "-", "data_type"], [32, 3, 0, "-", "device"], [32, 3, 0, "-", "elementwise"], [32, 3, 0, "-", "general"], [32, 3, 0, "-", "gradients"], [32, 3, 0, "-", "image"], [32, 3, 0, "-", "layers"], [32, 3, 0, "-", "linear_algebra"], [32, 3, 0, "-", "losses"], [32, 3, 0, "-", "manipulation"], [32, 3, 0, "-", "norms"], [32, 3, 0, "-", "random"], [32, 3, 0, "-", "searching"], [32, 3, 0, "-", "set"], [32, 3, 0, "-", "sorting"], [32, 3, 0, "-", "statistical"], [32, 3, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[32, 1, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_elu"], [32, 0, 1, "", "_static_silu"], [32, 0, 1, "", "elu"], [32, 0, 1, "", "logit"], [32, 0, 1, "", "logsigmoid"], [32, 0, 1, "", "prelu"], [32, 0, 1, "", "relu6"], [32, 0, 1, "", "selu"], [32, 0, 1, "", "silu"], [32, 0, 1, "", "static_logit"], [32, 0, 1, "", "static_logsigmoid"], [32, 0, 1, "", "static_prelu"], [32, 0, 1, "", "static_relu6"], [32, 0, 1, "", "static_selu"], [32, 0, 1, "", "static_thresholded_relu"], [32, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[32, 1, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[32, 1, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "eye_like"], [32, 0, 1, "", "hamming_window"], [32, 0, 1, "", "hann_window"], [32, 0, 1, "", "kaiser_bessel_derived_window"], [32, 0, 1, "", "kaiser_window"], [32, 0, 1, "", "static_eye_like"], [32, 0, 1, "", "static_hamming_window"], [32, 0, 1, "", "static_hann_window"], [32, 0, 1, "", "static_kaiser_bessel_derived_window"], [32, 0, 1, "", "static_kaiser_window"], [32, 0, 1, "", "static_tril_indices"], [32, 0, 1, "", "static_unsorted_segment_min"], [32, 0, 1, "", "static_vorbis_window"], [32, 0, 1, "", "tril_indices"], [32, 0, 1, "", "unsorted_segment_min"], [32, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[32, 1, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[32, 1, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[32, 1, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "allclose"], [32, 0, 1, "", "binarizer"], [32, 0, 1, "", "conj"], [32, 0, 1, "", "copysign"], [32, 0, 1, "", "count_nonzero"], [32, 0, 1, "", "diff"], [32, 0, 1, "", "fix"], [32, 0, 1, "", "float_power"], [32, 0, 1, "", "fmax"], [32, 0, 1, "", "fmod"], [32, 0, 1, "", "frexp"], [32, 0, 1, "", "gradient"], [32, 0, 1, "", "hypot"], [32, 0, 1, "", "isclose"], [32, 0, 1, "", "ldexp"], [32, 0, 1, "", "lerp"], [32, 0, 1, "", "modf"], [32, 0, 1, "", "nansum"], [32, 0, 1, "", "nextafter"], [32, 0, 1, "", "signbit"], [32, 0, 1, "", "sinc"], [32, 0, 1, "", "static_allclose"], [32, 0, 1, "", "static_binarizer"], [32, 0, 1, "", "static_conj"], [32, 0, 1, "", "static_copysign"], [32, 0, 1, "", "static_count_nonzero"], [32, 0, 1, "", "static_diff"], [32, 0, 1, "", "static_fix"], [32, 0, 1, "", "static_float_power"], [32, 0, 1, "", "static_fmax"], [32, 0, 1, "", "static_fmod"], [32, 0, 1, "", "static_frexp"], [32, 0, 1, "", "static_gradient"], [32, 0, 1, "", "static_hypot"], [32, 0, 1, "", "static_isclose"], [32, 0, 1, "", "static_ldexp"], [32, 0, 1, "", "static_lerp"], [32, 0, 1, "", "static_modf"], [32, 0, 1, "", "static_nansum"], [32, 0, 1, "", "static_nextafter"], [32, 0, 1, "", "static_signbit"], [32, 0, 1, "", "static_sinc"], [32, 0, 1, "", "static_xlogy"], [32, 0, 1, "", "static_zeta"], [32, 0, 1, "", "xlogy"], [32, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[32, 1, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_reduce"], [32, 0, 1, "", "reduce"]], "ivy.data_classes.container.experimental.gradients": [[32, 1, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[32, 1, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[32, 1, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_fft"], [32, 0, 1, "", "adaptive_avg_pool1d"], [32, 0, 1, "", "adaptive_avg_pool2d"], [32, 0, 1, "", "avg_pool1d"], [32, 0, 1, "", "avg_pool2d"], [32, 0, 1, "", "avg_pool3d"], [32, 0, 1, "", "dct"], [32, 0, 1, "", "dft"], [32, 0, 1, "", "embedding"], [32, 0, 1, "", "fft"], [32, 0, 1, "", "idct"], [32, 0, 1, "", "ifft"], [32, 0, 1, "", "ifftn"], [32, 0, 1, "", "interpolate"], [32, 0, 1, "", "max_pool1d"], [32, 0, 1, "", "max_pool2d"], [32, 0, 1, "", "max_pool3d"], [32, 0, 1, "", "rfftn"], [32, 0, 1, "", "static_adaptive_avg_pool1d"], [32, 0, 1, "", "static_adaptive_avg_pool2d"], [32, 0, 1, "", "static_avg_pool1d"], [32, 0, 1, "", "static_avg_pool2d"], [32, 0, 1, "", "static_avg_pool3d"], [32, 0, 1, "", "static_dct"], [32, 0, 1, "", "static_dft"], [32, 0, 1, "", "static_embedding"], [32, 0, 1, "", "static_idct"], [32, 0, 1, "", "static_ifft"], [32, 0, 1, "", "static_ifftn"], [32, 0, 1, "", "static_interpolate"], [32, 0, 1, "", "static_max_pool1d"], [32, 0, 1, "", "static_max_pool2d"], [32, 0, 1, "", "static_max_pool3d"], [32, 0, 1, "", "static_rfftn"]], "ivy.data_classes.container.experimental.linear_algebra": [[32, 1, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "adjoint"], [32, 0, 1, "", "cond"], [32, 0, 1, "", "diagflat"], [32, 0, 1, "", "eig"], [32, 0, 1, "", "eigh_tridiagonal"], [32, 0, 1, "", "eigvals"], [32, 0, 1, "", "kron"], [32, 0, 1, "", "matrix_exp"], [32, 0, 1, "", "multi_dot"], [32, 0, 1, "", "static_adjoint"], [32, 0, 1, "", "static_cond"], [32, 0, 1, "", "static_diagflat"], [32, 0, 1, "", "static_eig"], [32, 0, 1, "", "static_eigh_tridiagonal"], [32, 0, 1, "", "static_eigvals"], [32, 0, 1, "", "static_kron"], [32, 0, 1, "", "static_matrix_exp"], [32, 0, 1, "", "static_multi_dot"]], "ivy.data_classes.container.experimental.manipulation": [[32, 1, 1, "", "_ContainerWithManipulationExperimental"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_fill_diagonal"], [32, 0, 1, "", "_static_unique_consecutive"], [32, 0, 1, "", "as_strided"], [32, 0, 1, "", "associative_scan"], [32, 0, 1, "", "atleast_1d"], [32, 0, 1, "", "atleast_2d"], [32, 0, 1, "", "atleast_3d"], [32, 0, 1, "", "broadcast_shapes"], [32, 0, 1, "", "concat_from_sequence"], [32, 0, 1, "", "dsplit"], [32, 0, 1, "", "dstack"], [32, 0, 1, "", "expand"], [32, 0, 1, "", "fill_diagonal"], [32, 0, 1, "", "flatten"], [32, 0, 1, "", "fliplr"], [32, 0, 1, "", "flipud"], [32, 0, 1, "", "heaviside"], [32, 0, 1, "", "hsplit"], [32, 0, 1, "", "hstack"], [32, 0, 1, "", "i0"], [32, 0, 1, "", "moveaxis"], [32, 0, 1, "", "pad"], [32, 0, 1, "", "rot90"], [32, 0, 1, "", "static_as_strided"], [32, 0, 1, "", "static_atleast_1d"], [32, 0, 1, "", "static_atleast_2d"], [32, 0, 1, "", "static_atleast_3d"], [32, 0, 1, "", "static_broadcast_shapes"], [32, 0, 1, "", "static_concat_from_sequence"], [32, 0, 1, "", "static_dsplit"], [32, 0, 1, "", "static_dstack"], [32, 0, 1, "", "static_expand"], [32, 0, 1, "", "static_flatten"], [32, 0, 1, "", "static_fliplr"], [32, 0, 1, "", "static_flipud"], [32, 0, 1, "", "static_heaviside"], [32, 0, 1, "", "static_hsplit"], [32, 0, 1, "", "static_hstack"], [32, 0, 1, "", "static_i0"], [32, 0, 1, "", "static_moveaxis"], [32, 0, 1, "", "static_pad"], [32, 0, 1, "", "static_rot90"], [32, 0, 1, "", "static_take_along_axis"], [32, 0, 1, "", "static_top_k"], [32, 0, 1, "", "static_vsplit"], [32, 0, 1, "", "static_vstack"], [32, 0, 1, "", "take_along_axis"], [32, 0, 1, "", "top_k"], [32, 0, 1, "", "unique_consecutive"], [32, 0, 1, "", "vsplit"], [32, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[32, 1, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "batch_norm"], [32, 0, 1, "", "group_norm"], [32, 0, 1, "", "instance_norm"], [32, 0, 1, "", "l1_normalize"], [32, 0, 1, "", "l2_normalize"], [32, 0, 1, "", "lp_normalize"], [32, 0, 1, "", "static_batch_norm"], [32, 0, 1, "", "static_group_norm"], [32, 0, 1, "", "static_instance_norm"], [32, 0, 1, "", "static_l1_normalize"], [32, 0, 1, "", "static_l2_normalize"], [32, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[32, 1, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "bernoulli"], [32, 0, 1, "", "beta"], [32, 0, 1, "", "dirichlet"], [32, 0, 1, "", "gamma"], [32, 0, 1, "", "poisson"], [32, 0, 1, "", "static_bernoulli"], [32, 0, 1, "", "static_beta"], [32, 0, 1, "", "static_dirichlet"], [32, 0, 1, "", "static_gamma"], [32, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[32, 1, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "static_unravel_index"], [32, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[32, 1, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[32, 1, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "invert_permutation"], [32, 0, 1, "", "lexsort"], [32, 0, 1, "", "static_invert_permutation"], [32, 0, 1, "", "static_lexsort"]], "ivy.data_classes.container.experimental.statistical": [[32, 1, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[32, 4, 1, "", "_abc_impl"], [32, 0, 1, "", "_static_cummax"], [32, 0, 1, "", "_static_cummin"], [32, 0, 1, "", "bincount"], [32, 0, 1, "", "corrcoef"], [32, 0, 1, "", "cov"], [32, 0, 1, "", "cummax"], [32, 0, 1, "", "cummin"], [32, 0, 1, "", "histogram"], [32, 0, 1, "", "igamma"], [32, 0, 1, "", "median"], [32, 0, 1, "", "nanmean"], [32, 0, 1, "", "nanmedian"], [32, 0, 1, "", "quantile"], [32, 0, 1, "", "static_bincount"], [32, 0, 1, "", "static_corrcoef"], [32, 0, 1, "", "static_cov"], [32, 0, 1, "", "static_histogram"], [32, 0, 1, "", "static_igamma"], [32, 0, 1, "", "static_median"], [32, 0, 1, "", "static_nanmean"], [32, 0, 1, "", "static_nanmedian"], [32, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[32, 1, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[32, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.general": [[33, 1, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[33, 4, 1, "", "_abc_impl"], [33, 0, 1, "", "_static_all_equal"], [33, 0, 1, "", "_static_array_equal"], [33, 0, 1, "", "_static_assert_supports_inplace"], [33, 0, 1, "", "_static_clip_matrix_norm"], [33, 0, 1, "", "_static_clip_vector_norm"], [33, 0, 1, "", "_static_einops_rearrange"], [33, 0, 1, "", "_static_einops_reduce"], [33, 0, 1, "", "_static_einops_repeat"], [33, 0, 1, "", "_static_fourier_encode"], [33, 0, 1, "", "_static_gather"], [33, 0, 1, "", "_static_gather_nd"], [33, 0, 1, "", "_static_get_num_dims"], [33, 0, 1, "", "_static_has_nans"], [33, 0, 1, "", "_static_inplace_decrement"], [33, 0, 1, "", "_static_inplace_increment"], [33, 0, 1, "", "_static_inplace_update"], [33, 0, 1, "", "_static_is_array"], [33, 0, 1, "", "_static_is_ivy_array"], [33, 0, 1, "", "_static_is_native_array"], [33, 0, 1, "", "_static_scatter_flat"], [33, 0, 1, "", "_static_scatter_nd"], [33, 0, 1, "", "_static_stable_divide"], [33, 0, 1, "", "_static_stable_pow"], [33, 0, 1, "", "_static_supports_inplace_updates"], [33, 0, 1, "", "_static_to_list"], [33, 0, 1, "", "_static_to_numpy"], [33, 0, 1, "", "_static_to_scalar"], [33, 0, 1, "", "_static_value_is_nan"], [33, 0, 1, "", "all_equal"], [33, 0, 1, "", "array_equal"], [33, 0, 1, "", "assert_supports_inplace"], [33, 0, 1, "", "clip_matrix_norm"], [33, 0, 1, "", "clip_vector_norm"], [33, 0, 1, "", "einops_rearrange"], [33, 0, 1, "", "einops_reduce"], [33, 0, 1, "", "einops_repeat"], [33, 0, 1, "", "fourier_encode"], [33, 0, 1, "", "gather"], [33, 0, 1, "", "gather_nd"], [33, 0, 1, "", "get_num_dims"], [33, 0, 1, "", "has_nans"], [33, 0, 1, "", "inplace_decrement"], [33, 0, 1, "", "inplace_increment"], [33, 0, 1, "", "inplace_update"], [33, 0, 1, "", "is_array"], [33, 0, 1, "", "is_ivy_array"], [33, 0, 1, "", "is_native_array"], [33, 0, 1, "", "isin"], [33, 0, 1, "", "itemsize"], [33, 0, 1, "", "scatter_flat"], [33, 0, 1, "", "scatter_nd"], [33, 0, 1, "", "stable_divide"], [33, 0, 1, "", "stable_pow"], [33, 0, 1, "", "static_isin"], [33, 0, 1, "", "static_itemsize"], [33, 0, 1, "", "static_strides"], [33, 0, 1, "", "strides"], [33, 0, 1, "", "supports_inplace_updates"], [33, 0, 1, "", "to_list"], [33, 0, 1, "", "to_numpy"], [33, 0, 1, "", "to_scalar"], [33, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[34, 1, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[34, 4, 1, "", "_abc_impl"], [34, 0, 1, "", "_static_stop_gradient"], [34, 0, 1, "", "adam_step"], [34, 0, 1, "", "adam_update"], [34, 0, 1, "", "gradient_descent_update"], [34, 0, 1, "", "lamb_update"], [34, 0, 1, "", "lars_update"], [34, 0, 1, "", "optimizer_update"], [34, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[35, 1, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[35, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[36, 1, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[36, 4, 1, "", "_abc_impl"], [36, 0, 1, "", "_static_conv1d"], [36, 0, 1, "", "_static_conv1d_transpose"], [36, 0, 1, "", "_static_conv2d"], [36, 0, 1, "", "_static_conv2d_transpose"], [36, 0, 1, "", "_static_conv3d"], [36, 0, 1, "", "_static_conv3d_transpose"], [36, 0, 1, "", "_static_depthwise_conv2d"], [36, 0, 1, "", "_static_dropout"], [36, 0, 1, "", "_static_dropout1d"], [36, 0, 1, "", "_static_dropout2d"], [36, 0, 1, "", "_static_dropout3d"], [36, 0, 1, "", "_static_linear"], [36, 0, 1, "", "_static_lstm_update"], [36, 0, 1, "", "_static_multi_head_attention"], [36, 0, 1, "", "_static_reduce_window"], [36, 0, 1, "", "_static_scaled_dot_product_attention"], [36, 0, 1, "", "conv1d"], [36, 0, 1, "", "conv1d_transpose"], [36, 0, 1, "", "conv2d"], [36, 0, 1, "", "conv2d_transpose"], [36, 0, 1, "", "conv3d"], [36, 0, 1, "", "conv3d_transpose"], [36, 0, 1, "", "depthwise_conv2d"], [36, 0, 1, "", "dropout"], [36, 0, 1, "", "dropout1d"], [36, 0, 1, "", "dropout2d"], [36, 0, 1, "", "dropout3d"], [36, 0, 1, "", "linear"], [36, 0, 1, "", "lstm_update"], [36, 0, 1, "", "multi_head_attention"], [36, 0, 1, "", "reduce_window"], [36, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[37, 1, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[37, 4, 1, "", "_abc_impl"], [37, 0, 1, "", "_static_cholesky"], [37, 0, 1, "", "_static_cross"], [37, 0, 1, "", "_static_det"], [37, 0, 1, "", "_static_diag"], [37, 0, 1, "", "_static_diagonal"], [37, 0, 1, "", "_static_eigh"], [37, 0, 1, "", "_static_eigvalsh"], [37, 0, 1, "", "_static_inner"], [37, 0, 1, "", "_static_inv"], [37, 0, 1, "", "_static_matmul"], [37, 0, 1, "", "_static_matrix_norm"], [37, 0, 1, "", "_static_matrix_power"], [37, 0, 1, "", "_static_matrix_rank"], [37, 0, 1, "", "_static_matrix_transpose"], [37, 0, 1, "", "_static_outer"], [37, 0, 1, "", "_static_pinv"], [37, 0, 1, "", "_static_qr"], [37, 0, 1, "", "_static_slogdet"], [37, 0, 1, "", "_static_solve"], [37, 0, 1, "", "_static_svd"], [37, 0, 1, "", "_static_svdvals"], [37, 0, 1, "", "_static_tensordot"], [37, 0, 1, "", "_static_tensorsolve"], [37, 0, 1, "", "_static_trace"], [37, 0, 1, "", "_static_vander"], [37, 0, 1, "", "_static_vecdot"], [37, 0, 1, "", "_static_vector_norm"], [37, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [37, 0, 1, "", "cholesky"], [37, 0, 1, "", "cross"], [37, 0, 1, "", "det"], [37, 0, 1, "", "diag"], [37, 0, 1, "", "diagonal"], [37, 0, 1, "", "eigh"], [37, 0, 1, "", "eigvalsh"], [37, 0, 1, "", "inner"], [37, 0, 1, "", "inv"], [37, 0, 1, "", "matmul"], [37, 0, 1, "", "matrix_norm"], [37, 0, 1, "", "matrix_power"], [37, 0, 1, "", "matrix_rank"], [37, 0, 1, "", "matrix_transpose"], [37, 0, 1, "", "outer"], [37, 0, 1, "", "pinv"], [37, 0, 1, "", "qr"], [37, 0, 1, "", "slogdet"], [37, 0, 1, "", "solve"], [37, 0, 1, "", "svd"], [37, 0, 1, "", "svdvals"], [37, 0, 1, "", "tensordot"], [37, 0, 1, "", "tensorsolve"], [37, 0, 1, "", "trace"], [37, 0, 1, "", "vander"], [37, 0, 1, "", "vecdot"], [37, 0, 1, "", "vector_norm"], [37, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[38, 1, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[38, 4, 1, "", "_abc_impl"], [38, 0, 1, "", "_static_binary_cross_entropy"], [38, 0, 1, "", "_static_cross_entropy"], [38, 0, 1, "", "_static_sparse_cross_entropy"], [38, 0, 1, "", "binary_cross_entropy"], [38, 0, 1, "", "cross_entropy"], [38, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[39, 1, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[39, 4, 1, "", "_abc_impl"], [39, 0, 1, "", "_static_clip"], [39, 0, 1, "", "_static_concat"], [39, 0, 1, "", "_static_constant_pad"], [39, 0, 1, "", "_static_expand_dims"], [39, 0, 1, "", "_static_flip"], [39, 0, 1, "", "_static_permute_dims"], [39, 0, 1, "", "_static_repeat"], [39, 0, 1, "", "_static_reshape"], [39, 0, 1, "", "_static_roll"], [39, 0, 1, "", "_static_split"], [39, 0, 1, "", "_static_squeeze"], [39, 0, 1, "", "_static_stack"], [39, 0, 1, "", "_static_swapaxes"], [39, 0, 1, "", "_static_tile"], [39, 0, 1, "", "_static_unstack"], [39, 0, 1, "", "_static_zero_pad"], [39, 0, 1, "", "clip"], [39, 0, 1, "", "concat"], [39, 0, 1, "", "constant_pad"], [39, 0, 1, "", "expand_dims"], [39, 0, 1, "", "flip"], [39, 0, 1, "", "permute_dims"], [39, 0, 1, "", "repeat"], [39, 0, 1, "", "reshape"], [39, 0, 1, "", "roll"], [39, 0, 1, "", "split"], [39, 0, 1, "", "squeeze"], [39, 0, 1, "", "stack"], [39, 0, 1, "", "swapaxes"], [39, 0, 1, "", "tile"], [39, 0, 1, "", "unstack"], [39, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[40, 1, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[40, 4, 1, "", "_abc_impl"], [40, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[41, 1, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[41, 4, 1, "", "_abc_impl"], [41, 0, 1, "", "_static_multinomial"], [41, 0, 1, "", "_static_randint"], [41, 0, 1, "", "_static_random_normal"], [41, 0, 1, "", "_static_random_uniform"], [41, 0, 1, "", "_static_shuffle"], [41, 0, 1, "", "multinomial"], [41, 0, 1, "", "randint"], [41, 0, 1, "", "random_normal"], [41, 0, 1, "", "random_uniform"], [41, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[42, 1, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[42, 4, 1, "", "_abc_impl"], [42, 0, 1, "", "_static_argmax"], [42, 0, 1, "", "_static_argmin"], [42, 0, 1, "", "_static_argwhere"], [42, 0, 1, "", "_static_nonzero"], [42, 0, 1, "", "_static_where"], [42, 0, 1, "", "argmax"], [42, 0, 1, "", "argmin"], [42, 0, 1, "", "argwhere"], [42, 0, 1, "", "nonzero"], [42, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[43, 1, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[43, 4, 1, "", "_abc_impl"], [43, 0, 1, "", "_static_unique_all"], [43, 0, 1, "", "_static_unique_counts"], [43, 0, 1, "", "_static_unique_inverse"], [43, 0, 1, "", "_static_unique_values"], [43, 0, 1, "", "unique_all"], [43, 0, 1, "", "unique_counts"], [43, 0, 1, "", "unique_inverse"], [43, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[44, 1, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[44, 4, 1, "", "_abc_impl"], [44, 0, 1, "", "_static_argsort"], [44, 0, 1, "", "_static_searchsorted"], [44, 0, 1, "", "_static_sort"], [44, 0, 1, "", "argsort"], [44, 0, 1, "", "msort"], [44, 0, 1, "", "searchsorted"], [44, 0, 1, "", "sort"], [44, 0, 1, "", "static_msort"]], "ivy.data_classes.container.statistical": [[45, 1, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[45, 4, 1, "", "_abc_impl"], [45, 0, 1, "", "_static_cumprod"], [45, 0, 1, "", "_static_cumsum"], [45, 0, 1, "", "_static_prod"], [45, 0, 1, "", "_static_sum"], [45, 0, 1, "", "_static_var"], [45, 0, 1, "", "cumprod"], [45, 0, 1, "", "cumsum"], [45, 0, 1, "", "einsum"], [45, 0, 1, "", "max"], [45, 0, 1, "", "mean"], [45, 0, 1, "", "min"], [45, 0, 1, "", "prod"], [45, 0, 1, "", "std"], [45, 0, 1, "", "sum"], [45, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[46, 1, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[46, 4, 1, "", "_abc_impl"], [46, 0, 1, "", "_static_all"], [46, 0, 1, "", "_static_any"], [46, 0, 1, "", "all"], [46, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[47, 2, 1, "", "_wrap_function"], [47, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.data_classes.nested_array": [[51, 3, 0, "-", "base"], [52, 3, 0, "-", "elementwise"], [50, 3, 0, "-", "nested_array"]], "ivy.data_classes.nested_array.base": [[51, 1, 1, "", "NestedArrayBase"]], "ivy.data_classes.nested_array.base.NestedArrayBase": [[51, 0, 1, "", "__init__"], [51, 4, 1, "", "_abc_impl"], [51, 5, 1, "", "data"], [51, 5, 1, "", "device"], [51, 5, 1, "", "dtype"], [51, 5, 1, "", "inner_shape"], [51, 5, 1, "", "ndim"], [51, 0, 1, "", "nested_array"], [51, 5, 1, "", "nested_rank"], [51, 0, 1, "", "ragged_map"], [51, 0, 1, "", "ragged_multi_map"], [51, 0, 1, "", "ragged_multi_map_in_function"], [51, 0, 1, "", "replace_ivy_arrays"], [51, 5, 1, "", "shape"], [51, 0, 1, "", "unbind"]], "ivy.data_classes.nested_array.elementwise": [[52, 1, 1, "", "NestedArrayElementwise"]], "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise": [[52, 4, 1, "", "_abc_impl"], [52, 0, 1, "", "static_add"]], "ivy.data_classes.nested_array.nested_array": [[50, 1, 1, "", "NestedArray"]], "ivy.data_classes.nested_array.nested_array.NestedArray": [[50, 0, 1, "", "__init__"], [50, 0, 1, "", "from_row_lengths"], [50, 0, 1, "", "from_row_splits"]], "ivy.functional.ivy": [[493, 3, 0, "-", "activations"], [494, 3, 0, "-", "constants"], [495, 3, 0, "-", "control_flow_ops"], [496, 3, 0, "-", "creation"], [497, 3, 0, "-", "data_type"], [498, 3, 0, "-", "device"], [499, 3, 0, "-", "elementwise"], [500, 3, 0, "-", "experimental"], [501, 3, 0, "-", "general"], [502, 3, 0, "-", "gradients"], [503, 3, 0, "-", "layers"], [504, 3, 0, "-", "linear_algebra"], [505, 3, 0, "-", "losses"], [506, 3, 0, "-", "manipulation"], [507, 3, 0, "-", "meta"], [508, 3, 0, "-", "nest"], [509, 3, 0, "-", "norms"], [510, 3, 0, "-", "random"], [511, 3, 0, "-", "searching"], [512, 3, 0, "-", "set"], [513, 3, 0, "-", "sorting"], [514, 3, 0, "-", "statistical"], [515, 3, 0, "-", "utility"]], "ivy.functional.ivy.experimental": [[286, 3, 0, "-", "activations"], [287, 3, 0, "-", "constants"], [288, 3, 0, "-", "creation"], [289, 3, 0, "-", "data_type"], [290, 3, 0, "-", "device"], [291, 3, 0, "-", "elementwise"], [292, 3, 0, "-", "general"], [293, 3, 0, "-", "gradients"], [294, 3, 0, "-", "layers"], [295, 3, 0, "-", "linear_algebra"], [296, 3, 0, "-", "losses"], [297, 3, 0, "-", "manipulation"], [298, 3, 0, "-", "meta"], [299, 3, 0, "-", "nest"], [300, 3, 0, "-", "norms"], [301, 3, 0, "-", "random"], [302, 3, 0, "-", "searching"], [303, 3, 0, "-", "set"], [304, 3, 0, "-", "sorting"], [305, 3, 0, "-", "sparse_array"], [306, 3, 0, "-", "statistical"], [307, 3, 0, "-", "utility"]], "ivy.stateful": [[652, 3, 0, "-", "activations"], [653, 3, 0, "-", "converters"], [654, 3, 0, "-", "helpers"], [655, 3, 0, "-", "initializers"], [656, 3, 0, "-", "layers"], [657, 3, 0, "-", "module"], [658, 3, 0, "-", "norms"], [659, 3, 0, "-", "optimizers"], [660, 3, 0, "-", "sequential"]], "ivy.stateful.activations": [[652, 1, 1, "", "GEGLU"], [652, 1, 1, "", "GELU"], [652, 1, 1, "", "Hardswish"], [652, 1, 1, "", "LeakyReLU"], [652, 1, 1, "", "LogSoftmax"], [652, 1, 1, "", "Logit"], [652, 1, 1, "", "Mish"], [652, 1, 1, "", "PReLU"], [652, 1, 1, "", "ReLU"], [652, 1, 1, "", "ReLU6"], [652, 1, 1, "", "SeLU"], [652, 1, 1, "", "SiLU"], [652, 1, 1, "", "Sigmoid"], [652, 1, 1, "", "Softmax"], [652, 1, 1, "", "Softplus"], [652, 1, 1, "", "Tanh"]], "ivy.stateful.activations.GEGLU": [[652, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[652, 0, 1, "", "__init__"]], "ivy.stateful.activations.Hardswish": [[652, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[652, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[652, 0, 1, "", "__init__"]], "ivy.stateful.activations.Logit": [[652, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[652, 0, 1, "", "__init__"]], "ivy.stateful.activations.PReLU": [[652, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[652, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU6": [[652, 0, 1, "", "__init__"]], "ivy.stateful.activations.SeLU": [[652, 0, 1, "", "__init__"]], "ivy.stateful.activations.SiLU": [[652, 0, 1, "", "__init__"]], "ivy.stateful.activations.Sigmoid": [[652, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[652, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[652, 0, 1, "", "__init__"]], "ivy.stateful.activations.Tanh": [[652, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[653, 1, 1, "", "ModuleConverters"], [653, 2, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[653, 0, 1, "", "from_flax_module"], [653, 0, 1, "", "from_haiku_module"], [653, 0, 1, "", "from_keras_module"], [653, 0, 1, "", "from_paddle_module"], [653, 0, 1, "", "from_torch_module"]], "ivy.stateful.helpers": [[654, 1, 1, "", "ModuleHelpers"]], "ivy.stateful.helpers.ModuleHelpers": [[654, 0, 1, "", "check_submod_rets"], [654, 0, 1, "", "get_mod_key"], [654, 0, 1, "", "mod_depth"], [654, 0, 1, "", "mod_height"], [654, 0, 1, "", "mod_with_top_mod_key_chain"], [654, 0, 1, "", "show_mod_in_top_mod"], [654, 0, 1, "", "show_structure"], [654, 0, 1, "", "show_v_in_top_v"], [654, 0, 1, "", "sub_mods"], [654, 0, 1, "", "track_submod_call_order"], [654, 0, 1, "", "track_submod_rets"], [654, 0, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.initializers": [[655, 1, 1, "", "Constant"], [655, 1, 1, "", "FirstLayerSiren"], [655, 1, 1, "", "GlorotUniform"], [655, 1, 1, "", "Initializer"], [655, 1, 1, "", "KaimingNormal"], [655, 1, 1, "", "Ones"], [655, 1, 1, "", "RandomNormal"], [655, 1, 1, "", "Siren"], [655, 1, 1, "", "Uniform"], [655, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[655, 0, 1, "", "__init__"], [655, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[655, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[655, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[655, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[655, 0, 1, "", "__init__"], [655, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[655, 0, 1, "", "__init__"]], "ivy.stateful.initializers.RandomNormal": [[655, 0, 1, "", "__init__"], [655, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Siren": [[655, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[655, 0, 1, "", "__init__"], [655, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[655, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[656, 1, 1, "", "AdaptiveAvgPool1d"], [656, 1, 1, "", "AdaptiveAvgPool2d"], [656, 1, 1, "", "AvgPool1D"], [656, 1, 1, "", "AvgPool2D"], [656, 1, 1, "", "AvgPool3D"], [656, 1, 1, "", "Conv1D"], [656, 1, 1, "", "Conv1DTranspose"], [656, 1, 1, "", "Conv2D"], [656, 1, 1, "", "Conv2DTranspose"], [656, 1, 1, "", "Conv3D"], [656, 1, 1, "", "Conv3DTranspose"], [656, 1, 1, "", "Dct"], [656, 1, 1, "", "DepthwiseConv2D"], [656, 1, 1, "", "Dropout"], [656, 1, 1, "", "Embedding"], [656, 1, 1, "", "FFT"], [656, 1, 1, "", "LSTM"], [656, 1, 1, "", "Linear"], [656, 1, 1, "", "MaxPool1D"], [656, 1, 1, "", "MaxPool2D"], [656, 1, 1, "", "MaxPool3D"], [656, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.AdaptiveAvgPool1d": [[656, 0, 1, "", "__init__"]], "ivy.stateful.layers.AdaptiveAvgPool2d": [[656, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool1D": [[656, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool2D": [[656, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool3D": [[656, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1D": [[656, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[656, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[656, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[656, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[656, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[656, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dct": [[656, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[656, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[656, 0, 1, "", "__init__"]], "ivy.stateful.layers.Embedding": [[656, 0, 1, "", "__init__"]], "ivy.stateful.layers.FFT": [[656, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[656, 0, 1, "", "__init__"], [656, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[656, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool1D": [[656, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool2D": [[656, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool3D": [[656, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[656, 0, 1, "", "__init__"]], "ivy.stateful.module": [[657, 1, 1, "", "Module"]], "ivy.stateful.module.Module": [[657, 0, 1, "", "__call__"], [657, 0, 1, "", "__init__"], [657, 0, 1, "", "build"], [657, 5, 1, "", "build_mode"], [657, 5, 1, "", "built_"], [657, 0, 1, "", "compile"], [657, 0, 1, "", "load"], [657, 0, 1, "", "save"], [657, 0, 1, "", "save_weights"], [657, 0, 1, "", "show_graph"]], "ivy.stateful.norms": [[658, 1, 1, "", "BatchNorm2D"], [658, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.BatchNorm2D": [[658, 0, 1, "", "__init__"]], "ivy.stateful.norms.LayerNorm": [[658, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[659, 1, 1, "", "Adam"], [659, 1, 1, "", "LAMB"], [659, 1, 1, "", "LARS"], [659, 1, 1, "", "Optimizer"], [659, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[659, 0, 1, "", "__init__"], [659, 0, 1, "", "set_state"], [659, 5, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[659, 0, 1, "", "__init__"], [659, 0, 1, "", "set_state"], [659, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[659, 0, 1, "", "__init__"], [659, 0, 1, "", "set_state"], [659, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[659, 0, 1, "", "__init__"], [659, 0, 1, "", "set_state"], [659, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[659, 0, 1, "", "__init__"], [659, 0, 1, "", "set_state"], [659, 5, 1, "", "state"]], "ivy.stateful.sequential": [[660, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[660, 0, 1, "", "__init__"]], "ivy.utils": [[661, 3, 0, "-", "assertions"], [662, 3, 0, "-", "backend"], [666, 3, 0, "-", "dynamic_import"], [667, 3, 0, "-", "exceptions"], [668, 3, 0, "-", "inspection"], [669, 3, 0, "-", "logging"], [670, 3, 0, "-", "profiler"], [671, 3, 0, "-", "verbosity"]], "ivy.utils.assertions": [[661, 2, 1, "", "check_all"], [661, 2, 1, "", "check_all_or_any_fn"], [661, 2, 1, "", "check_any"], [661, 2, 1, "", "check_dev_correct_formatting"], [661, 2, 1, "", "check_dimensions"], [661, 2, 1, "", "check_elem_in_list"], [661, 2, 1, "", "check_equal"], [661, 2, 1, "", "check_exists"], [661, 2, 1, "", "check_false"], [661, 2, 1, "", "check_fill_value_and_dtype_are_compatible"], [661, 2, 1, "", "check_gather_input_valid"], [661, 2, 1, "", "check_gather_nd_input_valid"], [661, 2, 1, "", "check_greater"], [661, 2, 1, "", "check_inplace_sizes_valid"], [661, 2, 1, "", "check_isinstance"], [661, 2, 1, "", "check_kernel_padding_size"], [661, 2, 1, "", "check_less"], [661, 2, 1, "", "check_one_way_broadcastable"], [661, 2, 1, "", "check_same_dtype"], [661, 2, 1, "", "check_shape"], [661, 2, 1, "", "check_shapes_broadcastable"], [661, 2, 1, "", "check_true"], [661, 2, 1, "", "check_unsorted_segment_min_valid_params"]], "ivy.utils.backend": [[663, 3, 0, "-", "ast_helpers"], [664, 3, 0, "-", "handler"], [665, 3, 0, "-", "sub_backend_handler"]], "ivy.utils.backend.ast_helpers": [[663, 1, 1, "", "ImportTransformer"], [663, 1, 1, "", "IvyLoader"], [663, 1, 1, "", "IvyPathFinder"]], "ivy.utils.backend.ast_helpers.ImportTransformer": [[663, 0, 1, "", "__init__"], [663, 0, 1, "", "impersonate_import"], [663, 0, 1, "", "visit_Import"], [663, 0, 1, "", "visit_ImportFrom"]], "ivy.utils.backend.ast_helpers.IvyLoader": [[663, 0, 1, "", "__init__"], [663, 0, 1, "", "exec_module"]], "ivy.utils.backend.ast_helpers.IvyPathFinder": [[663, 0, 1, "", "find_spec"]], "ivy.utils.backend.handler": [[664, 1, 1, "", "ContextManager"], [664, 2, 1, "", "choose_random_backend"], [664, 2, 1, "", "convert_from_numpy_to_target_backend"], [664, 2, 1, "", "convert_from_source_backend_to_numpy"], [664, 2, 1, "", "current_backend"], [664, 2, 1, "", "fn_name_from_version_specific_fn_name"], [664, 2, 1, "", "prevent_access_locally"], [664, 2, 1, "", "previous_backend"], [664, 2, 1, "", "set_backend"], [664, 2, 1, "", "set_backend_to_specific_version"], [664, 2, 1, "", "set_jax_backend"], [664, 2, 1, "", "set_mxnet_backend"], [664, 2, 1, "", "set_numpy_backend"], [664, 2, 1, "", "set_paddle_backend"], [664, 2, 1, "", "set_tensorflow_backend"], [664, 2, 1, "", "set_torch_backend"], [664, 2, 1, "", "unset_backend"], [664, 2, 1, "", "with_backend"]], "ivy.utils.backend.handler.ContextManager": [[664, 0, 1, "", "__init__"]], "ivy.utils.backend.sub_backend_handler": [[665, 2, 1, "", "available_sub_backends"], [665, 2, 1, "", "clear_sub_backends"], [665, 2, 1, "", "find_available_sub_backends"], [665, 2, 1, "", "set_sub_backend"], [665, 2, 1, "", "unset_sub_backend"]], "ivy.utils.dynamic_import": [[666, 2, 1, "", "import_module"]], "ivy.utils.exceptions": [[667, 7, 1, "", "IvyAttributeError"], [667, 7, 1, "", "IvyBackendException"], [667, 7, 1, "", "IvyBroadcastShapeError"], [667, 7, 1, "", "IvyDtypePromotionError"], [667, 7, 1, "", "IvyError"], [667, 7, 1, "", "IvyException"], [667, 7, 1, "", "IvyIndexError"], [667, 7, 1, "", "IvyNotImplementedException"], [667, 7, 1, "", "IvyValueError"], [667, 2, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.IvyAttributeError": [[667, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBackendException": [[667, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBroadcastShapeError": [[667, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDtypePromotionError": [[667, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[667, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[667, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyIndexError": [[667, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[667, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyValueError": [[667, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[668, 2, 1, "", "add_array_specs"], [668, 2, 1, "", "fn_array_spec"]], "ivy.utils.logging": [[669, 2, 1, "", "set_logging_mode"], [669, 2, 1, "", "unset_logging_mode"]], "ivy.utils.profiler": [[670, 1, 1, "", "Profiler"]], "ivy.utils.profiler.Profiler": [[670, 0, 1, "", "__init__"], [670, 4, 1, "", "print_stats"], [670, 4, 1, "", "viz"]], "ivy.utils.verbosity": [[671, 2, 1, "", "cprint"]], "ivy_tests.test_ivy.helpers": [[636, 3, 0, "-", "assertions"], [637, 3, 0, "-", "available_frameworks"], [638, 3, 0, "-", "function_testing"], [639, 3, 0, "-", "globals"], [640, 3, 0, "-", "hypothesis_helpers"], [645, 3, 0, "-", "pipeline_helper"], [646, 3, 0, "-", "structs"], [647, 3, 0, "-", "test_parameter_flags"], [648, 3, 0, "-", "testing_helpers"]], "ivy_tests.test_ivy.helpers.assertions": [[636, 2, 1, "", "assert_all_close"], [636, 2, 1, "", "assert_same_type_and_shape"], [636, 2, 1, "", "check_unsupported_device"], [636, 2, 1, "", "check_unsupported_device_and_dtype"], [636, 2, 1, "", "check_unsupported_dtype"], [636, 2, 1, "", "test_unsupported_function"], [636, 2, 1, "", "value_test"]], "ivy_tests.test_ivy.helpers.function_testing": [[638, 2, 1, "", "args_to_container"], [638, 2, 1, "", "args_to_frontend"], [638, 2, 1, "", "arrays_to_frontend"], [638, 2, 1, "", "as_lists"], [638, 2, 1, "", "compiled_if_required"], [638, 2, 1, "", "convtrue"], [638, 2, 1, "", "create_args_kwargs"], [638, 2, 1, "", "flatten"], [638, 2, 1, "", "flatten_and_to_np"], [638, 2, 1, "", "flatten_frontend"], [638, 2, 1, "", "flatten_frontend_to_np"], [638, 2, 1, "", "get_frontend_ret"], [638, 2, 1, "", "get_ret_and_flattened_np_array"], [638, 2, 1, "", "gradient_incompatible_function"], [638, 2, 1, "", "gradient_test"], [638, 2, 1, "", "gradient_unsupported_dtypes"], [638, 2, 1, "", "kwargs_to_args_n_kwargs"], [638, 2, 1, "", "test_frontend_function"], [638, 2, 1, "", "test_frontend_method"], [638, 2, 1, "", "test_function"], [638, 2, 1, "", "test_method"], [638, 2, 1, "", "wrap_frontend_function_args"]], "ivy_tests.test_ivy.helpers.globals": [[639, 6, 1, "", "CURRENT_FRONTEND_CONFIG"], [639, 7, 1, "", "InterruptedTest"], [639, 1, 1, "", "TestData"], [639, 2, 1, "", "setup_api_test"], [639, 2, 1, "", "setup_frontend_test"], [639, 2, 1, "", "teardown_api_test"], [639, 2, 1, "", "teardown_frontend_test"]], "ivy_tests.test_ivy.helpers.globals.InterruptedTest": [[639, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.globals.TestData": [[639, 0, 1, "", "__init__"], [639, 4, 1, "", "fn_name"], [639, 4, 1, "", "fn_tree"], [639, 4, 1, "", "is_method"], [639, 4, 1, "", "supported_device_dtypes"], [639, 4, 1, "", "test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[641, 3, 0, "-", "array_helpers"], [642, 3, 0, "-", "dtype_helpers"], [643, 3, 0, "-", "general_helpers"], [644, 3, 0, "-", "number_helpers"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[641, 2, 1, "", "array_and_broadcastable_shape"], [641, 2, 1, "", "array_bools"], [641, 2, 1, "", "array_indices_axis"], [641, 2, 1, "", "array_indices_put_along_axis"], [641, 2, 1, "", "array_values"], [641, 2, 1, "", "arrays_and_axes"], [641, 2, 1, "", "arrays_for_pooling"], [641, 2, 1, "", "broadcast_shapes"], [641, 2, 1, "", "cond_data_gen_helper"], [641, 2, 1, "", "create_nested_input"], [641, 2, 1, "", "dtype_and_values"], [641, 2, 1, "", "dtype_array_query"], [641, 2, 1, "", "dtype_array_query_val"], [641, 2, 1, "", "dtype_values_axis"], [641, 2, 1, "", "einsum_helper"], [641, 2, 1, "", "get_first_solve_matrix"], [641, 2, 1, "", "get_second_solve_matrix"], [641, 2, 1, "", "list_of_size"], [641, 2, 1, "", "lists"], [641, 2, 1, "", "mutually_broadcastable_shapes"], [641, 2, 1, "", "prod"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[642, 2, 1, "", "array_dtypes"], [642, 2, 1, "", "get_castable_dtype"], [642, 2, 1, "", "get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[643, 2, 1, "", "apply_safety_factor"], [643, 2, 1, "", "embedding_helper"], [643, 2, 1, "", "get_axis"], [643, 2, 1, "", "get_bounds"], [643, 2, 1, "", "get_mean_std"], [643, 2, 1, "", "get_shape"], [643, 2, 1, "", "matrix_is_stable"], [643, 2, 1, "", "reshape_shapes"], [643, 2, 1, "", "subsets"], [643, 2, 1, "", "x_and_filters"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[644, 2, 1, "", "floats"], [644, 2, 1, "", "ints"], [644, 2, 1, "", "number"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[645, 1, 1, "", "WithBackendContext"], [645, 2, 1, "", "get_frontend_config"], [645, 4, 1, "", "update_backend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext": [[645, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.structs": [[646, 1, 1, "", "FrontendMethodData"]], "ivy_tests.test_ivy.helpers.structs.FrontendMethodData": [[646, 0, 1, "", "__init__"], [646, 4, 1, "", "framework_init_module"], [646, 4, 1, "", "init_name"], [646, 4, 1, "", "ivy_init_module"], [646, 4, 1, "", "method_name"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[647, 1, 1, "", "FrontendFunctionTestFlags"], [647, 1, 1, "", "FrontendMethodTestFlags"], [647, 1, 1, "", "FunctionTestFlags"], [647, 1, 1, "", "InitMethodTestFlags"], [647, 1, 1, "", "MethodTestFlags"], [647, 1, 1, "", "TestFlags"], [647, 2, 1, "", "build_flag"], [647, 2, 1, "", "frontend_function_flags"], [647, 2, 1, "", "frontend_method_flags"], [647, 2, 1, "", "function_flags"], [647, 2, 1, "", "init_method_flags"], [647, 2, 1, "", "method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags": [[647, 0, 1, "", "__init__"], [647, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags": [[647, 0, 1, "", "__init__"], [647, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags": [[647, 0, 1, "", "__init__"], [647, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags": [[647, 0, 1, "", "__init__"], [647, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags": [[647, 0, 1, "", "__init__"], [647, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags": [[647, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[648, 2, 1, "", "handle_frontend_method"], [648, 2, 1, "", "handle_frontend_test"], [648, 2, 1, "", "handle_method"], [648, 2, 1, "", "handle_test"], [648, 2, 1, "", "num_positional_args"], [648, 2, 1, "", "num_positional_args_method"], [648, 2, 1, "", "seed"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:function", "3": "py:module", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"graph": [0, 709, 714, 725, 730], "compil": [0, 709, 714, 722, 727, 729, 730], "api": [0, 1, 2, 675, 681, 683, 685, 689, 690, 700, 705, 709, 711, 713, 714, 721, 728, 730], "us": [0, 2, 672, 679, 681, 682, 685, 700, 703, 712, 718], "eager": 0, "v": [0, 675, 696, 717], "lazi": 0, "arrai": [0, 48, 50, 70, 305, 641, 675, 685, 686, 690, 697, 711, 721], "cach": 0, "gener": [0, 10, 33, 292, 501, 643, 700, 704, 707], "state": [0, 713, 717], "sharp": [0, 2], "bit": [0, 2], "exampl": [0, 2, 672, 678, 693, 697, 700, 703, 707], "set": [1, 20, 43, 303, 512, 672, 682, 687, 706], "up": [1, 672, 682], "ivi": [1, 2, 672, 678, 681, 683, 686, 688, 690, 693, 695, 700, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 716, 730], "folder": 1, "kei": 1, "issu": [1, 681, 683, 696], "question": 1, "transpil": [2, 672, 714], "function": [2, 54, 638, 681, 689, 691, 692, 695, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 709, 714, 717], "librari": [2, 678, 716], "modul": [2, 657, 691, 692, 713], "unifi": [2, 672, 676, 711, 726, 730], "activ": [3, 25, 286, 493, 652], "convers": [4, 27, 699], "creation": [5, 28, 288, 496], "data": [6, 29, 53, 289, 497, 512, 614, 615, 616, 617, 691, 702, 704, 712, 717], "type": [6, 29, 289, 497, 691, 698, 702, 717], "devic": [7, 30, 290, 498, 692, 697, 702], "elementwis": [8, 31, 52, 291, 499], "experiment": [9, 32, 500, 681, 683], "gradient": [11, 34, 271, 293, 502, 700], "imag": [12, 35, 200, 679, 688], "layer": [13, 36, 294, 503, 656], "linear": [14, 37, 295, 504, 527], "algebra": [14, 37, 295, 504], "loss": [15, 38, 296, 505], "manipul": [16, 39, 297, 506], "norm": [17, 40, 300, 509, 658], "random": [18, 41, 301, 510], "search": [19, 42, 302, 511], "sort": [21, 44, 304, 513, 621], "statist": [22, 45, 306, 514], "util": [23, 46, 307, 515, 650], "wrap": [24, 47, 699], "base": [26, 51], "contain": [49, 683, 689, 712], "nest": [50, 299, 508], "class": [53, 649, 686, 695, 702, 711], "gelu": 55, "hardswish": 56, "leaky_relu": 57, "log_softmax": 58, "mish": 59, "relu": 60, "sigmoid": 61, "softmax": 62, "softplu": 63, "cmp_i": 64, "cmp_isnot": 65, "for_loop": 66, "if_els": 67, "while_loop": 68, "arang": 69, "asarrai": 71, "asarray_handle_nest": 72, "asarray_infer_devic": 73, "asarray_infer_dtyp": 74, "asarray_inputs_to_native_shap": 75, "asarray_to_native_arrays_and_back": 76, "copy_arrai": 77, "empti": 78, "empty_lik": 79, "ey": 80, "from_dlpack": 81, "note": [81, 496], "frombuff": 82, "full": [83, 703], "full_lik": 84, "linspac": 85, "logspac": 86, "meshgrid": 87, "native_arrai": 88, "one_hot": 89, "ones": 90, "ones_lik": 91, "tril": 92, "triu": 93, "triu_indic": 94, "zero": 95, "zeros_lik": 96, "as_ivy_dtyp": 97, "as_native_dtyp": 98, "astyp": 99, "broadcast_arrai": 100, "broadcast_to": 101, "can_cast": 102, "check_float": 103, "closest_valid_dtyp": 104, "default_complex_dtyp": 105, "default_dtyp": 106, "default_float_dtyp": 107, "default_int_dtyp": 108, "default_uint_dtyp": 109, "dtype": [110, 642, 697], "dtype_bit": 111, "finfo": 112, "function_supported_dtyp": 113, "function_unsupported_dtyp": 114, "iinfo": 115, "infer_default_dtyp": 116, "invalid_dtyp": 117, "is_bool_dtyp": 118, "is_complex_dtyp": 119, "is_float_dtyp": 120, "is_hashable_dtyp": 121, "is_int_dtyp": 122, "is_native_dtyp": 123, "is_uint_dtyp": 124, "promote_typ": 125, "promote_types_of_input": 126, "result_typ": 127, "set_default_complex_dtyp": 128, "set_default_dtyp": 129, "set_default_float_dtyp": 130, "set_default_int_dtyp": 131, "set_default_uint_dtyp": 132, "type_promote_arrai": 133, "unset_default_complex_dtyp": 134, "unset_default_dtyp": 135, "unset_default_float_dtyp": 136, "unset_default_int_dtyp": 137, "unset_default_uint_dtyp": 138, "valid_dtyp": 139, "as_ivy_dev": 140, "as_native_dev": 141, "clear_cached_mem_on_dev": 142, "default_devic": 143, "dev": 144, "dev_util": 145, "function_supported_devic": 146, "function_unsupported_devic": 147, "get_all_ivy_arrays_on_dev": 148, "gpu_is_avail": 149, "handle_soft_device_vari": 150, "num_cpu_cor": 151, "num_gpu": 152, "num_ivy_arrays_on_dev": 153, "percent_used_mem_on_dev": 154, "print_all_ivy_arrays_on_dev": 155, "set_default_devic": 156, "set_soft_device_mod": 157, "paramet": [157, 448, 449, 453, 454, 456, 457, 498, 501, 647, 706], "set_split_factor": 158, "split_factor": 159, "split_func_cal": 160, "to_devic": 161, "total_mem_on_dev": 162, "tpu_is_avail": 163, "unset_default_devic": 164, "unset_soft_device_mod": 165, "used_mem_on_dev": 166, "ab": 167, "aco": 168, "acosh": 169, "add": [170, 693, 703, 730], "angl": 171, "asin": 172, "asinh": 173, "atan": 174, "atan2": 175, "atanh": 176, "bitwise_and": 177, "bitwise_invert": 178, "bitwise_left_shift": 179, "bitwise_or": 180, "bitwise_right_shift": 181, "bitwise_xor": 182, "ceil": 183, "co": 184, "cosh": 185, "deg2rad": 186, "divid": 187, "equal": 188, "erf": 189, "exp": 190, "exp2": 191, "expm1": 192, "floor": 193, "floor_divid": 194, "fmin": 195, "fmod": 196, "gcd": 197, "greater": 198, "greater_equ": 199, "isfinit": 201, "isinf": 202, "isnan": 203, "isreal": 204, "lcm": 205, "less": 206, "less_equ": 207, "log": [208, 669, 682], "log10": 209, "log1p": 210, "log2": 211, "logaddexp": 212, "logaddexp2": 213, "logical_and": 214, "logical_not": 215, "logical_or": 216, "logical_xor": 217, "maximum": 218, "minimum": 219, "multipli": 220, "nan_to_num": 221, "neg": 222, "not_equ": 223, "posit": [224, 697], "pow": 225, "rad2deg": 226, "real": 227, "reciproc": 228, "remaind": 229, "round": 230, "sign": 231, "sin": 232, "sinh": 233, "sqrt": 234, "squar": 235, "subtract": 236, "tan": [237, 693, 703], "tanh": 238, "trapz": 239, "trunc": 240, "trunc_divid": 241, "elu": 242, "logit": 243, "logsigmoid": 244, "prelu": 245, "relu6": 246, "selu": 247, "silu": 248, "thresholded_relu": 249, "eye_lik": 250, "hamming_window": 251, "hann_window": 252, "indic": 253, "kaiser_bessel_derived_window": 254, "kaiser_window": 255, "ndenumer": 256, "ndindex": 257, "tril_indic": 258, "unsorted_segment_min": 259, "vorbis_window": 260, "allclos": 261, "binar": 262, "conj": 263, "copysign": 264, "count_nonzero": 265, "diff": 266, "fix": 267, "float_pow": 268, "fmax": 269, "frexp": 270, "hypot": 272, "isclos": 273, "ldexp": 274, "lerp": 275, "lgamma": 276, "modf": 277, "nansum": 278, "nextaft": 279, "signbit": 280, "sinc": 281, "xlogi": 282, "zeta": 283, "reduc": 284, "bind_custom_gradient_funct": 285, "constant": [287, 494], "meta": [298, 507], "spars": 305, "adaptive_avg_pool1d": 308, "adaptive_avg_pool2d": 309, "area_interpol": 310, "avg_pool1d": 311, "avg_pool2d": 312, "avg_pool3d": 313, "dct": 314, "dft": 315, "dropout1d": 316, "dropout2d": 317, "dropout3d": 318, "embed": 319, "fft": 320, "fft2": 321, "generate_einsum_equ": 322, "get_interpolate_kernel": 323, "idct": 324, "ifft": 325, "ifftn": 326, "interp": 327, "interpol": 328, "max_pool1d": 329, "max_pool2d": 330, "max_pool3d": 331, "max_unpool1d": 332, "nearest_interpol": 333, "pool": 334, "reduce_window": 335, "rfftn": 336, "adjoint": 337, "cond": 338, "diagflat": 339, "eig": [340, 536], "eigh_tridiagon": 341, "eigval": 342, "kron": 343, "matrix_exp": 344, "multi_dot": 345, "log_poisson_loss": 346, "as_strid": 347, "associative_scan": 348, "atleast_1d": 349, "atleast_2d": 350, "atleast_3d": 351, "broadcast_shap": 352, "concat_from_sequ": 353, "dsplit": 354, "dstack": 355, "expand": 356, "fill_diagon": 357, "flatten": 358, "fliplr": 359, "flipud": 360, "heavisid": 361, "hsplit": 362, "hstack": 363, "i0": 364, "moveaxi": 365, "pad": 366, "put_along_axi": 367, "rot90": 368, "take_along_axi": 369, "top_k": 370, "unique_consecut": 371, "vsplit": 372, "vstack": 373, "batch_norm": 374, "group_norm": 375, "instance_norm": 376, "l1_normal": 377, "l2_normal": 378, "lp_normal": 379, "bernoulli": 380, "beta": 381, "dirichlet": 382, "gamma": 383, "poisson": 384, "unravel_index": 385, "invert_permut": 386, "lexsort": 387, "is_ivy_sparse_arrai": 388, "is_native_sparse_arrai": 389, "native_sparse_arrai": 390, "native_sparse_array_to_indices_values_and_shap": 391, "bincount": 392, "corrcoef": 393, "cov": 394, "cummax": 395, "cummin": 396, "histogram": 397, "igamma": 398, "median": 399, "nanmean": 400, "nanmedian": 401, "nanquantil": 402, "quantil": 403, "all_equ": 404, "arg_info": 405, "arg_nam": 406, "array_equ": 407, "assert_supports_inplac": 408, "cache_fn": 409, "clip_matrix_norm": 410, "clip_vector_norm": 411, "container_typ": 412, "current_backend_str": 413, "default": 414, "einops_rearrang": 415, "einops_reduc": 416, "einops_repeat": 417, "exist": [418, 679], "fourier_encod": 419, "function_supported_devices_and_dtyp": 420, "function_unsupported_devices_and_dtyp": 421, "gather": 422, "gather_nd": 423, "get_all_arrays_in_memori": 424, "get_item": 425, "get_num_dim": 426, "get_referrers_recurs": 427, "has_nan": 428, "inplace_arrays_support": 429, "inplace_decr": 430, "inplace_incr": 431, "inplace_upd": 432, "inplace_variables_support": 433, "is_arrai": 434, "is_ivy_arrai": 435, "is_ivy_contain": 436, "is_ivy_nested_arrai": 437, "is_native_arrai": 438, "isin": 439, "isscalar": 440, "items": 441, "match_kwarg": 442, "multiprocess": 443, "num_arrays_in_memori": 444, "print_all_arrays_in_memori": 445, "scatter_flat": 446, "scatter_nd": 447, "set_array_mod": 448, "set_exception_trace_mod": 449, "set_item": 450, "set_min_bas": 451, "set_min_denomin": 452, "set_nestable_mod": 453, "set_precise_mod": 454, "set_queue_timeout": 455, "set_shape_array_mod": 456, "set_show_func_wrapper_trace_mod": 457, "set_tmp_dir": 458, "shape": [459, 512, 614, 615, 616, 617, 699, 717], "stable_divid": 460, "stable_pow": 461, "stride": 462, "supports_inplace_upd": 463, "to_ivy_shap": 464, "to_list": 465, "to_native_shap": 466, "to_numpi": 467, "to_scalar": 468, "try_else_non": 469, "unset_array_mod": 470, "unset_exception_trace_mod": 471, "unset_min_bas": 472, "unset_min_denomin": 473, "unset_nestable_mod": 474, "unset_precise_mod": 475, "unset_queue_timeout": 476, "unset_shape_array_mod": 477, "unset_show_func_wrapper_trace_mod": 478, "unset_tmp_dir": 479, "value_is_nan": 480, "vmap": 481, "adam_step": 482, "adam_upd": 483, "execute_with_gradi": [484, 700], "grad": 485, "gradient_descent_upd": 486, "jac": 487, "lamb_upd": 488, "lars_upd": 489, "optimizer_upd": 490, "stop_gradi": 491, "value_and_grad": 492, "control": [495, 717], "flow": [495, 717], "op": 495, "depend": [512, 614, 615, 616, 617], "output": [512, 614, 615, 616, 617], "conv": 516, "conv1d": 517, "conv1d_transpos": 518, "conv2d": 519, "conv2d_transpos": 520, "conv3d": 521, "conv3d_transpos": 522, "conv_general_dil": 523, "conv_general_transpos": 524, "depthwise_conv2d": 525, "dropout": 526, "lstm_updat": 528, "multi_head_attent": 529, "scaled_dot_product_attent": 530, "choleski": 531, "cross": 532, "det": 533, "diag": 534, "diagon": 535, "eigh": 537, "eigvalsh": 538, "inner": 539, "inv": 540, "lu_factor": 541, "matmul": 542, "matrix_norm": 543, "matrix_pow": 544, "matrix_rank": 545, "matrix_transpos": 546, "outer": 547, "pinv": 548, "qr": 549, "slogdet": 550, "solv": 551, "svd": 552, "svdval": 553, "tensordot": 554, "tensorsolv": 555, "trace": [556, 695], "vander": 557, "vecdot": 558, "vector_norm": 559, "vector_to_skew_symmetric_matrix": 560, "binary_cross_entropi": 561, "cross_entropi": 562, "sparse_cross_entropi": 563, "clip": 564, "concat": 565, "constant_pad": 566, "expand_dim": 567, "flip": 568, "permute_dim": 569, "repeat": 570, "reshap": 571, "roll": [572, 693], "split": 573, "squeez": 574, "stack": [575, 695], "swapax": 576, "tile": 577, "unstack": 578, "zero_pad": 579, "fomaml_step": 580, "maml_step": 581, "reptile_step": 582, "all_nested_indic": 583, "copy_nest": 584, "duplicate_array_index_chain": 585, "index_nest": 586, "insert_into_nest_at_index": 587, "insert_into_nest_at_indic": 588, "map": [589, 690], "map_nest_at_index": 590, "map_nest_at_indic": 591, "multi_index_nest": 592, "nested_ani": 593, "nested_argwher": 594, "nested_map": 595, "nested_multi_map": 596, "prune_empti": 597, "prune_nest_at_index": 598, "prune_nest_at_indic": 599, "set_nest_at_index": 600, "set_nest_at_indic": 601, "layer_norm": 602, "multinomi": 603, "randint": 604, "random_norm": 605, "random_uniform": 606, "seed": 607, "shuffl": 608, "argmax": 609, "argmin": 610, "argwher": 611, "nonzero": 612, "where": [613, 681], "unique_al": 614, "unique_count": 615, "unique_invers": 616, "unique_valu": 617, "argsort": 618, "msort": 619, "searchsort": 620, "cumprod": 622, "cumsum": 623, "einsum": 624, "max": 625, "mean": 626, "min": 627, "prod": 628, "std": 629, "sum": 630, "var": 631, "all": 632, "ani": 633, "load": [634, 712], "save": [635, 712], "assert": [636, 661, 695], "avail": 637, "framework": [637, 649, 672, 700, 703, 710, 724, 727, 730, 731], "test": [638, 647, 648, 651, 682, 683, 685, 690, 703, 704], "global": [639, 706], "hypothesi": [640, 682, 703, 704], "helper": [640, 641, 642, 643, 644, 645, 648, 654, 663, 703, 704, 705], "number": [644, 697], "pipelin": [645, 688, 690, 704, 717], "struct": 646, "flag": 647, "convert": [653, 714], "initi": [655, 713], "optim": [659, 713], "sequenti": 660, "backend": [662, 665, 681, 687, 691, 700, 705, 709, 717], "ast": 663, "handler": [664, 665, 709], "sub": 665, "dynam": [666, 717], "import": 666, "except": [667, 695, 699], "inspect": 668, "profil": 670, "verbos": 671, "statu": 672, "ai": 672, "when": 672, "should": 672, "i": [672, 688, 707], "instal": [672, 718], "pip": [672, 718], "docker": [672, 679, 682, 683, 688, 718], "from": [672, 718], "sourc": [672, 718], "document": 672, "contribut": [672, 677], "commun": 672, "citat": 672, "background": 673, "ml": [674, 726, 730], "explos": 674, "standard": [675, 707, 721, 730], "skeptic": 675, "complimentari": 675, "competit": 675, "do": [675, 704], "work": [675, 720], "The": [675, 683, 688, 700, 702, 711, 717], "why": [676, 704], "No": [676, 682], "more": [676, 682, 707], "re": [676, 704], "implement": [676, 690, 700, 702], "infinit": 676, "shelf": 676, "life": 676, "appli": [678, 716], "introduct": [678, 702, 703], "robot": [678, 716], "build": [679, 688, 709], "doc": [679, 688], "conveni": [679, 688, 698], "script": [679, 688], "hub": 679, "local": [679, 683, 696], "without": [679, 703], "help": [680, 683], "resourc": 680, "open": 681, "task": 681, "format": [681, 696, 723, 730], "checklist": 681, "frontend": [681, 687, 702, 703, 714], "place": 681, "creat": 681, "an": [681, 700], "": [681, 688], "github": [681, 682], "templat": 681, "fork": [682, 683], "clone": [682, 690], "repo": 682, "pre": [682, 696], "commit": [682, 683, 690, 696], "pycharm": [682, 683, 696], "virtual": 682, "environ": 682, "miniconda": 682, "venv": 682, "interpret": 682, "window": 682, "maco": 682, "ubuntu": 682, "detail": 682, "free": 682, "wsl": 682, "codespac": 682, "basic": [683, 702], "get": [683, 718], "todo": 683, "list": 683, "manag": 683, "your": [683, 704], "who": 683, "To": 683, "ask": 683, "With": 683, "command": 683, "line": 683, "browser": 683, "pull": [683, 690], "request": [683, 690], "small": 683, "often": 683, "interact": 683, "run": [683, 685, 688, 704], "most": 683, "out": [683, 697, 699, 701], "id": [683, 685], "deep": 684, "dive": 684, "termin": 685, "regener": 685, "failur": 685, "skip": 685, "nativ": [686, 707], "handl": [686, 695, 699, 717], "integr": [686, 690, 696, 704], "custom": [686, 688, 700, 712, 717], "version": [687, 705, 717], "support": [687, 691, 699, 702, 717], "how": [688, 704], "builder": 688, "being": 688, "option": 688, "structur": [688, 700, 717], "index": 688, "rst": 688, "partial_conf": 688, "py": 688, "prebuild": 688, "sh": 688, "extens": [688, 715], "custom_autosummari": 688, "hide": 688, "tabl": 688, "discussion_link": 688, "skippable_funct": 688, "ivy_data": 688, "instanc": [689, 702, 703, 711], "method": [689, 702, 703, 711, 712], "static": 689, "special": [689, 702], "nestabl": [689, 697, 698, 699], "continu": [690, 696], "push": 690, "pr": 690, "trigger": 690, "A": [690, 707], "top": 690, "down": 690, "view": [690, 699, 701], "store": 690, "retriev": 690, "repositori": 690, "nitti": 690, "gritti": 690, "storag": 690, "space": 690, "unifyai": 690, "determin": 690, "coverag": 690, "workflow": 690, "multipl": 690, "runner": 690, "race": 690, "condit": 690, "period": 690, "manual": 690, "dispatch": 690, "ci": 690, "dashboard": 690, "promot": [691, 702], "argument": [691, 692, 697, 699, 701, 702], "other": [691, 692], "unsupport": 691, "bug": 691, "cast": [691, 702], "mode": [691, 695, 706], "superset": [691, 707], "docstr": [693, 694], "configur": [695, 703, 712], "func_wrapp": 695, "prune": 695, "handle_except": 695, "decor": [695, 699, 704], "consist": [695, 704], "error": 695, "lint": 696, "check": [696, 717], "setup": 696, "code": [696, 705], "common": 696, "keyword": 697, "input": 697, "oper": [697, 706, 711, 717], "integ": 697, "sequenc": 697, "primari": 698, "composit": 698, "mix": [698, 699, 704], "standalon": 698, "order": 699, "wrapper": [699, 730, 731], "infer": 699, "partial": [699, 704], "miscellan": 699, "overview": 700, "usag": [700, 707], "signatur": 700, "design": [700, 705, 708], "our": 700, "polici": [700, 702], "specif": [700, 728, 729, 730], "consider": 700, "inplac": 701, "updat": 701, "copi": 701, "write": [702, 704], "short": 702, "unus": 702, "rule": 702, "numpi": [702, 724], "duplic": [702, 707], "valu": 703, "alia": 703, "own": 704, "strategi": 704, "we": 704, "need": 704, "effect": 704, "bonu": 704, "extend": [704, 707], "featur": 704, "self": 704, "explicit": 704, "test_array_funct": 704, "fail": 704, "navig": 705, "categor": 705, "submodul": 705, "pin": 705, "properti": 706, "getter": 706, "attribut": 706, "setter": 706, "set_": 706, "unset_": 706, "behaviour": 707, "what": [707, 730], "non": 707, "balanc": 707, "effici": 707, "maxim": 707, "block": 709, "monkei": 711, "patch": 711, "construct": 712, "represent": 712, "recurs": 712, "built": 712, "ins": 712, "access": 712, "comparison": 712, "case": 712, "compartment": 712, "network": [712, 714], "weight": 712, "role": 714, "model": [714, 717], "mechan": 716, "vision": 716, "gym": 716, "memori": 716, "faq": 717, "maintain": 717, "size": 717, "gpu": 717, "deploy": 717, "auto": 717, "differenti": 717, "replica": 717, "parallel": 717, "altern": 717, "start": 718, "glossari": 719, "relat": 720, "infrastructur": [722, 730], "llvm": 722, "mlir": 722, "oneapi": 722, "exchang": [723, 730], "onnx": 723, "nnef": 723, "coreml": 723, "matlab": 724, "scipi": 724, "torch": [724, 725], "scikit": 724, "learn": 724, "theano": 724, "panda": 724, "julia": 724, "apach": [724, 727], "spark": 724, "mllib": 724, "caff": 724, "chainer": 724, "tensorflow": 724, "1": 724, "mxnet": 724, "cntk": 724, "pytorch": 724, "flux": 724, "jax": 724, "2": 724, "dex": 724, "languag": 724, "tracer": [725, 730], "tf": 725, "jaxpr": 725, "jit": 725, "fx": 725, "compani": [726, 730], "quansight": 726, "modular": 726, "octoml": 726, "multi": [727, 730], "vendor": [727, 728, 729, 730], "tvm": 727, "xla": 727, "gcc": 727, "tensorrt": 728, "cuda": 728, "icc": 729, "icx": 729, "nvcc": 729, "doe": 730, "eagerpi": 731, "kera": 731, "thinc": 731, "tensorli": 731, "neuropod": 731}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"ones_like": [[91, "ones-like"]], "check_float": [[103, "check-float"]], "eye": [[80, "eye"]], "one_hot": [[89, "one-hot"]], "empty": [[78, "empty"]], "if_else": [[67, "if-else"]], "while_loop": [[68, "while-loop"]], "logspace": [[86, "logspace"]], "is_bool_dtype": [[118, "is-bool-dtype"]], "zeros_like": [[96, "zeros-like"]], "broadcast_to": [[101, "broadcast-to"]], "astype": [[99, "astype"]], "sigmoid": [[61, "sigmoid"]], "meshgrid": [[87, "meshgrid"]], "arange": [[69, "arange"]], "cmp_isnot": [[65, "cmp-isnot"]], "as_ivy_dtype": [[97, "as-ivy-dtype"]], "iinfo": [[115, "iinfo"]], "empty_like": [[79, "empty-like"]], "copy_array": [[77, "copy-array"]], "softmax": [[62, "softmax"]], "cmp_is": [[64, "cmp-is"]], "for_loop": [[66, "for-loop"]], "array": [[70, "array"]], "default_uint_dtype": [[109, "default-uint-dtype"]], "as_native_dtype": [[98, "as-native-dtype"]], "default_dtype": [[106, "default-dtype"]], "invalid_dtype": [[117, "invalid-dtype"]], "finfo": [[112, "finfo"]], "default_float_dtype": [[107, "default-float-dtype"]], "full": [[83, "full"]], "native_array": [[88, "native-array"]], "broadcast_arrays": [[100, "broadcast-arrays"]], "zeros": [[95, "zeros"]], "triu_indices": [[94, "triu-indices"]], "default_int_dtype": [[108, "default-int-dtype"]], "asarray_handle_nestable": [[72, "asarray-handle-nestable"]], "asarray_infer_dtype": [[74, "asarray-infer-dtype"]], "default_complex_dtype": [[105, "default-complex-dtype"]], "softplus": [[63, "softplus"]], "can_cast": [[102, "can-cast"]], "dtype": [[110, "dtype"]], "relu": [[60, "relu"]], "function_unsupported_dtypes": [[114, "function-unsupported-dtypes"]], "frombuffer": [[82, "frombuffer"]], "from_dlpack": [[81, "from-dlpack"]], "Note": [[81, null], [496, null]], "dtype_bits": [[111, "dtype-bits"]], "triu": [[93, "triu"]], "asarray": [[71, "asarray"]], "closest_valid_dtype": [[104, "closest-valid-dtype"]], "tril": [[92, "tril"]], "asarray_inputs_to_native_shapes": [[75, "asarray-inputs-to-native-shapes"]], "linspace": [[85, "linspace"]], "asarray_infer_device": [[73, "asarray-infer-device"]], "is_complex_dtype": [[119, "is-complex-dtype"]], "infer_default_dtype": [[116, "infer-default-dtype"]], "asarray_to_native_arrays_and_back": [[76, "asarray-to-native-arrays-and-back"]], "full_like": [[84, "full-like"]], "function_supported_dtypes": [[113, "function-supported-dtypes"]], "ones": [[90, "ones"]], "Related Work": [[720, "related-work"]], "Frameworks": [[724, "frameworks"], [730, "frameworks"]], "MATLAB matlab": [[724, "matlab-matlab"]], "SciPy scipy": [[724, "scipy-scipy"]], "Torch torch": [[724, "torch-torch"]], "NumPy numpy": [[724, "numpy-numpy"]], "SciKit Learn scikit-learn": [[724, "scikit-learn-scikit-learn"]], "Theano theano": [[724, "theano-theano"]], "Pandas pandas": [[724, "pandas-pandas"]], "Julia julia": [[724, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[724, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[724, "caffe-caffe"]], "Chainer chainer": [[724, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[724, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[724, "mxnet-mxnet"]], "CNTK cntk": [[724, "cntk-cntk"]], "PyTorch pytorch": [[724, "pytorch-pytorch"]], "Flux flux": [[724, "flux-flux"]], "JAX jax": [[724, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[724, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[724, "dex-language-dex-language"]], "Wrapper Frameworks": [[731, "wrapper-frameworks"], [730, "wrapper-frameworks"]], "EagerPy eagerpy": [[731, "eagerpy-eagerpy"]], "Keras keras": [[731, "keras-keras"]], "Thinc thinc": [[731, "thinc-thinc"]], "TensorLy tensorly": [[731, "tensorly-tensorly"]], "NeuroPod": [[731, "id1"]], "ML-Unifying Companies": [[726, "ml-unifying-companies"], [730, "ml-unifying-companies"]], "Quansight": [[726, "id1"]], "Modular": [[726, "id2"]], "OctoML": [[726, "id3"]], "What does Ivy Add?": [[730, "what-does-ivy-add"]], "API Standards": [[730, "api-standards"], [721, "api-standards"]], "Graph Tracers": [[730, "graph-tracers"], [725, "graph-tracers"]], "Exchange Formats": [[730, "exchange-formats"], [723, "exchange-formats"]], "Compiler Infrastructure": [[730, "compiler-infrastructure"], [722, "compiler-infrastructure"]], "Multi-Vendor Compiler Frameworks": [[730, "multi-vendor-compiler-frameworks"], [727, "multi-vendor-compiler-frameworks"]], "Vendor-Specific APIs": [[730, "vendor-specific-apis"], [728, "vendor-specific-apis"]], "Vendor-Specific Compilers": [[730, "vendor-specific-compilers"], [729, "vendor-specific-compilers"]], "ICC": [[729, "id1"]], "ICX": [[729, "icx"]], "NVCC": [[729, "nvcc"]], "ONNX onnx": [[723, "onnx-onnx"]], "NNEF nnef": [[723, "nnef-nnef"]], "CoreML coreml": [[723, "coreml-coreml"]], "LLVM": [[722, "id1"]], "MLIR": [[722, "id2"]], "OneAPI": [[722, "id3"]], "TensorRT tensorrt": [[728, "tensorrt-tensorrt"]], "CUDA cuda": [[728, "cuda-cuda"]], "Apache TVM": [[727, "apache-tvm"]], "XLA": [[727, "xla"]], "GCC": [[727, "gcc"]], "Array API Standard": [[721, "id1"]], "tf.Graph": [[725, "tf-graph"]], "Jaxpr": [[725, "jaxpr"]], "torch.jit": [[725, "torch-jit"]], "torch.fx": [[725, "torch-fx"]], "Open Tasks": [[681, "open-tasks"]], "Function Formatting": [[681, "function-formatting"]], "Formatting checklist": [[681, "formatting-checklist"]], "Frontend APIs": [[681, "frontend-apis"]], "Where to place a frontend function": [[681, "where-to-place-a-frontend-function"]], "Frontend checklist": [[681, "frontend-checklist"]], "Ivy Experimental API": [[681, "ivy-experimental-api"], [683, "id4"]], "Where to place a backend function": [[681, "where-to-place-a-backend-function"]], "Creating an Issue on Ivy\u2019s GitHub using a Template": [[681, "creating-an-issue-on-ivy-s-github-using-a-template"]], "Exception Handling": [[695, "exception-handling"], [699, "exception-handling"]], "Ivy Exception Class": [[695, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[695, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[695, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[695, "handle-exceptions-decorator"]], "Consistency in Errors": [[695, "consistency-in-errors"]], "Assertion Function": [[695, "assertion-function"]], "Backend": [[662, "backend"]], "Sequential": [[660, "module-ivy.stateful.sequential"]], "Dynamic import": [[666, "module-ivy.utils.dynamic_import"]], "Logging": [[669, "module-ivy.utils.logging"]], "Inplace Updates": [[701, "inplace-updates"]], "out argument": [[701, "out-argument"]], "copy argument": [[701, "copy-argument"]], "Views": [[701, "views"]], "Ivy Frontends": [[702, "ivy-frontends"]], "Introduction": [[702, "introduction"], [703, "introduction"], [678, "introduction"]], "The Frontend Basics": [[702, "the-frontend-basics"]], "Writing Frontend Functions": [[702, "writing-frontend-functions"]], "Short Frontend Implementations": [[702, "short-frontend-implementations"]], "Unused Arguments": [[702, "unused-arguments"]], "Supported Data Types and Devices": [[702, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[702, "id6"]], "Frontend Data Type Promotion Rules": [[702, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[702, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[702, "frontends-duplicate-policy"]], "Superset Behaviour": [[707, "superset-behaviour"]], "Extending the Standard": [[707, "extending-the-standard"]], "What is the Superset?": [[707, "what-is-the-superset"]], "A Non-Duplicate Superset": [[707, "a-non-duplicate-superset"]], "What is not the Superset?": [[707, "what-is-not-the-superset"]], "Balancing Generalization with Efficiency": [[707, "balancing-generalization-with-efficiency"]], "More Examples": [[707, "more-examples"]], "Maximizing Usage of Native Functionality": [[707, "maximizing-usage-of-native-functionality"]], "Docstrings": [[694, "docstrings"]], "The Basics": [[683, "the-basics"]], "Getting Help": [[683, "getting-help"]], "ToDo List Issues": [[683, "todo-list-issues"]], "Managing Your Fork": [[683, "managing-your-fork"]], "Who To Ask": [[683, "who-to-ask"]], "With Command Line:": [[683, "with-command-line"]], "With Browser:": [[683, "with-browser"]], "Pull Requests": [[683, "pull-requests"]], "Small Commits Often": [[683, "small-commits-often"]], "Interactive Ivy Docker Container": [[683, "interactive-ivy-docker-container"]], "Running Tests Locally": [[683, "running-tests-locally"]], "With Docker": [[683, "with-docker"]], "Getting the most out of IDE": [[683, "getting-the-most-out-of-ide"]], "with PyCharm": [[683, "with-pycharm"]], "Devices": [[692, "devices"]], "Device Module": [[692, "device-module"]], "Arguments in other Functions": [[692, "arguments-in-other-functions"], [691, "arguments-in-other-functions"]], "Status": [[672, "status"]], "Unified AI": [[672, "unified-ai"]], "Ivy as a transpiler": [[672, "ivy-as-a-transpiler"]], "When should I use Ivy as a transpiler?": [[672, "when-should-i-use-ivy-as-a-transpiler"]], "Ivy as a framework": [[672, "ivy-as-a-framework"]], "When should I use Ivy as a framework?": [[672, "when-should-i-use-ivy-as-a-framework"]], "Setting up Ivy": [[672, "setting-up-ivy"]], "Installing using pip": [[672, "installing-using-pip"], [718, "installing-using-pip"]], "Docker": [[672, "docker"], [718, "docker"]], "Installing from source": [[672, "installing-from-source"], [718, "installing-from-source"]], "Using Ivy": [[672, "using-ivy"]], "Documentation": [[672, "documentation"]], "Examples": [[672, "examples"], [697, "examples"], [2, "examples"], [0, "examples"]], "Contributing": [[672, "contributing"], [677, "contributing"]], "Community": [[672, "community"]], "Citation": [[672, "citation"]], "Ivy Tests": [[704, "ivy-tests"], [690, "ivy-tests"]], "Testing Pipeline": [[704, "testing-pipeline"]], "Hypothesis": [[704, "id1"]], "Data Generation": [[704, "id2"]], "Writing your own strategy": [[704, "writing-your-own-strategy"]], "Writing Hypothesis Test": [[704, "writing-hypothesis-test"]], "Ivy Test Decorators": [[704, "ivy-test-decorators"]], "Writing Ivy Tests": [[704, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[704, "integration-of-strategies-into-ivy-tests"]], "Why do we need helper functions": [[704, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[704, "how-to-write-hypothesis-tests-effectively"]], "Testing Partial Mixed Functions": [[704, "testing-partial-mixed-functions"]], "Bonus: Hypothesis\u2019 Extended Features": [[704, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[704, "self-consistent-and-explicit-testing"]], "test_array_function": [[704, "id5"]], "Running Ivy Tests": [[704, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[704, "re-running-failed-ivy-tests"]], "Get Started": [[718, "get-started"]], "Deep Dive": [[684, "deep-dive"]], "Navigating the Code": [[705, "navigating-the-code"]], "Categorization": [[705, "categorization"]], "Submodule Design": [[705, "submodule-design"]], "Ivy API": [[705, "ivy-api"]], "Backend API": [[705, "backend-api"]], "Submodule Helper Functions": [[705, "submodule-helper-functions"]], "Version Pinning": [[705, "version-pinning"]], "Containers": [[689, "containers"]], "Container Instance Methods": [[689, "container-instance-methods"]], "Container Static Methods": [[689, "container-static-methods"]], "API Static Methods": [[689, "api-static-methods"]], "API Instance Methods": [[689, "api-instance-methods"]], "API Special Methods": [[689, "api-special-methods"]], "Nestable Functions": [[689, "nestable-functions"], [697, "nestable-functions"], [698, "nestable-functions"]], "Profiler": [[670, "module-ivy.utils.profiler"]], "Handler": [[664, "module-ivy.utils.backend.handler"]], "Arrays": [[686, "arrays"]], "Native Array": [[686, "native-array"]], "Ivy Array": [[686, "ivy-array"], [711, "ivy-array"]], "Array Handling": [[686, "array-handling"]], "Integrating custom classes with Ivy": [[686, "integrating-custom-classes-with-ivy"]], "Ivy Stateful API": [[713, "ivy-stateful-api"]], "Modules": [[713, "modules"]], "Initializers": [[713, "initializers"], [655, "module-ivy.stateful.initializers"]], "Optimizers": [[713, "optimizers"], [659, "module-ivy.stateful.optimizers"]], "Ast helpers": [[663, "module-ivy.utils.backend.ast_helpers"]], "Ivy as a Transpiler": [[714, "ivy-as-a-transpiler"]], "Frontend Functional APIs \ud83d\udea7": [[714, "frontend-functional-apis"]], "Role of the Graph Compiler \ud83d\udea7": [[714, "role-of-the-graph-compiler"]], "Converting Network Models \ud83d\udea7": [[714, "converting-network-models"]], "Function Wrapping": [[699, "function-wrapping"]], "Decorator order": [[699, "decorator-order"]], "Conversion Wrappers": [[699, "conversion-wrappers"]], "Inference Wrappers": [[699, "inference-wrappers"]], "Out Argument Support": [[699, "out-argument-support"]], "Nestable Support": [[699, "nestable-support"]], "Partial Mixed Function Support": [[699, "partial-mixed-function-support"]], "Shape Conversion": [[699, "shape-conversion"]], "View Handling": [[699, "view-handling"]], "Miscellaneous Wrappers": [[699, "miscellaneous-wrappers"]], "Building the Docs": [[679, "building-the-docs"]], "Building the Docs using Docker": [[679, "building-the-docs-using-docker"]], "Using convenience script": [[679, "using-convenience-script"]], "Using existing image on Docker Hub": [[679, "using-existing-image-on-docker-hub"]], "Building the image locally": [[679, "building-the-image-locally"]], "Building the Docs without Docker": [[679, "building-the-docs-without-docker"]], "Helpful Resources": [[680, "helpful-resources"]], "Operating Modes": [[706, "operating-modes"]], "Global Parameter Properties": [[706, "global-parameter-properties"]], "Getter: ivy.<setting> attribute": [[706, "getter-ivy-setting-attribute"]], "Setter: ivy.set_<setting> and ivy.unset_<setting> functions": [[706, "setter-ivy-set-setting-and-ivy-unset-setting-functions"]], "Glossary": [[719, "glossary"]], "FAQ": [[717, "faq"]], "Maintaining Backend Versions": [[717, "maintaining-backend-versions"]], "Dynamic Sizes": [[717, "dynamic-sizes"]], "Type and Shape Checking": [[717, "type-and-shape-checking"]], "GPU handling": [[717, "gpu-handling"]], "Model Deployment": [[717, "model-deployment"]], "Dynamic Control Flow": [[717, "dynamic-control-flow"]], "Auto-Differentiation": [[717, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[717, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[717, "support-for-functions"]], "Alternative Data Structures": [[717, "alternative-data-structures"]], "Custom Operations": [[717, "custom-operations"]], "The Pipeline": [[717, "the-pipeline"]], "State": [[717, "state"]], "Applied Libraries": [[716, "applied-libraries"], [678, "applied-libraries"]], "Ivy Mechanics": [[716, "ivy-mechanics"]], "Ivy Vision": [[716, "ivy-vision"]], "Ivy Robot": [[716, "ivy-robot"]], "Ivy Gym": [[716, "ivy-gym"]], "Ivy Memory": [[716, "ivy-memory"]], "Ivy Frontend Tests": [[703, "ivy-frontend-tests"]], "Frontend Test Examples": [[703, "frontend-test-examples"]], "ivy.tan()": [[703, "ivy-tan"]], "ivy.full()": [[703, "ivy-full"]], "Testing Without Using Tests Values": [[703, "testing-without-using-tests-values"]], "Alias functions": [[703, "alias-functions"]], "Frontend Instance Method Tests": [[703, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[703, "frontend-instance-method-test-examples"]], "ivy.add()": [[703, "ivy-add"]], "Hypothesis Helpers": [[703, "hypothesis-helpers"]], "Frontend Framework Testing Configuration": [[703, "frontend-framework-testing-configuration"]], "Background": [[673, "background"]], "Function Arguments": [[697, "function-arguments"]], "Positional and Keyword Arguments": [[697, "positional-and-keyword-arguments"]], "Input Arrays": [[697, "input-arrays"]], "out Argument": [[697, "out-argument"]], "dtype and device arguments": [[697, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[697, "numbers-in-operator-functions"]], "Integer Sequences": [[697, "integer-sequences"]], "Ivy as a Framework": [[710, "ivy-as-a-framework"]], "Exceptions": [[667, "module-ivy.utils.exceptions"]], "ML Explosion": [[674, "ml-explosion"]], "Formatting": [[696, "formatting"]], "Lint Checks": [[696, "lint-checks"], [696, "id2"]], "Setup Formatting Locally": [[696, "setup-formatting-locally"]], "Pre-commit": [[696, "pre-commit"]], "VS Code": [[696, "vs-code"]], "PyCharm": [[696, "pycharm"], [682, "pycharm"]], "Common Issues with Pre-Commit": [[696, "common-issues-with-pre-commit"]], "Continuous Integration": [[696, "continuous-integration"], [690, "continuous-integration"]], "Lint Formatting": [[696, "lint-formatting"]], "Sub backend handler": [[665, "module-ivy.utils.backend.sub_backend_handler"]], "Backend Setting": [[687, "backend-setting"]], "Backend and Frontend Version Support": [[687, "backend-and-frontend-version-support"]], "Building Blocks": [[709, "building-blocks"]], "Backend Functional APIs \u2705": [[709, "backend-functional-apis"]], "Ivy Functional API \u2705": [[709, "ivy-functional-api"]], "Backend Handler \u2705": [[709, "backend-handler"]], "Graph Compiler \ud83d\udea7": [[709, "graph-compiler"]], "Array API Tests": [[685, "array-api-tests"], [690, "array-api-tests"]], "Running the Tests": [[685, "running-the-tests"]], "Using Terminal": [[685, "using-terminal"]], "Using the IDE": [[685, "using-the-ide"]], "Regenerating Test Failures": [[685, "regenerating-test-failures"]], "Test Skipping": [[685, "test-skipping"]], "Extensions": [[715, "extensions"]], "Why Unify?": [[676, "why-unify"]], "No More Re-implementations \ud83d\udea7": [[676, "no-more-re-implementations"]], "\u201cInfinite\u201d Shelf-Life \u2705": [[676, "infinite-shelf-life"]], "Gradients": [[700, "gradients"], [502, "gradients"], [34, "module-ivy.data_classes.container.gradients"], [11, "module-ivy.data_classes.array.gradients"], [293, "gradients"]], "Overview": [[700, "overview"]], "Example Usage of the Gradient API": [[700, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[700, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[700, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[700, "custom-gradient-functions"]], "Design of the Gradient API": [[700, "design-of-the-gradient-api"]], "Our policy on gradients": [[700, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[700, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[700, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[700, "framework-specific-considerations"]], "Verbosity": [[671, "module-ivy.utils.verbosity"]], "Building the Docs Pipeline": [[688, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[688, "how-the-doc-builder-is-being-run"]], "The convenience script": [[688, "the-convenience-script"]], "Options": [[688, "options"]], "The Docker image": [[688, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[688, "how-ivy-s-docs-is-structured"]], "index.rst": [[688, "index-rst"]], "partial_conf.py": [[688, "partial-conf-py"]], "prebuild.sh": [[688, "prebuild-sh"]], "Custom Extensions": [[688, "custom-extensions"]], "custom_autosummary": [[688, "custom-autosummary"]], ":hide-table:": [[688, "hide-table"]], "discussion_linker": [[688, "discussion-linker"]], "skippable_function": [[688, "skippable-function"]], "ivy_data": [[688, "ivy-data"]], "Setting Up": [[682, "setting-up"], [1, "setting-up"]], "Forking and cloning the repo": [[682, "forking-and-cloning-the-repo"]], "Pre-Commit": [[682, "pre-commit"]], "Virtual environments - No Docker": [[682, "virtual-environments-no-docker"]], "Using miniconda": [[682, "using-miniconda"]], "Using venv": [[682, "using-venv"]], "Docker Interpreter with PyCharm": [[682, "docker-interpreter-with-pycharm"]], "Windows": [[682, "windows"], [682, "id6"]], "MacOS": [[682, "macos"]], "Ubuntu": [[682, "ubuntu"], [682, "id8"]], "Setting Up Testing in PyCharm": [[682, "setting-up-testing-in-pycharm"]], "More Detailed Hypothesis Logs in PyCharm": [[682, "more-detailed-hypothesis-logs-in-pycharm"]], "Setting up for Free": [[682, "setting-up-for-free"]], "WSL": [[682, "wsl"]], "GitHub Codespaces": [[682, "github-codespaces"]], "Commit (Push/PR) Triggered Testing": [[690, "commit-push-pr-triggered-testing"]], "Implementation": [[690, "implementation"]], "A Top-Down View": [[690, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[690, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[690, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[690, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[690, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[690, "determine-test-coverage-workflow"]], "Multiple Runners": [[690, "multiple-runners"]], "Race Condition": [[690, "race-condition"]], "Periodic Testing": [[690, "periodic-testing"]], "Manually Dispatched Workflows": [[690, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[690, "ci-pipeline"]], "Push": [[690, "push"]], "Pull Request": [[690, "pull-request"]], "Dashboard": [[690, "dashboard"]], "Assertions": [[661, "module-ivy.utils.assertions"], [636, "module-ivy_tests.test_ivy.helpers.assertions"]], "The Array Class": [[711, "the-array-class"]], "Unifying Operators": [[711, "unifying-operators"]], "API Monkey Patching": [[711, "api-monkey-patching"]], "Instance Methods": [[711, "instance-methods"]], "Data Types": [[691, "data-types"]], "Data Type Module": [[691, "data-type-module"]], "Data Type Promotion": [[691, "data-type-promotion"]], "Supported and Unsupported Data Types": [[691, "supported-and-unsupported-data-types"]], "Backend Data Type Bugs": [[691, "backend-data-type-bugs"]], "Data Type Casting Modes": [[691, "data-type-casting-modes"]], "Superset Data Type Support": [[691, "superset-data-type-support"]], "Docstring Examples": [[693, "docstring-examples"]], "ivy.tan": [[693, "ivy-tan"]], "ivy.roll": [[693, "ivy-roll"]], "ivy.add": [[693, "ivy-add"]], "Standardization": [[675, "standardization"]], "Skepticism": [[675, "skepticism"]], "Complimentary vs Competitive": [[675, "complimentary-vs-competitive"]], "Do Standards Work?": [[675, "do-standards-work"]], "The Array API Standard": [[675, "the-array-api-standard"]], "Design": [[708, "design"]], "Example - Ivy Robot": [[678, "example-ivy-robot"]], "Ivy Container": [[712, "ivy-container"]], "Construction": [[712, "construction"]], "Representation": [[712, "representation"]], "Recursive Methods": [[712, "recursive-methods"]], "Built-ins": [[712, "built-ins"]], "Access": [[712, "access"]], "Saving and Loading": [[712, "saving-and-loading"]], "Comparisons": [[712, "comparisons"]], "Customized Representations": [[712, "customized-representations"]], "Use Cases": [[712, "use-cases"]], "Compartmentalization": [[712, "compartmentalization"]], "Configuration": [[712, "configuration"]], "Data loading": [[712, "data-loading"]], "Network weights": [[712, "network-weights"]], "Inspection": [[668, "module-ivy.utils.inspection"]], "Function Types": [[698, "function-types"]], "Primary Functions": [[698, "primary-functions"]], "Compositional Functions": [[698, "compositional-functions"]], "Mixed Functions": [[698, "mixed-functions"]], "Standalone Functions": [[698, "standalone-functions"]], "Convenience Functions": [[698, "convenience-functions"]], "nonzero": [[612, "nonzero"]], "Dtype helpers": [[642, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "msort": [[619, "msort"]], "Norms": [[658, "module-ivy.stateful.norms"], [509, "norms"], [40, "module-ivy.data_classes.container.norms"], [17, "module-ivy.data_classes.array.norms"], [300, "norms"]], "Helpers": [[654, "module-ivy.stateful.helpers"]], "sort": [[621, "sort"]], "prod": [[628, "prod"]], "cumsum": [[623, "cumsum"]], "Layers": [[656, "module-ivy.stateful.layers"], [503, "layers"], [13, "module-ivy.data_classes.array.layers"], [36, "module-ivy.data_classes.container.layers"], [294, "layers"]], "layer_norm": [[602, "layer-norm"]], "Module": [[657, "module-ivy.stateful.module"]], "argmin": [[610, "argmin"]], "Testing": [[651, "testing"]], "Hypothesis helpers": [[640, "hypothesis-helpers"]], "set_nest_at_index": [[600, "set-nest-at-index"]], "Utils": [[650, "utils"]], "unique_counts": [[615, "unique-counts"]], "Data-dependent output shape": [[615, null], [614, null], [616, null], [617, null], [512, null], [512, null], [512, null], [512, null]], "var": [[631, "var"]], "unique_all": [[614, "unique-all"]], "where": [[613, "where"]], "Array helpers": [[641, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "save": [[635, "save"]], "Function testing": [[638, "module-ivy_tests.test_ivy.helpers.function_testing"]], "min": [[627, "min"]], "load": [[634, "load"]], "searchsorted": [[620, "searchsorted"]], "Structs": [[646, "module-ivy_tests.test_ivy.helpers.structs"]], "seed": [[607, "seed"]], "multinomial": [[603, "multinomial"]], "Test parameter flags": [[647, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "std": [[629, "std"]], "unique_inverse": [[616, "unique-inverse"]], "any": [[633, "any"]], "Pipeline helper": [[645, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "mean": [[626, "mean"]], "random_normal": [[605, "random-normal"]], "Available frameworks": [[637, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "unique_values": [[617, "unique-values"]], "sum": [[630, "sum"]], "General helpers": [[643, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "max": [[625, "max"]], "Number helpers": [[644, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "einsum": [[624, "einsum"]], "Framework classes": [[649, "framework-classes"]], "Activations": [[652, "module-ivy.stateful.activations"], [493, "activations"], [3, "module-ivy.data_classes.array.activations"], [25, "module-ivy.data_classes.container.activations"], [286, "activations"]], "random_uniform": [[606, "random-uniform"]], "all": [[632, "all"]], "argwhere": [[611, "argwhere"]], "set_nest_at_indices": [[601, "set-nest-at-indices"]], "Globals": [[639, "module-ivy_tests.test_ivy.helpers.globals"]], "argsort": [[618, "argsort"]], "shuffle": [[608, "shuffle"]], "Converters": [[653, "module-ivy.stateful.converters"]], "Testing helpers": [[648, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "cumprod": [[622, "cumprod"]], "argmax": [[609, "argmax"]], "randint": [[604, "randint"]], "flip": [[568, "flip"]], "nested_map": [[595, "nested-map"]], "binary_cross_entropy": [[561, "binary-cross-entropy"]], "matrix_transpose": [[546, "matrix-transpose"]], "outer": [[547, "outer"]], "zero_pad": [[579, "zero-pad"]], "qr": [[549, "qr"]], "unstack": [[578, "unstack"]], "matrix_rank": [[545, "matrix-rank"]], "svd": [[552, "svd"]], "svdvals": [[553, "svdvals"]], "reptile_step": [[582, "reptile-step"]], "slogdet": [[550, "slogdet"]], "tile": [[577, "tile"]], "prune_nest_at_indices": [[599, "prune-nest-at-indices"]], "fomaml_step": [[580, "fomaml-step"]], "sparse_cross_entropy": [[563, "sparse-cross-entropy"]], "all_nested_indices": [[583, "all-nested-indices"]], "tensorsolve": [[555, "tensorsolve"]], "concat": [[565, "concat"]], "repeat": [[570, "repeat"]], "map_nest_at_index": [[590, "map-nest-at-index"]], "stack": [[575, "stack"]], "nested_argwhere": [[594, "nested-argwhere"]], "swapaxes": [[576, "swapaxes"]], "matmul": [[542, "matmul"]], "tensordot": [[554, "tensordot"]], "vector_to_skew_symmetric_matrix": [[560, "vector-to-skew-symmetric-matrix"]], "matrix_power": [[544, "matrix-power"]], "cross_entropy": [[562, "cross-entropy"]], "vector_norm": [[559, "vector-norm"]], "clip": [[564, "clip"]], "roll": [[572, "roll"]], "maml_step": [[581, "maml-step"]], "index_nest": [[586, "index-nest"]], "pinv": [[548, "pinv"]], "map_nest_at_indices": [[591, "map-nest-at-indices"]], "matrix_norm": [[543, "matrix-norm"]], "vander": [[557, "vander"]], "permute_dims": [[569, "permute-dims"]], "prune_empty": [[597, "prune-empty"]], "copy_nest": [[584, "copy-nest"]], "nested_multi_map": [[596, "nested-multi-map"]], "expand_dims": [[567, "expand-dims"]], "reshape": [[571, "reshape"]], "solve": [[551, "solve"]], "split": [[573, "split"]], "lu_factor": [[541, "lu-factor"]], "insert_into_nest_at_index": [[587, "insert-into-nest-at-index"]], "multi_index_nest": [[592, "multi-index-nest"]], "map": [[589, "map"]], "squeeze": [[574, "squeeze"]], "prune_nest_at_index": [[598, "prune-nest-at-index"]], "constant_pad": [[566, "constant-pad"]], "inv": [[540, "inv"]], "insert_into_nest_at_indices": [[588, "insert-into-nest-at-indices"]], "trace": [[556, "trace"]], "vecdot": [[558, "vecdot"]], "nested_any": [[593, "nested-any"]], "duplicate_array_index_chains": [[585, "duplicate-array-index-chains"]], "conv1d_transpose": [[518, "conv1d-transpose"]], "vmap": [[481, "vmap"]], "stop_gradient": [[491, "stop-gradient"]], "diagonal": [[535, "diagonal"]], "Nest": [[508, "nest"], [299, "module-ivy.functional.ivy.experimental.nest"]], "Utility": [[515, "utility"], [23, "module-ivy.data_classes.array.utility"], [46, "module-ivy.data_classes.container.utility"], [307, "module-ivy.functional.ivy.experimental.utility"]], "depthwise_conv2d": [[525, "depthwise-conv2d"]], "scaled_dot_product_attention": [[530, "scaled-dot-product-attention"]], "eig": [[536, "eig"], [340, "eig"]], "Control flow ops": [[495, "control-flow-ops"]], "Experimental": [[500, "experimental"], [32, "module-ivy.data_classes.container.experimental"], [9, "module-ivy.data_classes.array.experimental"]], "jac": [[487, "jac"]], "conv1d": [[517, "conv1d"]], "conv3d": [[521, "conv3d"]], "diag": [[534, "diag"]], "Constants": [[494, "module-ivy.functional.ivy.constants"], [287, "module-ivy.functional.ivy.experimental.constants"]], "conv3d_transpose": [[522, "conv3d-transpose"]], "conv2d_transpose": [[520, "conv2d-transpose"]], "conv_general_transpose": [[524, "conv-general-transpose"]], "Creation": [[496, "creation"], [5, "module-ivy.data_classes.array.creation"], [28, "module-ivy.data_classes.container.creation"], [288, "creation"]], "Data type": [[497, "data-type"], [29, "module-ivy.data_classes.container.data_type"], [6, "module-ivy.data_classes.array.data_type"], [289, "module-ivy.functional.ivy.experimental.data_type"]], "Searching": [[511, "searching"], [19, "module-ivy.data_classes.array.searching"], [42, "module-ivy.data_classes.container.searching"], [302, "searching"]], "conv2d": [[519, "conv2d"]], "conv": [[516, "conv"]], "conv_general_dilated": [[523, "conv-general-dilated"]], "eigvalsh": [[538, "eigvalsh"]], "lstm_update": [[528, "lstm-update"]], "adam_update": [[483, "adam-update"]], "eigh": [[537, "eigh"]], "multi_head_attention": [[529, "multi-head-attention"]], "Manipulation": [[506, "manipulation"], [39, "module-ivy.data_classes.container.manipulation"], [16, "module-ivy.data_classes.array.manipulation"], [297, "manipulation"]], "Elementwise": [[499, "elementwise"], [8, "module-ivy.data_classes.array.elementwise"], [31, "module-ivy.data_classes.container.elementwise"], [52, "module-ivy.data_classes.nested_array.elementwise"], [291, "elementwise"]], "Set": [[512, "set"], [20, "module-ivy.data_classes.array.set"], [43, "module-ivy.data_classes.container.set"], [303, "module-ivy.functional.ivy.experimental.set"]], "det": [[533, "det"]], "Meta": [[507, "meta"], [298, "module-ivy.functional.ivy.experimental.meta"]], "lars_update": [[489, "lars-update"]], "inner": [[539, "inner"]], "Device": [[498, "device"], [7, "module-ivy.data_classes.array.device"], [30, "module-ivy.data_classes.container.device"], [290, "module-ivy.functional.ivy.experimental.device"]], "Parameter": [[498, "parameter"], [501, "parameter"], [501, "id1"], [501, "id2"], [501, "id3"], [501, "id4"], [501, "id5"], [453, "parameter"], [448, "parameter"], [454, "parameter"], [456, "parameter"], [457, "parameter"], [449, "parameter"], [157, "parameter"]], "General": [[501, "general"], [10, "module-ivy.data_classes.array.general"], [33, "module-ivy.data_classes.container.general"], [292, "general"]], "Random": [[510, "random"], [18, "module-ivy.data_classes.array.random"], [41, "module-ivy.data_classes.container.random"], [301, "random"]], "grad": [[485, "grad"]], "adam_step": [[482, "adam-step"]], "Sorting": [[513, "sorting"], [44, "module-ivy.data_classes.container.sorting"], [21, "module-ivy.data_classes.array.sorting"], [304, "sorting"]], "dropout": [[526, "dropout"]], "linear": [[527, "linear"]], "cholesky": [[531, "cholesky"]], "value_and_grad": [[492, "value-and-grad"]], "execute_with_gradients": [[484, "execute-with-gradients"]], "gradient_descent_update": [[486, "gradient-descent-update"]], "lamb_update": [[488, "lamb-update"]], "Linear algebra": [[504, "linear-algebra"], [14, "module-ivy.data_classes.array.linear_algebra"], [37, "module-ivy.data_classes.container.linear_algebra"], [295, "linear-algebra"]], "Losses": [[505, "losses"], [15, "module-ivy.data_classes.array.losses"], [38, "module-ivy.data_classes.container.losses"], [296, "losses"]], "Statistical": [[514, "statistical"], [45, "module-ivy.data_classes.container.statistical"], [22, "module-ivy.data_classes.array.statistical"], [306, "statistical"]], "optimizer_update": [[490, "optimizer-update"]], "cross": [[532, "cross"]], "value_is_nan": [[480, "value-is-nan"]], "mish": [[59, "mish"]], "Transpiler": [[2, "transpiler"]], "Transpiler API": [[2, "transpiler-api"]], "Using the transpiler": [[2, "using-the-transpiler"]], "Transpiling functions": [[2, "transpiling-functions"]], "Transpiling Libraries": [[2, "transpiling-libraries"]], "Transpiling Modules": [[2, "transpiling-modules"]], "Ivy.unify": [[2, "ivy-unify"]], "Sharp bits": [[2, "sharp-bits"], [0, "sharp-bits"]], "Base": [[26, "module-ivy.data_classes.container.base"], [51, "module-ivy.data_classes.nested_array.base"]], "Wrapping": [[24, "module-ivy.data_classes.array.wrapping"], [47, "module-ivy.data_classes.container.wrapping"]], "Array": [[48, "array"]], "Functions": [[54, "functions"]], "Conversions": [[4, "module-ivy.data_classes.array.conversions"], [27, "module-ivy.data_classes.container.conversions"]], "Ivy Folder": [[1, "ivy-folder"]], "Setting Up the API key": [[1, "setting-up-the-api-key"]], "Issues and Questions": [[1, "issues-and-questions"]], "Graph Compiler": [[0, "graph-compiler"]], "Compiler API": [[0, "compiler-api"]], "Using the compiler": [[0, "using-the-compiler"]], "Eager vs lazy Compilation": [[0, "eager-vs-lazy-compilation"]], "Array caching": [[0, "array-caching"]], "Generators": [[0, "generators"]], "Stateful": [[0, "stateful"]], "log_softmax": [[58, "log-softmax"]], "hardswish": [[56, "hardswish"]], "Data classes": [[53, "data-classes"]], "gelu": [[55, "gelu"]], "Image": [[12, "module-ivy.data_classes.array.image"], [35, "module-ivy.data_classes.container.image"]], "leaky_relu": [[57, "leaky-relu"]], "Container": [[49, "container"]], "Nested array": [[50, "nested-array"]], "unset_tmp_dir": [[479, "unset-tmp-dir"]], "set_tmp_dir": [[458, "set-tmp-dir"]], "scatter_nd": [[447, "scatter-nd"]], "is_native_array": [[438, "is-native-array"]], "try_else_none": [[469, "try-else-none"]], "set_nestable_mode": [[453, "set-nestable-mode"]], "inplace_increment": [[431, "inplace-increment"]], "unset_exception_trace_mode": [[471, "unset-exception-trace-mode"]], "inplace_update": [[432, "inplace-update"]], "set_array_mode": [[448, "set-array-mode"]], "is_array": [[434, "is-array"]], "set_precise_mode": [[454, "set-precise-mode"]], "unset_array_mode": [[470, "unset-array-mode"]], "get_num_dims": [[426, "get-num-dims"]], "function_supported_devices_and_dtypes": [[420, "function-supported-devices-and-dtypes"]], "isscalar": [[440, "isscalar"]], "scatter_flat": [[446, "scatter-flat"]], "set_shape_array_mode": [[456, "set-shape-array-mode"]], "gather": [[422, "gather"]], "is_ivy_container": [[436, "is-ivy-container"]], "unset_shape_array_mode": [[477, "unset-shape-array-mode"]], "is_ivy_array": [[435, "is-ivy-array"]], "to_list": [[465, "to-list"]], "to_scalar": [[468, "to-scalar"]], "get_item": [[425, "get-item"]], "to_ivy_shape": [[464, "to-ivy-shape"]], "unset_precise_mode": [[475, "unset-precise-mode"]], "set_show_func_wrapper_trace_mode": [[457, "set-show-func-wrapper-trace-mode"]], "to_native_shape": [[466, "to-native-shape"]], "unset_queue_timeout": [[476, "unset-queue-timeout"]], "inplace_variables_supported": [[433, "inplace-variables-supported"]], "get_all_arrays_in_memory": [[424, "get-all-arrays-in-memory"]], "to_numpy": [[467, "to-numpy"]], "set_queue_timeout": [[455, "set-queue-timeout"]], "itemsize": [[441, "itemsize"]], "get_referrers_recursive": [[427, "get-referrers-recursive"]], "stable_pow": [[461, "stable-pow"]], "set_min_base": [[451, "set-min-base"]], "isin": [[439, "isin"]], "print_all_arrays_in_memory": [[445, "print-all-arrays-in-memory"]], "inplace_arrays_supported": [[429, "inplace-arrays-supported"]], "unset_show_func_wrapper_trace_mode": [[478, "unset-show-func-wrapper-trace-mode"]], "match_kwargs": [[442, "match-kwargs"]], "set_min_denominator": [[452, "set-min-denominator"]], "unset_min_base": [[472, "unset-min-base"]], "unset_nestable_mode": [[474, "unset-nestable-mode"]], "function_unsupported_devices_and_dtypes": [[421, "function-unsupported-devices-and-dtypes"]], "set_exception_trace_mode": [[449, "set-exception-trace-mode"]], "is_ivy_nested_array": [[437, "is-ivy-nested-array"]], "has_nans": [[428, "has-nans"]], "stable_divide": [[460, "stable-divide"]], "unset_min_denominator": [[473, "unset-min-denominator"]], "shape": [[459, "shape"]], "multiprocessing": [[443, "multiprocessing"]], "gather_nd": [[423, "gather-nd"]], "num_arrays_in_memory": [[444, "num-arrays-in-memory"]], "set_item": [[450, "set-item"]], "strides": [[462, "strides"]], "supports_inplace_updates": [[463, "supports-inplace-updates"]], "inplace_decrement": [[430, "inplace-decrement"]], "native_sparse_array": [[390, "native-sparse-array"]], "all_equal": [[404, "all-equal"]], "i0": [[364, "i0"]], "is_ivy_sparse_array": [[388, "is-ivy-sparse-array"]], "native_sparse_array_to_indices_values_and_shape": [[391, "native-sparse-array-to-indices-values-and-shape"]], "nanmean": [[400, "nanmean"]], "einops_reduce": [[416, "einops-reduce"]], "put_along_axis": [[367, "put-along-axis"]], "heaviside": [[361, "heaviside"]], "unravel_index": [[385, "unravel-index"]], "einops_rearrange": [[415, "einops-rearrange"]], "assert_supports_inplace": [[408, "assert-supports-inplace"]], "beta": [[381, "beta"]], "moveaxis": [[365, "moveaxis"]], "l2_normalize": [[378, "l2-normalize"]], "array_equal": [[407, "array-equal"]], "invert_permutation": [[386, "invert-permutation"]], "cov": [[394, "cov"]], "quantile": [[403, "quantile"]], "arg_info": [[405, "arg-info"]], "dirichlet": [[382, "dirichlet"]], "bincount": [[392, "bincount"]], "median": [[399, "median"]], "arg_names": [[406, "arg-names"]], "vsplit": [[372, "vsplit"]], "einops_repeat": [[417, "einops-repeat"]], "vstack": [[373, "vstack"]], "is_native_sparse_array": [[389, "is-native-sparse-array"]], "exists": [[418, "exists"]], "corrcoef": [[393, "corrcoef"]], "pad": [[366, "pad"]], "cache_fn": [[409, "cache-fn"]], "flipud": [[360, "flipud"]], "igamma": [[398, "igamma"]], "poisson": [[384, "poisson"]], "nanmedian": [[401, "nanmedian"]], "default": [[414, "default"]], "unique_consecutive": [[371, "unique-consecutive"]], "group_norm": [[375, "group-norm"]], "container_types": [[412, "container-types"]], "clip_matrix_norm": [[410, "clip-matrix-norm"]], "lp_normalize": [[379, "lp-normalize"]], "nanquantile": [[402, "nanquantile"]], "top_k": [[370, "top-k"]], "lexsort": [[387, "lexsort"]], "rot90": [[368, "rot90"]], "bernoulli": [[380, "bernoulli"]], "batch_norm": [[374, "batch-norm"]], "current_backend_str": [[413, "current-backend-str"]], "l1_normalize": [[377, "l1-normalize"]], "histogram": [[397, "histogram"]], "fourier_encode": [[419, "fourier-encode"]], "hstack": [[363, "hstack"]], "take_along_axis": [[369, "take-along-axis"]], "clip_vector_norm": [[411, "clip-vector-norm"]], "cummin": [[396, "cummin"]], "cummax": [[395, "cummax"]], "instance_norm": [[376, "instance-norm"]], "hsplit": [[362, "hsplit"]], "gamma": [[383, "gamma"]], "adaptive_avg_pool1d": [[308, "adaptive-avg-pool1d"]], "dft": [[315, "dft"]], "avg_pool1d": [[311, "avg-pool1d"]], "idct": [[324, "idct"]], "ifftn": [[326, "ifftn"]], "max_pool3d": [[331, "max-pool3d"]], "nearest_interpolate": [[333, "nearest-interpolate"]], "cond": [[338, "cond"]], "diagflat": [[339, "diagflat"]], "log_poisson_loss": [[346, "log-poisson-loss"]], "interp": [[327, "interp"]], "max_unpool1d": [[332, "max-unpool1d"]], "fft2": [[321, "fft2"]], "avg_pool2d": [[312, "avg-pool2d"]], "flatten": [[358, "flatten"]], "generate_einsum_equation": [[322, "generate-einsum-equation"]], "expand": [[356, "expand"]], "dropout2d": [[317, "dropout2d"]], "concat_from_sequence": [[353, "concat-from-sequence"]], "dstack": [[355, "dstack"]], "matrix_exp": [[344, "matrix-exp"]], "atleast_1d": [[349, "atleast-1d"]], "pool": [[334, "pool"]], "as_strided": [[347, "as-strided"]], "associative_scan": [[348, "associative-scan"]], "eigvals": [[342, "eigvals"]], "embedding": [[319, "embedding"]], "dropout1d": [[316, "dropout1d"]], "avg_pool3d": [[313, "avg-pool3d"]], "Sparse array": [[305, "sparse-array"]], "fft": [[320, "fft"]], "get_interpolate_kernel": [[323, "get-interpolate-kernel"]], "adjoint": [[337, "adjoint"]], "dsplit": [[354, "dsplit"]], "max_pool1d": [[329, "max-pool1d"]], "multi_dot": [[345, "multi-dot"]], "adaptive_avg_pool2d": [[309, "adaptive-avg-pool2d"]], "rfftn": [[336, "rfftn"]], "atleast_2d": [[350, "atleast-2d"]], "eigh_tridiagonal": [[341, "eigh-tridiagonal"]], "fill_diagonal": [[357, "fill-diagonal"]], "reduce_window": [[335, "reduce-window"]], "kron": [[343, "kron"]], "dct": [[314, "dct"]], "atleast_3d": [[351, "atleast-3d"]], "max_pool2d": [[330, "max-pool2d"]], "ifft": [[325, "ifft"]], "interpolate": [[328, "interpolate"]], "dropout3d": [[318, "dropout3d"]], "broadcast_shapes": [[352, "broadcast-shapes"]], "fliplr": [[359, "fliplr"]], "area_interpolate": [[310, "area-interpolate"]], "hamming_window": [[251, "hamming-window"]], "xlogy": [[282, "xlogy"]], "hann_window": [[252, "hann-window"]], "copysign": [[264, "copysign"]], "count_nonzero": [[265, "count-nonzero"]], "eye_like": [[250, "eye-like"]], "fix": [[267, "fix"]], "binarizer": [[262, "binarizer"]], "lerp": [[275, "lerp"]], "selu": [[247, "selu"]], "trunc_divide": [[241, "trunc-divide"]], "isclose": [[273, "isclose"]], "nextafter": [[279, "nextafter"]], "lgamma": [[276, "lgamma"]], "unsorted_segment_min": [[259, "unsorted-segment-min"]], "ndenumerate": [[256, "ndenumerate"]], "diff": [[266, "diff"]], "tril_indices": [[258, "tril-indices"]], "sinc": [[281, "sinc"]], "nansum": [[278, "nansum"]], "modf": [[277, "modf"]], "hypot": [[272, "hypot"]], "allclose": [[261, "allclose"]], "kaiser_bessel_derived_window": [[254, "kaiser-bessel-derived-window"]], "relu6": [[246, "relu6"]], "logit": [[243, "logit"]], "zeta": [[283, "zeta"]], "kaiser_window": [[255, "kaiser-window"]], "indices": [[253, "indices"]], "ndindex": [[257, "ndindex"]], "trunc": [[240, "trunc"]], "bind_custom_gradient_function": [[285, "bind-custom-gradient-function"]], "logsigmoid": [[244, "logsigmoid"]], "silu": [[248, "silu"]], "ldexp": [[274, "ldexp"]], "vorbis_window": [[260, "vorbis-window"]], "prelu": [[245, "prelu"]], "thresholded_relu": [[249, "thresholded-relu"]], "fmax": [[269, "fmax"]], "reduce": [[284, "reduce"]], "float_power": [[268, "float-power"]], "frexp": [[270, "frexp"]], "gradient": [[271, "gradient"]], "signbit": [[280, "signbit"]], "conj": [[263, "conj"]], "elu": [[242, "elu"]], "nan_to_num": [[221, "nan-to-num"]], "logical_xor": [[217, "logical-xor"]], "bitwise_xor": [[182, "bitwise-xor"]], "isnan": [[203, "isnan"]], "tanh": [[238, "tanh"]], "floor": [[193, "floor"]], "isfinite": [[201, "isfinite"]], "logical_and": [[214, "logical-and"]], "expm1": [[192, "expm1"]], "bitwise_right_shift": [[181, "bitwise-right-shift"]], "less": [[206, "less"]], "logical_or": [[216, "logical-or"]], "negative": [[222, "negative"]], "pow": [[225, "pow"]], "floor_divide": [[194, "floor-divide"]], "logaddexp": [[212, "logaddexp"]], "greater_equal": [[199, "greater-equal"]], "reciprocal": [[228, "reciprocal"]], "square": [[235, "square"]], "erf": [[189, "erf"]], "positive": [[224, "positive"]], "ceil": [[183, "ceil"]], "bitwise_or": [[180, "bitwise-or"]], "imag": [[200, "imag"]], "log": [[208, "log"]], "remainder": [[229, "remainder"]], "tan": [[237, "tan"]], "exp": [[190, "exp"]], "rad2deg": [[226, "rad2deg"]], "sin": [[232, "sin"]], "multiply": [[220, "multiply"]], "sinh": [[233, "sinh"]], "less_equal": [[207, "less-equal"]], "lcm": [[205, "lcm"]], "logaddexp2": [[213, "logaddexp2"]], "trapz": [[239, "trapz"]], "divide": [[187, "divide"]], "log1p": [[210, "log1p"]], "sqrt": [[234, "sqrt"]], "log10": [[209, "log10"]], "real": [[227, "real"]], "equal": [[188, "equal"]], "cosh": [[185, "cosh"]], "cos": [[184, "cos"]], "isreal": [[204, "isreal"]], "maximum": [[218, "maximum"]], "round": [[230, "round"]], "sign": [[231, "sign"]], "fmod": [[196, "fmod"]], "logical_not": [[215, "logical-not"]], "not_equal": [[223, "not-equal"]], "log2": [[211, "log2"]], "isinf": [[202, "isinf"]], "greater": [[198, "greater"]], "subtract": [[236, "subtract"]], "exp2": [[191, "exp2"]], "deg2rad": [[186, "deg2rad"]], "gcd": [[197, "gcd"]], "minimum": [[219, "minimum"]], "fmin": [[195, "fmin"]], "bitwise_and": [[177, "bitwise-and"]], "result_type": [[127, "result-type"]], "set_default_dtype": [[129, "set-default-dtype"]], "function_supported_devices": [[146, "function-supported-devices"]], "asin": [[172, "asin"]], "is_native_dtype": [[123, "is-native-dtype"]], "bitwise_left_shift": [[179, "bitwise-left-shift"]], "default_device": [[143, "default-device"]], "set_default_int_dtype": [[131, "set-default-int-dtype"]], "is_float_dtype": [[120, "is-float-dtype"]], "set_default_float_dtype": [[130, "set-default-float-dtype"]], "unset_default_complex_dtype": [[134, "unset-default-complex-dtype"]], "is_hashable_dtype": [[121, "is-hashable-dtype"]], "dev": [[144, "dev"]], "set_default_uint_dtype": [[132, "set-default-uint-dtype"]], "tpu_is_available": [[163, "tpu-is-available"]], "atan": [[174, "atan"]], "asinh": [[173, "asinh"]], "unset_default_device": [[164, "unset-default-device"]], "acosh": [[169, "acosh"]], "clear_cached_mem_on_dev": [[142, "clear-cached-mem-on-dev"]], "set_default_complex_dtype": [[128, "set-default-complex-dtype"]], "is_int_dtype": [[122, "is-int-dtype"]], "split_factor": [[159, "split-factor"]], "set_default_device": [[156, "set-default-device"]], "promote_types": [[125, "promote-types"]], "type_promote_arrays": [[133, "type-promote-arrays"]], "unset_default_dtype": [[135, "unset-default-dtype"]], "gpu_is_available": [[149, "gpu-is-available"]], "as_ivy_dev": [[140, "as-ivy-dev"]], "atanh": [[176, "atanh"]], "print_all_ivy_arrays_on_dev": [[155, "print-all-ivy-arrays-on-dev"]], "is_uint_dtype": [[124, "is-uint-dtype"]], "num_cpu_cores": [[151, "num-cpu-cores"]], "atan2": [[175, "atan2"]], "unset_default_int_dtype": [[137, "unset-default-int-dtype"]], "get_all_ivy_arrays_on_dev": [[148, "get-all-ivy-arrays-on-dev"]], "num_ivy_arrays_on_dev": [[153, "num-ivy-arrays-on-dev"]], "unset_default_float_dtype": [[136, "unset-default-float-dtype"]], "set_split_factor": [[158, "set-split-factor"]], "function_unsupported_devices": [[147, "function-unsupported-devices"]], "unset_soft_device_mode": [[165, "unset-soft-device-mode"]], "acos": [[168, "acos"]], "bitwise_invert": [[178, "bitwise-invert"]], "promote_types_of_inputs": [[126, "promote-types-of-inputs"]], "num_gpus": [[152, "num-gpus"]], "angle": [[171, "angle"]], "split_func_call": [[160, "split-func-call"]], "as_native_dev": [[141, "as-native-dev"]], "used_mem_on_dev": [[166, "used-mem-on-dev"]], "add": [[170, "add"]], "handle_soft_device_variable": [[150, "handle-soft-device-variable"]], "valid_dtype": [[139, "valid-dtype"]], "unset_default_uint_dtype": [[138, "unset-default-uint-dtype"]], "percent_used_mem_on_dev": [[154, "percent-used-mem-on-dev"]], "dev_util": [[145, "dev-util"]], "set_soft_device_mode": [[157, "set-soft-device-mode"]], "to_device": [[161, "to-device"]], "abs": [[167, "abs"]], "total_mem_on_dev": [[162, "total-mem-on-dev"]]}, "indexentries": {"built-in function": [[0, "ivy.compile"], [2, "ivy.transpile"], [2, "ivy.unify"]], "ivy.compile()": [[0, "ivy.compile"]], "ivy.transpile()": [[2, "ivy.transpile"]], "ivy.unify()": [[2, "ivy.unify"]], "_arraywithactivations (class in ivy.data_classes.array.activations)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "hardswish() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.hardswish"]], "ivy.data_classes.array.activations": [[3, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[3, "module-ivy.data_classes.array.activations"], [4, "module-ivy.data_classes.array.conversions"], [5, "module-ivy.data_classes.array.creation"], [6, "module-ivy.data_classes.array.data_type"], [7, "module-ivy.data_classes.array.device"], [8, "module-ivy.data_classes.array.elementwise"], [9, "module-ivy.data_classes.array.experimental"], [9, "module-ivy.data_classes.array.experimental.activations"], [9, "module-ivy.data_classes.array.experimental.conversions"], [9, "module-ivy.data_classes.array.experimental.creation"], [9, "module-ivy.data_classes.array.experimental.data_type"], [9, "module-ivy.data_classes.array.experimental.device"], [9, "module-ivy.data_classes.array.experimental.elementwise"], [9, "module-ivy.data_classes.array.experimental.general"], [9, "module-ivy.data_classes.array.experimental.gradients"], [9, "module-ivy.data_classes.array.experimental.image"], [9, "module-ivy.data_classes.array.experimental.layers"], [9, "module-ivy.data_classes.array.experimental.linear_algebra"], [9, "module-ivy.data_classes.array.experimental.losses"], [9, "module-ivy.data_classes.array.experimental.manipulation"], [9, "module-ivy.data_classes.array.experimental.norms"], [9, "module-ivy.data_classes.array.experimental.random"], [9, "module-ivy.data_classes.array.experimental.searching"], [9, "module-ivy.data_classes.array.experimental.set"], [9, "module-ivy.data_classes.array.experimental.sorting"], [9, "module-ivy.data_classes.array.experimental.statistical"], [9, "module-ivy.data_classes.array.experimental.utility"], [10, "module-ivy.data_classes.array.general"], [11, "module-ivy.data_classes.array.gradients"], [12, "module-ivy.data_classes.array.image"], [13, "module-ivy.data_classes.array.layers"], [14, "module-ivy.data_classes.array.linear_algebra"], [15, "module-ivy.data_classes.array.losses"], [16, "module-ivy.data_classes.array.manipulation"], [17, "module-ivy.data_classes.array.norms"], [18, "module-ivy.data_classes.array.random"], [19, "module-ivy.data_classes.array.searching"], [20, "module-ivy.data_classes.array.set"], [21, "module-ivy.data_classes.array.sorting"], [22, "module-ivy.data_classes.array.statistical"], [23, "module-ivy.data_classes.array.utility"], [24, "module-ivy.data_classes.array.wrapping"], [25, "module-ivy.data_classes.container.activations"], [26, "module-ivy.data_classes.container.base"], [27, "module-ivy.data_classes.container.conversions"], [28, "module-ivy.data_classes.container.creation"], [29, "module-ivy.data_classes.container.data_type"], [30, "module-ivy.data_classes.container.device"], [31, "module-ivy.data_classes.container.elementwise"], [32, "module-ivy.data_classes.container.experimental"], [32, "module-ivy.data_classes.container.experimental.activations"], [32, "module-ivy.data_classes.container.experimental.conversions"], [32, "module-ivy.data_classes.container.experimental.creation"], [32, "module-ivy.data_classes.container.experimental.data_type"], [32, "module-ivy.data_classes.container.experimental.device"], [32, "module-ivy.data_classes.container.experimental.elementwise"], [32, "module-ivy.data_classes.container.experimental.general"], [32, "module-ivy.data_classes.container.experimental.gradients"], [32, "module-ivy.data_classes.container.experimental.image"], [32, "module-ivy.data_classes.container.experimental.layers"], [32, "module-ivy.data_classes.container.experimental.linear_algebra"], [32, "module-ivy.data_classes.container.experimental.losses"], [32, "module-ivy.data_classes.container.experimental.manipulation"], [32, "module-ivy.data_classes.container.experimental.norms"], [32, "module-ivy.data_classes.container.experimental.random"], [32, "module-ivy.data_classes.container.experimental.searching"], [32, "module-ivy.data_classes.container.experimental.set"], [32, "module-ivy.data_classes.container.experimental.sorting"], [32, "module-ivy.data_classes.container.experimental.statistical"], [32, "module-ivy.data_classes.container.experimental.utility"], [33, "module-ivy.data_classes.container.general"], [34, "module-ivy.data_classes.container.gradients"], [35, "module-ivy.data_classes.container.image"], [36, "module-ivy.data_classes.container.layers"], [37, "module-ivy.data_classes.container.linear_algebra"], [38, "module-ivy.data_classes.container.losses"], [39, "module-ivy.data_classes.container.manipulation"], [40, "module-ivy.data_classes.container.norms"], [41, "module-ivy.data_classes.container.random"], [42, "module-ivy.data_classes.container.searching"], [43, "module-ivy.data_classes.container.set"], [44, "module-ivy.data_classes.container.sorting"], [45, "module-ivy.data_classes.container.statistical"], [46, "module-ivy.data_classes.container.utility"], [47, "module-ivy.data_classes.container.wrapping"], [48, "module-ivy.data_classes.array.array"], [49, "module-ivy.data_classes.container.container"], [50, "module-ivy.data_classes.nested_array.nested_array"], [51, "module-ivy.data_classes.nested_array.base"], [52, "module-ivy.data_classes.nested_array.elementwise"], [286, "module-ivy.functional.ivy.experimental.activations"], [287, "module-ivy.functional.ivy.experimental.constants"], [288, "module-ivy.functional.ivy.experimental.creation"], [289, "module-ivy.functional.ivy.experimental.data_type"], [290, "module-ivy.functional.ivy.experimental.device"], [291, "module-ivy.functional.ivy.experimental.elementwise"], [292, "module-ivy.functional.ivy.experimental.general"], [293, "module-ivy.functional.ivy.experimental.gradients"], [294, "module-ivy.functional.ivy.experimental.layers"], [295, "module-ivy.functional.ivy.experimental.linear_algebra"], [296, "module-ivy.functional.ivy.experimental.losses"], [297, "module-ivy.functional.ivy.experimental.manipulation"], [298, "module-ivy.functional.ivy.experimental.meta"], [299, "module-ivy.functional.ivy.experimental.nest"], [300, "module-ivy.functional.ivy.experimental.norms"], [301, "module-ivy.functional.ivy.experimental.random"], [302, "module-ivy.functional.ivy.experimental.searching"], [303, "module-ivy.functional.ivy.experimental.set"], [304, "module-ivy.functional.ivy.experimental.sorting"], [305, "module-ivy.functional.ivy.experimental.sparse_array"], [306, "module-ivy.functional.ivy.experimental.statistical"], [307, "module-ivy.functional.ivy.experimental.utility"], [493, "module-ivy.functional.ivy.activations"], [494, "module-ivy.functional.ivy.constants"], [495, "module-ivy.functional.ivy.control_flow_ops"], [496, "module-ivy.functional.ivy.creation"], [497, "module-ivy.functional.ivy.data_type"], [498, "module-ivy.functional.ivy.device"], [499, "module-ivy.functional.ivy.elementwise"], [500, "module-ivy.functional.ivy.experimental"], [501, "module-ivy.functional.ivy.general"], [502, "module-ivy.functional.ivy.gradients"], [503, "module-ivy.functional.ivy.layers"], [504, "module-ivy.functional.ivy.linear_algebra"], [505, "module-ivy.functional.ivy.losses"], [506, "module-ivy.functional.ivy.manipulation"], [507, "module-ivy.functional.ivy.meta"], [508, "module-ivy.functional.ivy.nest"], [509, "module-ivy.functional.ivy.norms"], [510, "module-ivy.functional.ivy.random"], [511, "module-ivy.functional.ivy.searching"], [512, "module-ivy.functional.ivy.set"], [513, "module-ivy.functional.ivy.sorting"], [514, "module-ivy.functional.ivy.statistical"], [515, "module-ivy.functional.ivy.utility"], [636, "module-ivy_tests.test_ivy.helpers.assertions"], [637, "module-ivy_tests.test_ivy.helpers.available_frameworks"], [638, "module-ivy_tests.test_ivy.helpers.function_testing"], [639, "module-ivy_tests.test_ivy.helpers.globals"], [640, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"], [641, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"], [642, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"], [643, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"], [644, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"], [645, "module-ivy_tests.test_ivy.helpers.pipeline_helper"], [646, "module-ivy_tests.test_ivy.helpers.structs"], [647, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"], [648, "module-ivy_tests.test_ivy.helpers.testing_helpers"], [652, "module-ivy.stateful.activations"], [653, "module-ivy.stateful.converters"], [654, "module-ivy.stateful.helpers"], [655, "module-ivy.stateful.initializers"], [656, "module-ivy.stateful.layers"], [657, "module-ivy.stateful.module"], [658, "module-ivy.stateful.norms"], [659, "module-ivy.stateful.optimizers"], [660, "module-ivy.stateful.sequential"], [661, "module-ivy.utils.assertions"], [662, "module-ivy.utils.backend"], [663, "module-ivy.utils.backend.ast_helpers"], [664, "module-ivy.utils.backend.handler"], [665, "module-ivy.utils.backend.sub_backend_handler"], [666, "module-ivy.utils.dynamic_import"], [667, "module-ivy.utils.exceptions"], [668, "module-ivy.utils.inspection"], [669, "module-ivy.utils.logging"], [670, "module-ivy.utils.profiler"], [671, "module-ivy.utils.verbosity"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[3, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions._to_native"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions.args_to_native"]], "ivy.data_classes.array.conversions": [[4, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[4, "ivy.data_classes.array.conversions.to_native"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[5, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[5, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[6, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[6, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[7, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[7, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[7, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[7, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[7, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "angle() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.angle"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "exp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp2"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.fmin"]], "gcd() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.gcd"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "imag() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.imag"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[8, "module-ivy.data_classes.array.elementwise"]], "lcm() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.lcm"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "real() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.real"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trapz() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trapz"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[8, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[9, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[9, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[9, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[9, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[9, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[9, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[9, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[9, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[9, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[9, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[9, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[9, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[9, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[9, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[9, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[9, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[9, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[9, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[9, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[9, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[9, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[9, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "as_strided() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "concat_from_sequence() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.elu"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fft2() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft2"]], "fill_diagonal() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.group_norm"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "histogram() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.igamma"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "ivy.data_classes.array.experimental": [[9, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[9, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[9, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[9, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[9, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[9, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[9, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[9, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[9, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[9, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[9, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[9, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[9, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[9, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[9, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[9, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[9, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[9, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[9, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[9, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[9, "module-ivy.data_classes.array.experimental.utility"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l1_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[9, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lgamma"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[9, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "modf() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[9, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[9, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[9, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[9, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.reduce"]], "reduce_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.reduce_window"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rfftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[9, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.silu"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[9, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "unique_consecutive() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[9, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "unsorted_segment_min() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[9, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_min"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[9, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[9, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "isin() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.isin"]], "ivy.data_classes.array.general": [[10, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_file() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.to_file"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[10, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[11, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[11, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[12, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[12, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[12, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[13, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[13, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[14, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[14, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[15, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[15, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[15, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[15, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[15, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[15, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[16, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[16, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[17, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[17, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[17, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[17, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[18, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[18, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[18, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[18, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[18, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[18, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[18, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[18, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[19, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[19, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[20, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[20, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[20, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[20, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[20, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[20, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[20, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[21, "module-ivy.data_classes.array.sorting"]], "msort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting.msort"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[21, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[22, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[22, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[23, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[23, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[23, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[23, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[23, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[24, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[24, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[24, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_hardswish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_hardswish"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "hardswish() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.hardswish"]], "ivy.data_classes.container.activations": [[25, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[25, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[26, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[26, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[26, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[26, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_load() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_load"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_save() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_save"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[26, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[26, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[26, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[26, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[27, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[27, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_copy_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_copy_array"]], "_static_empty() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_full"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "asarray() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.asarray"]], "copy_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.copy_array"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "frombuffer() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.frombuffer"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[28, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "static_frombuffer() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.static_frombuffer"]], "static_triu_indices() (ivy.data_classes.container.creation._containerwithcreation static method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.static_triu_indices"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "triu_indices() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.triu_indices"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[28, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[29, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[29, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[30, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[30, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[30, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[30, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[30, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[30, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[30, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_lcm() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_lcm"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "angle() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.angle"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "exp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp2"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.fmin"]], "gcd() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.gcd"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "imag() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.imag"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[31, "module-ivy.data_classes.container.elementwise"]], "lcm() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.lcm"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "real() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.real"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "static_angle() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_angle"]], "static_exp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_exp2"]], "static_fmin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_fmin"]], "static_gcd() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_gcd"]], "static_imag() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_imag"]], "static_logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_logaddexp2"]], "static_nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_nan_to_num"]], "static_real() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_real"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[31, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[32, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[32, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[32, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[32, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[32, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[32, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[32, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[32, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[32, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[32, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[32, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[32, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[32, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[32, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[32, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[32, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[32, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[32, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "_static_cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummax"]], "_static_cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummin"]], "_static_elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_elu"]], "_static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_fft"]], "_static_fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_fill_diagonal"]], "_static_reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[32, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._static_reduce"]], "_static_silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_silu"]], "_static_unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unique_consecutive"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.batch_norm"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.elu"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.group_norm"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.igamma"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.invert_permutation"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "ivy.data_classes.container.experimental": [[32, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[32, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[32, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[32, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[32, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[32, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[32, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[32, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[32, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[32, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[32, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[32, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[32, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[32, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[32, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[32, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[32, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[32, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[32, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[32, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[32, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[32, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.reduce"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.silu"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_as_strided"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_batch_norm"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_concat_from_sequence"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_cov"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_gamma"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_group_norm"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_histogram"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_idct"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifftn"]], "static_igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_igamma"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_invert_permutation"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l1_normalize"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lerp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[32, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[32, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_modf"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[32, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[32, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[32, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[32, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfftn"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[32, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_min"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[32, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[32, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_min"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[32, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[32, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[32, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "isin() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.isin"]], "itemsize() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.itemsize"]], "ivy.data_classes.container.general": [[33, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "static_isin() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.static_isin"]], "static_itemsize() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.static_itemsize"]], "static_strides() (ivy.data_classes.container.general._containerwithgeneral static method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.static_strides"]], "strides() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.strides"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[33, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[34, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[34, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[35, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[35, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[35, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout2d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_reduce_window() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_reduce_window"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[36, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "reduce_window() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.reduce_window"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[36, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[37, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[37, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[38, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[38, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[39, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[39, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[40, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[40, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[40, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[40, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[41, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[41, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[41, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[42, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[42, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[43, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[43, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[43, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[43, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[43, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[43, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[43, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[43, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[43, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[43, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[43, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[44, "module-ivy.data_classes.container.sorting"]], "msort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting.msort"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "static_msort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[44, "ivy.data_classes.container.sorting._ContainerWithSorting.static_msort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[45, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[45, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[46, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[46, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[47, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[47, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[47, "module-ivy.data_classes.container.wrapping"]], "array (class in ivy.data_classes.array.array)": [[48, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[48, "ivy.data_classes.array.array.Array.__xor__"]], "backend (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.backend"]], "base (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.base"]], "data (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.dynamic_backend"]], "itemsize (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.itemsize"]], "ivy.data_classes.array.array": [[48, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.ndim"]], "shape (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.size"]], "strides (ivy.data_classes.array.array.array property)": [[48, "ivy.data_classes.array.array.Array.strides"]], "container (class in ivy.data_classes.container.container)": [[49, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[49, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[49, "module-ivy.data_classes.container.container"]], "nestedarray (class in ivy.data_classes.nested_array.nested_array)": [[50, "ivy.data_classes.nested_array.nested_array.NestedArray"]], "__init__() (ivy.data_classes.nested_array.nested_array.nestedarray method)": [[50, "ivy.data_classes.nested_array.nested_array.NestedArray.__init__"]], "from_row_lengths() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[50, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_splits() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[50, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_splits"]], "ivy.data_classes.nested_array.nested_array": [[50, "module-ivy.data_classes.nested_array.nested_array"]], "nestedarraybase (class in ivy.data_classes.nested_array.base)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase"]], "__init__() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.__init__"]], "_abc_impl (ivy.data_classes.nested_array.base.nestedarraybase attribute)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase._abc_impl"]], "data (ivy.data_classes.nested_array.base.nestedarraybase property)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.data"]], "device (ivy.data_classes.nested_array.base.nestedarraybase property)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.device"]], "dtype (ivy.data_classes.nested_array.base.nestedarraybase property)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.dtype"]], "inner_shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.inner_shape"]], "ivy.data_classes.nested_array.base": [[51, "module-ivy.data_classes.nested_array.base"]], "ndim (ivy.data_classes.nested_array.base.nestedarraybase property)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.ndim"]], "nested_array() (ivy.data_classes.nested_array.base.nestedarraybase class method)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_array"]], "nested_rank (ivy.data_classes.nested_array.base.nestedarraybase property)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_rank"]], "ragged_map() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_map"]], "ragged_multi_map() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map"]], "ragged_multi_map_in_function() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map_in_function"]], "replace_ivy_arrays() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.replace_ivy_arrays"]], "shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.shape"]], "unbind() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[51, "ivy.data_classes.nested_array.base.NestedArrayBase.unbind"]], "nestedarrayelementwise (class in ivy.data_classes.nested_array.elementwise)": [[52, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise"]], "_abc_impl (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise attribute)": [[52, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise._abc_impl"]], "ivy.data_classes.nested_array.elementwise": [[52, "module-ivy.data_classes.nested_array.elementwise"]], "static_add() (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise static method)": [[52, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise.static_add"]], "gelu() (in module ivy)": [[55, "ivy.gelu"], [493, "ivy.gelu"]], "gelu() (ivy.array method)": [[55, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[55, "ivy.Container.gelu"]], "hardswish() (in module ivy)": [[56, "ivy.hardswish"], [493, "ivy.hardswish"]], "hardswish() (ivy.array method)": [[56, "ivy.Array.hardswish"]], "hardswish() (ivy.container method)": [[56, "ivy.Container.hardswish"]], "leaky_relu() (in module ivy)": [[57, "ivy.leaky_relu"], [493, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[57, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[57, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[58, "ivy.log_softmax"], [493, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[58, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[58, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[59, "ivy.mish"], [493, "ivy.mish"]], "mish() (ivy.array method)": [[59, "ivy.Array.mish"]], "mish() (ivy.container method)": [[59, "ivy.Container.mish"]], "relu() (in module ivy)": [[60, "ivy.relu"], [493, "ivy.relu"]], "relu() (ivy.array method)": [[60, "ivy.Array.relu"]], "relu() (ivy.container method)": [[60, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[61, "ivy.sigmoid"], [493, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[61, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[61, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[62, "ivy.softmax"], [493, "ivy.softmax"]], "softmax() (ivy.array method)": [[62, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[62, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[63, "ivy.softplus"], [493, "ivy.softplus"]], "softplus() (ivy.array method)": [[63, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[63, "ivy.Container.softplus"]], "cmp_is() (in module ivy)": [[64, "ivy.cmp_is"], [495, "ivy.cmp_is"]], "cmp_isnot() (in module ivy)": [[65, "ivy.cmp_isnot"], [495, "ivy.cmp_isnot"]], "for_loop() (in module ivy)": [[66, "ivy.for_loop"], [495, "ivy.for_loop"]], "if_else() (in module ivy)": [[67, "ivy.if_else"], [495, "ivy.if_else"]], "while_loop() (in module ivy)": [[68, "ivy.while_loop"], [495, "ivy.while_loop"]], "arange() (in module ivy)": [[69, "ivy.arange"], [496, "ivy.arange"]], "array() (in module ivy)": [[70, "ivy.array"], [496, "ivy.array"]], "asarray() (in module ivy)": [[71, "ivy.asarray"], [496, "ivy.asarray"]], "asarray() (ivy.array method)": [[71, "ivy.Array.asarray"]], "asarray() (ivy.container method)": [[71, "ivy.Container.asarray"]], "asarray_handle_nestable() (in module ivy)": [[72, "ivy.asarray_handle_nestable"], [496, "ivy.asarray_handle_nestable"]], "asarray_infer_device() (in module ivy)": [[73, "ivy.asarray_infer_device"], [496, "ivy.asarray_infer_device"]], "asarray_infer_dtype() (in module ivy)": [[74, "ivy.asarray_infer_dtype"], [496, "ivy.asarray_infer_dtype"]], "asarray_inputs_to_native_shapes() (in module ivy)": [[75, "ivy.asarray_inputs_to_native_shapes"], [496, "ivy.asarray_inputs_to_native_shapes"]], "asarray_to_native_arrays_and_back() (in module ivy)": [[76, "ivy.asarray_to_native_arrays_and_back"], [496, "ivy.asarray_to_native_arrays_and_back"]], "copy_array() (in module ivy)": [[77, "ivy.copy_array"], [496, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[77, "ivy.Array.copy_array"]], "copy_array() (ivy.container method)": [[77, "ivy.Container.copy_array"]], "empty() (in module ivy)": [[78, "ivy.empty"], [496, "ivy.empty"]], "empty_like() (in module ivy)": [[79, "ivy.empty_like"], [496, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[79, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[79, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[80, "ivy.eye"], [496, "ivy.eye"]], "from_dlpack() (in module ivy)": [[81, "ivy.from_dlpack"], [496, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[81, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[81, "ivy.Container.from_dlpack"]], "frombuffer() (in module ivy)": [[82, "ivy.frombuffer"], [496, "ivy.frombuffer"]], "frombuffer() (ivy.container method)": [[82, "ivy.Container.frombuffer"]], "full() (in module ivy)": [[83, "ivy.full"], [496, "ivy.full"]], "full_like() (in module ivy)": [[84, "ivy.full_like"], [496, "ivy.full_like"]], "full_like() (ivy.array method)": [[84, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[84, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[85, "ivy.linspace"], [496, "ivy.linspace"]], "linspace() (ivy.array method)": [[85, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[85, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[86, "ivy.logspace"], [496, "ivy.logspace"]], "logspace() (ivy.array method)": [[86, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[86, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[87, "ivy.meshgrid"], [496, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[87, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[87, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[88, "ivy.native_array"], [496, "ivy.native_array"]], "native_array() (ivy.array method)": [[88, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[88, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[89, "ivy.one_hot"], [496, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[89, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[89, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[90, "ivy.ones"], [496, "ivy.ones"]], "ones_like() (in module ivy)": [[91, "ivy.ones_like"], [496, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[91, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[91, "ivy.Container.ones_like"]], "tril() (in module ivy)": [[92, "ivy.tril"], [496, "ivy.tril"]], "tril() (ivy.array method)": [[92, "ivy.Array.tril"]], "tril() (ivy.container method)": [[92, "ivy.Container.tril"]], "triu() (in module ivy)": [[93, "ivy.triu"], [496, "ivy.triu"]], "triu() (ivy.array method)": [[93, "ivy.Array.triu"]], "triu() (ivy.container method)": [[93, "ivy.Container.triu"]], "triu_indices() (in module ivy)": [[94, "ivy.triu_indices"], [496, "ivy.triu_indices"]], "triu_indices() (ivy.container method)": [[94, "ivy.Container.triu_indices"]], "zeros() (in module ivy)": [[95, "ivy.zeros"], [496, "ivy.zeros"]], "zeros_like() (in module ivy)": [[96, "ivy.zeros_like"], [496, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[96, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[96, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[97, "ivy.as_ivy_dtype"], [497, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[98, "ivy.as_native_dtype"], [497, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[99, "ivy.astype"], [497, "ivy.astype"]], "astype() (ivy.array method)": [[99, "ivy.Array.astype"]], "astype() (ivy.container method)": [[99, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[100, "ivy.broadcast_arrays"], [497, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[100, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[100, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[101, "ivy.broadcast_to"], [497, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[101, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[101, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[102, "ivy.can_cast"], [497, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[102, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[102, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[103, "ivy.check_float"], [497, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[104, "ivy.closest_valid_dtype"], [497, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[105, "ivy.default_complex_dtype"], [497, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[106, "ivy.default_dtype"], [497, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[107, "ivy.default_float_dtype"], [497, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[108, "ivy.default_int_dtype"], [497, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[109, "ivy.default_uint_dtype"], [497, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[110, "ivy.dtype"], [497, "ivy.dtype"]], "dtype() (ivy.array method)": [[110, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[110, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[111, "ivy.dtype_bits"], [497, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[112, "ivy.finfo"], [497, "ivy.finfo"]], "finfo() (ivy.array method)": [[112, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[112, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[113, "ivy.function_supported_dtypes"], [497, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[114, "ivy.function_unsupported_dtypes"], [497, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[115, "ivy.iinfo"], [497, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[115, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[115, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[116, "ivy.infer_default_dtype"], [497, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[117, "ivy.invalid_dtype"], [497, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[118, "ivy.is_bool_dtype"], [497, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[118, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[118, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[119, "ivy.is_complex_dtype"], [497, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[119, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[120, "ivy.is_float_dtype"], [497, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[120, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[120, "ivy.Container.is_float_dtype"]], "is_hashable_dtype() (in module ivy)": [[121, "ivy.is_hashable_dtype"], [497, "ivy.is_hashable_dtype"]], "is_int_dtype() (in module ivy)": [[122, "ivy.is_int_dtype"], [497, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[122, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[122, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[123, "ivy.is_native_dtype"], [497, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[124, "ivy.is_uint_dtype"], [497, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[124, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[124, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[125, "ivy.promote_types"], [497, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[126, "ivy.promote_types_of_inputs"], [497, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[127, "ivy.result_type"], [497, "ivy.result_type"]], "result_type() (ivy.array method)": [[127, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[127, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[128, "ivy.set_default_complex_dtype"], [497, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[129, "ivy.set_default_dtype"], [497, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[130, "ivy.set_default_float_dtype"], [497, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[131, "ivy.set_default_int_dtype"], [497, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[132, "ivy.set_default_uint_dtype"], [497, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[133, "ivy.type_promote_arrays"], [497, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[134, "ivy.unset_default_complex_dtype"], [497, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[135, "ivy.unset_default_dtype"], [497, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[136, "ivy.unset_default_float_dtype"], [497, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[137, "ivy.unset_default_int_dtype"], [497, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[138, "ivy.unset_default_uint_dtype"], [497, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[139, "ivy.valid_dtype"], [497, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[140, "ivy.as_ivy_dev"], [498, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[141, "ivy.as_native_dev"], [498, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[142, "ivy.clear_cached_mem_on_dev"], [498, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[143, "ivy.default_device"], [498, "ivy.default_device"]], "dev() (in module ivy)": [[144, "ivy.dev"], [498, "ivy.dev"]], "dev() (ivy.array method)": [[144, "ivy.Array.dev"]], "dev() (ivy.container method)": [[144, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[145, "ivy.dev_util"], [498, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[146, "ivy.function_supported_devices"], [498, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[147, "ivy.function_unsupported_devices"], [498, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[148, "ivy.get_all_ivy_arrays_on_dev"], [498, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[149, "ivy.gpu_is_available"], [498, "ivy.gpu_is_available"]], "handle_soft_device_variable() (in module ivy)": [[150, "ivy.handle_soft_device_variable"], [498, "ivy.handle_soft_device_variable"]], "num_cpu_cores() (in module ivy)": [[151, "ivy.num_cpu_cores"], [498, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[152, "ivy.num_gpus"], [498, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[153, "ivy.num_ivy_arrays_on_dev"], [498, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[154, "ivy.percent_used_mem_on_dev"], [498, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[155, "ivy.print_all_ivy_arrays_on_dev"], [498, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[156, "ivy.set_default_device"], [498, "ivy.set_default_device"]], "set_soft_device_mode() (in module ivy)": [[157, "ivy.set_soft_device_mode"], [498, "ivy.set_soft_device_mode"]], "set_split_factor() (in module ivy)": [[158, "ivy.set_split_factor"], [498, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[159, "ivy.split_factor"], [498, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[160, "ivy.split_func_call"], [498, "ivy.split_func_call"]], "to_device() (in module ivy)": [[161, "ivy.to_device"], [498, "ivy.to_device"]], "to_device() (ivy.array method)": [[161, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[161, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[162, "ivy.total_mem_on_dev"], [498, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[163, "ivy.tpu_is_available"], [498, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[164, "ivy.unset_default_device"], [498, "ivy.unset_default_device"]], "unset_soft_device_mode() (in module ivy)": [[165, "ivy.unset_soft_device_mode"], [498, "ivy.unset_soft_device_mode"]], "used_mem_on_dev() (in module ivy)": [[166, "ivy.used_mem_on_dev"], [498, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[167, "ivy.abs"], [499, "ivy.abs"]], "abs() (ivy.array method)": [[167, "ivy.Array.abs"]], "abs() (ivy.container method)": [[167, "ivy.Container.abs"]], "acos() (in module ivy)": [[168, "ivy.acos"], [499, "ivy.acos"]], "acos() (ivy.array method)": [[168, "ivy.Array.acos"]], "acos() (ivy.container method)": [[168, "ivy.Container.acos"]], "acosh() (in module ivy)": [[169, "ivy.acosh"], [499, "ivy.acosh"]], "acosh() (ivy.array method)": [[169, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[169, "ivy.Container.acosh"]], "add() (in module ivy)": [[170, "ivy.add"], [499, "ivy.add"]], "add() (ivy.array method)": [[170, "ivy.Array.add"]], "add() (ivy.container method)": [[170, "ivy.Container.add"]], "angle() (in module ivy)": [[171, "ivy.angle"], [499, "ivy.angle"]], "angle() (ivy.array method)": [[171, "ivy.Array.angle"]], "angle() (ivy.container method)": [[171, "ivy.Container.angle"]], "asin() (in module ivy)": [[172, "ivy.asin"], [499, "ivy.asin"]], "asin() (ivy.array method)": [[172, "ivy.Array.asin"]], "asin() (ivy.container method)": [[172, "ivy.Container.asin"]], "asinh() (in module ivy)": [[173, "ivy.asinh"], [499, "ivy.asinh"]], "asinh() (ivy.array method)": [[173, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[173, "ivy.Container.asinh"]], "atan() (in module ivy)": [[174, "ivy.atan"], [499, "ivy.atan"]], "atan() (ivy.array method)": [[174, "ivy.Array.atan"]], "atan() (ivy.container method)": [[174, "ivy.Container.atan"]], "atan2() (in module ivy)": [[175, "ivy.atan2"], [499, "ivy.atan2"]], "atan2() (ivy.array method)": [[175, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[175, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[176, "ivy.atanh"], [499, "ivy.atanh"]], "atanh() (ivy.array method)": [[176, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[176, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[177, "ivy.bitwise_and"], [499, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[177, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[177, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[178, "ivy.bitwise_invert"], [499, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[178, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[178, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[179, "ivy.bitwise_left_shift"], [499, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[179, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[179, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[180, "ivy.bitwise_or"], [499, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[180, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[180, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[181, "ivy.bitwise_right_shift"], [499, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[181, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[181, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[182, "ivy.bitwise_xor"], [499, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[182, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[182, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[183, "ivy.ceil"], [499, "ivy.ceil"]], "ceil() (ivy.array method)": [[183, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[183, "ivy.Container.ceil"]], "cos() (in module ivy)": [[184, "ivy.cos"], [499, "ivy.cos"]], "cos() (ivy.array method)": [[184, "ivy.Array.cos"]], "cos() (ivy.container method)": [[184, "ivy.Container.cos"]], "cosh() (in module ivy)": [[185, "ivy.cosh"], [499, "ivy.cosh"]], "cosh() (ivy.array method)": [[185, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[185, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[186, "ivy.deg2rad"], [499, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[186, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[186, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[187, "ivy.divide"], [499, "ivy.divide"]], "divide() (ivy.array method)": [[187, "ivy.Array.divide"]], "divide() (ivy.container method)": [[187, "ivy.Container.divide"]], "equal() (in module ivy)": [[188, "ivy.equal"], [499, "ivy.equal"]], "equal() (ivy.array method)": [[188, "ivy.Array.equal"]], "equal() (ivy.container method)": [[188, "ivy.Container.equal"]], "erf() (in module ivy)": [[189, "ivy.erf"], [499, "ivy.erf"]], "erf() (ivy.array method)": [[189, "ivy.Array.erf"]], "erf() (ivy.container method)": [[189, "ivy.Container.erf"]], "exp() (in module ivy)": [[190, "ivy.exp"], [499, "ivy.exp"]], "exp() (ivy.array method)": [[190, "ivy.Array.exp"]], "exp() (ivy.container method)": [[190, "ivy.Container.exp"]], "exp2() (in module ivy)": [[191, "ivy.exp2"], [499, "ivy.exp2"]], "exp2() (ivy.array method)": [[191, "ivy.Array.exp2"]], "exp2() (ivy.container method)": [[191, "ivy.Container.exp2"]], "expm1() (in module ivy)": [[192, "ivy.expm1"], [499, "ivy.expm1"]], "expm1() (ivy.array method)": [[192, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[192, "ivy.Container.expm1"]], "floor() (in module ivy)": [[193, "ivy.floor"], [499, "ivy.floor"]], "floor() (ivy.array method)": [[193, "ivy.Array.floor"]], "floor() (ivy.container method)": [[193, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[194, "ivy.floor_divide"], [499, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[194, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[194, "ivy.Container.floor_divide"]], "fmin() (in module ivy)": [[195, "ivy.fmin"], [499, "ivy.fmin"]], "fmin() (ivy.array method)": [[195, "ivy.Array.fmin"]], "fmin() (ivy.container method)": [[195, "ivy.Container.fmin"]], "fmod() (in module ivy)": [[196, "ivy.fmod"], [499, "ivy.fmod"]], "fmod() (ivy.array method)": [[196, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[196, "ivy.Container.fmod"]], "gcd() (in module ivy)": [[197, "ivy.gcd"], [499, "ivy.gcd"]], "gcd() (ivy.array method)": [[197, "ivy.Array.gcd"]], "gcd() (ivy.container method)": [[197, "ivy.Container.gcd"]], "greater() (in module ivy)": [[198, "ivy.greater"], [499, "ivy.greater"]], "greater() (ivy.array method)": [[198, "ivy.Array.greater"]], "greater() (ivy.container method)": [[198, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[199, "ivy.greater_equal"], [499, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[199, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[199, "ivy.Container.greater_equal"]], "imag() (in module ivy)": [[200, "ivy.imag"], [499, "ivy.imag"]], "imag() (ivy.array method)": [[200, "ivy.Array.imag"]], "imag() (ivy.container method)": [[200, "ivy.Container.imag"]], "isfinite() (in module ivy)": [[201, "ivy.isfinite"], [499, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[201, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[201, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[202, "ivy.isinf"], [499, "ivy.isinf"]], "isinf() (ivy.array method)": [[202, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[202, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[203, "ivy.isnan"], [499, "ivy.isnan"]], "isnan() (ivy.array method)": [[203, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[203, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[204, "ivy.isreal"], [499, "ivy.isreal"]], "isreal() (ivy.array method)": [[204, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[204, "ivy.Container.isreal"]], "lcm() (in module ivy)": [[205, "ivy.lcm"], [499, "ivy.lcm"]], "lcm() (ivy.array method)": [[205, "ivy.Array.lcm"]], "lcm() (ivy.container method)": [[205, "ivy.Container.lcm"]], "less() (in module ivy)": [[206, "ivy.less"], [499, "ivy.less"]], "less() (ivy.array method)": [[206, "ivy.Array.less"]], "less() (ivy.container method)": [[206, "ivy.Container.less"]], "less_equal() (in module ivy)": [[207, "ivy.less_equal"], [499, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[207, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[207, "ivy.Container.less_equal"]], "log() (in module ivy)": [[208, "ivy.log"], [499, "ivy.log"]], "log() (ivy.array method)": [[208, "ivy.Array.log"]], "log() (ivy.container method)": [[208, "ivy.Container.log"]], "log10() (in module ivy)": [[209, "ivy.log10"], [499, "ivy.log10"]], "log10() (ivy.array method)": [[209, "ivy.Array.log10"]], "log10() (ivy.container method)": [[209, "ivy.Container.log10"]], "log1p() (in module ivy)": [[210, "ivy.log1p"], [499, "ivy.log1p"]], "log1p() (ivy.array method)": [[210, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[210, "ivy.Container.log1p"]], "log2() (in module ivy)": [[211, "ivy.log2"], [499, "ivy.log2"]], "log2() (ivy.array method)": [[211, "ivy.Array.log2"]], "log2() (ivy.container method)": [[211, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[212, "ivy.logaddexp"], [499, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[212, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[212, "ivy.Container.logaddexp"]], "logaddexp2() (in module ivy)": [[213, "ivy.logaddexp2"], [499, "ivy.logaddexp2"]], "logaddexp2() (ivy.array method)": [[213, "ivy.Array.logaddexp2"]], "logaddexp2() (ivy.container method)": [[213, "ivy.Container.logaddexp2"]], "logical_and() (in module ivy)": [[214, "ivy.logical_and"], [499, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[214, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[214, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[215, "ivy.logical_not"], [499, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[215, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[215, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[216, "ivy.logical_or"], [499, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[216, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[216, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[217, "ivy.logical_xor"], [499, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[217, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[217, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[218, "ivy.maximum"], [499, "ivy.maximum"]], "maximum() (ivy.array method)": [[218, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[218, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[219, "ivy.minimum"], [499, "ivy.minimum"]], "minimum() (ivy.array method)": [[219, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[219, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[220, "ivy.multiply"], [499, "ivy.multiply"]], "multiply() (ivy.array method)": [[220, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[220, "ivy.Container.multiply"]], "nan_to_num() (in module ivy)": [[221, "ivy.nan_to_num"], [499, "ivy.nan_to_num"]], "nan_to_num() (ivy.array method)": [[221, "ivy.Array.nan_to_num"]], "nan_to_num() (ivy.container method)": [[221, "ivy.Container.nan_to_num"]], "negative() (in module ivy)": [[222, "ivy.negative"], [499, "ivy.negative"]], "negative() (ivy.array method)": [[222, "ivy.Array.negative"]], "negative() (ivy.container method)": [[222, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[223, "ivy.not_equal"], [499, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[223, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[223, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[224, "ivy.positive"], [499, "ivy.positive"]], "positive() (ivy.array method)": [[224, "ivy.Array.positive"]], "positive() (ivy.container method)": [[224, "ivy.Container.positive"]], "pow() (in module ivy)": [[225, "ivy.pow"], [499, "ivy.pow"]], "pow() (ivy.array method)": [[225, "ivy.Array.pow"]], "pow() (ivy.container method)": [[225, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[226, "ivy.rad2deg"], [499, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[226, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[226, "ivy.Container.rad2deg"]], "real() (in module ivy)": [[227, "ivy.real"], [499, "ivy.real"]], "real() (ivy.array method)": [[227, "ivy.Array.real"]], "real() (ivy.container method)": [[227, "ivy.Container.real"]], "reciprocal() (in module ivy)": [[228, "ivy.reciprocal"], [499, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[228, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[228, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[229, "ivy.remainder"], [499, "ivy.remainder"]], "remainder() (ivy.array method)": [[229, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[229, "ivy.Container.remainder"]], "round() (in module ivy)": [[230, "ivy.round"], [499, "ivy.round"]], "round() (ivy.array method)": [[230, "ivy.Array.round"]], "round() (ivy.container method)": [[230, "ivy.Container.round"]], "sign() (in module ivy)": [[231, "ivy.sign"], [499, "ivy.sign"]], "sign() (ivy.array method)": [[231, "ivy.Array.sign"]], "sign() (ivy.container method)": [[231, "ivy.Container.sign"]], "sin() (in module ivy)": [[232, "ivy.sin"], [499, "ivy.sin"]], "sin() (ivy.array method)": [[232, "ivy.Array.sin"]], "sin() (ivy.container method)": [[232, "ivy.Container.sin"]], "sinh() (in module ivy)": [[233, "ivy.sinh"], [499, "ivy.sinh"]], "sinh() (ivy.array method)": [[233, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[233, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[234, "ivy.sqrt"], [499, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[234, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[234, "ivy.Container.sqrt"]], "square() (in module ivy)": [[235, "ivy.square"], [499, "ivy.square"]], "square() (ivy.array method)": [[235, "ivy.Array.square"]], "square() (ivy.container method)": [[235, "ivy.Container.square"]], "subtract() (in module ivy)": [[236, "ivy.subtract"], [499, "ivy.subtract"]], "subtract() (ivy.array method)": [[236, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[236, "ivy.Container.subtract"]], "tan() (in module ivy)": [[237, "ivy.tan"], [499, "ivy.tan"]], "tan() (ivy.array method)": [[237, "ivy.Array.tan"]], "tan() (ivy.container method)": [[237, "ivy.Container.tan"]], "tanh() (in module ivy)": [[238, "ivy.tanh"], [499, "ivy.tanh"]], "tanh() (ivy.array method)": [[238, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[238, "ivy.Container.tanh"]], "trapz() (in module ivy)": [[239, "ivy.trapz"], [499, "ivy.trapz"]], "trapz() (ivy.array method)": [[239, "ivy.Array.trapz"]], "trapz() (ivy.container method)": [[239, "ivy.Container.trapz"]], "trunc() (in module ivy)": [[240, "ivy.trunc"], [499, "ivy.trunc"]], "trunc() (ivy.array method)": [[240, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[240, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[241, "ivy.trunc_divide"], [499, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[241, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[241, "ivy.Container.trunc_divide"]], "elu() (in module ivy)": [[242, "ivy.elu"], [286, "ivy.elu"]], "elu() (ivy.array method)": [[242, "ivy.Array.elu"]], "elu() (ivy.container method)": [[242, "ivy.Container.elu"]], "logit() (in module ivy)": [[243, "ivy.logit"], [286, "ivy.logit"]], "logit() (ivy.array method)": [[243, "ivy.Array.logit"]], "logit() (ivy.container method)": [[243, "ivy.Container.logit"]], "logsigmoid() (in module ivy)": [[244, "ivy.logsigmoid"], [286, "ivy.logsigmoid"]], "logsigmoid() (ivy.array method)": [[244, "ivy.Array.logsigmoid"]], "logsigmoid() (ivy.container method)": [[244, "ivy.Container.logsigmoid"]], "prelu() (in module ivy)": [[245, "ivy.prelu"], [286, "ivy.prelu"]], "prelu() (ivy.array method)": [[245, "ivy.Array.prelu"]], "prelu() (ivy.container method)": [[245, "ivy.Container.prelu"]], "relu6() (in module ivy)": [[246, "ivy.relu6"], [286, "ivy.relu6"]], "relu6() (ivy.array method)": [[246, "ivy.Array.relu6"]], "relu6() (ivy.container method)": [[246, "ivy.Container.relu6"]], "selu() (in module ivy)": [[247, "ivy.selu"], [286, "ivy.selu"]], "selu() (ivy.array method)": [[247, "ivy.Array.selu"]], "selu() (ivy.container method)": [[247, "ivy.Container.selu"]], "silu() (in module ivy)": [[248, "ivy.silu"], [286, "ivy.silu"]], "silu() (ivy.array method)": [[248, "ivy.Array.silu"]], "silu() (ivy.container method)": [[248, "ivy.Container.silu"]], "thresholded_relu() (in module ivy)": [[249, "ivy.thresholded_relu"], [286, "ivy.thresholded_relu"]], "thresholded_relu() (ivy.array method)": [[249, "ivy.Array.thresholded_relu"]], "thresholded_relu() (ivy.container method)": [[249, "ivy.Container.thresholded_relu"]], "eye_like() (in module ivy)": [[250, "ivy.eye_like"], [288, "ivy.eye_like"]], "eye_like() (ivy.array method)": [[250, "ivy.Array.eye_like"]], "eye_like() (ivy.container method)": [[250, "ivy.Container.eye_like"]], "hamming_window() (in module ivy)": [[251, "ivy.hamming_window"], [288, "ivy.hamming_window"]], "hamming_window() (ivy.container method)": [[251, "ivy.Container.hamming_window"]], "hann_window() (in module ivy)": [[252, "ivy.hann_window"], [288, "ivy.hann_window"]], "hann_window() (ivy.container method)": [[252, "ivy.Container.hann_window"]], "indices() (in module ivy)": [[253, "ivy.indices"], [288, "ivy.indices"]], "kaiser_bessel_derived_window() (in module ivy)": [[254, "ivy.kaiser_bessel_derived_window"], [288, "ivy.kaiser_bessel_derived_window"]], "kaiser_bessel_derived_window() (ivy.container method)": [[254, "ivy.Container.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy)": [[255, "ivy.kaiser_window"], [288, "ivy.kaiser_window"]], "kaiser_window() (ivy.container method)": [[255, "ivy.Container.kaiser_window"]], "ndenumerate() (in module ivy)": [[256, "ivy.ndenumerate"], [288, "ivy.ndenumerate"]], "ndindex() (in module ivy)": [[257, "ivy.ndindex"], [288, "ivy.ndindex"]], "tril_indices() (in module ivy)": [[258, "ivy.tril_indices"], [288, "ivy.tril_indices"]], "tril_indices() (ivy.container method)": [[258, "ivy.Container.tril_indices"]], "unsorted_segment_min() (in module ivy)": [[259, "ivy.unsorted_segment_min"], [288, "ivy.unsorted_segment_min"]], "unsorted_segment_min() (ivy.array method)": [[259, "ivy.Array.unsorted_segment_min"]], "unsorted_segment_min() (ivy.container method)": [[259, "ivy.Container.unsorted_segment_min"]], "vorbis_window() (in module ivy)": [[260, "ivy.vorbis_window"], [288, "ivy.vorbis_window"]], "vorbis_window() (ivy.container method)": [[260, "ivy.Container.vorbis_window"]], "allclose() (in module ivy)": [[261, "ivy.allclose"], [291, "ivy.allclose"]], "allclose() (ivy.array method)": [[261, "ivy.Array.allclose"]], "allclose() (ivy.container method)": [[261, "ivy.Container.allclose"]], "binarizer() (in module ivy)": [[262, "ivy.binarizer"], [291, "ivy.binarizer"]], "binarizer() (ivy.array method)": [[262, "ivy.Array.binarizer"]], "binarizer() (ivy.container method)": [[262, "ivy.Container.binarizer"]], "conj() (in module ivy)": [[263, "ivy.conj"], [291, "ivy.conj"]], "conj() (ivy.array method)": [[263, "ivy.Array.conj"]], "conj() (ivy.container method)": [[263, "ivy.Container.conj"]], "copysign() (in module ivy)": [[264, "ivy.copysign"], [291, "ivy.copysign"]], "copysign() (ivy.array method)": [[264, "ivy.Array.copysign"]], "copysign() (ivy.container method)": [[264, "ivy.Container.copysign"]], "count_nonzero() (in module ivy)": [[265, "ivy.count_nonzero"], [291, "ivy.count_nonzero"]], "count_nonzero() (ivy.array method)": [[265, "ivy.Array.count_nonzero"]], "count_nonzero() (ivy.container method)": [[265, "ivy.Container.count_nonzero"]], "diff() (in module ivy)": [[266, "ivy.diff"], [291, "ivy.diff"]], "diff() (ivy.array method)": [[266, "ivy.Array.diff"]], "diff() (ivy.container method)": [[266, "ivy.Container.diff"]], "fix() (in module ivy)": [[267, "ivy.fix"], [291, "ivy.fix"]], "fix() (ivy.array method)": [[267, "ivy.Array.fix"]], "fix() (ivy.container method)": [[267, "ivy.Container.fix"]], "float_power() (in module ivy)": [[268, "ivy.float_power"], [291, "ivy.float_power"]], "float_power() (ivy.array method)": [[268, "ivy.Array.float_power"]], "float_power() (ivy.container method)": [[268, "ivy.Container.float_power"]], "fmax() (in module ivy)": [[269, "ivy.fmax"], [291, "ivy.fmax"]], "fmax() (ivy.array method)": [[269, "ivy.Array.fmax"]], "fmax() (ivy.container method)": [[269, "ivy.Container.fmax"]], "frexp() (in module ivy)": [[270, "ivy.frexp"], [291, "ivy.frexp"]], "frexp() (ivy.array method)": [[270, "ivy.Array.frexp"]], "frexp() (ivy.container method)": [[270, "ivy.Container.frexp"]], "gradient() (in module ivy)": [[271, "ivy.gradient"], [291, "ivy.gradient"]], "gradient() (ivy.array method)": [[271, "ivy.Array.gradient"]], "gradient() (ivy.container method)": [[271, "ivy.Container.gradient"]], "hypot() (in module ivy)": [[272, "ivy.hypot"], [291, "ivy.hypot"]], "hypot() (ivy.array method)": [[272, "ivy.Array.hypot"]], "hypot() (ivy.container method)": [[272, "ivy.Container.hypot"]], "isclose() (in module ivy)": [[273, "ivy.isclose"], [291, "ivy.isclose"]], "isclose() (ivy.array method)": [[273, "ivy.Array.isclose"]], "isclose() (ivy.container method)": [[273, "ivy.Container.isclose"]], "ldexp() (in module ivy)": [[274, "ivy.ldexp"], [291, "ivy.ldexp"]], "ldexp() (ivy.array method)": [[274, "ivy.Array.ldexp"]], "ldexp() (ivy.container method)": [[274, "ivy.Container.ldexp"]], "lerp() (in module ivy)": [[275, "ivy.lerp"], [291, "ivy.lerp"]], "lerp() (ivy.array method)": [[275, "ivy.Array.lerp"]], "lerp() (ivy.container method)": [[275, "ivy.Container.lerp"]], "lgamma() (in module ivy)": [[276, "ivy.lgamma"], [291, "ivy.lgamma"]], "lgamma() (ivy.array method)": [[276, "ivy.Array.lgamma"]], "modf() (in module ivy)": [[277, "ivy.modf"], [291, "ivy.modf"]], "modf() (ivy.array method)": [[277, "ivy.Array.modf"]], "modf() (ivy.container method)": [[277, "ivy.Container.modf"]], "nansum() (in module ivy)": [[278, "ivy.nansum"], [291, "ivy.nansum"]], "nansum() (ivy.array method)": [[278, "ivy.Array.nansum"]], "nansum() (ivy.container method)": [[278, "ivy.Container.nansum"]], "nextafter() (in module ivy)": [[279, "ivy.nextafter"], [291, "ivy.nextafter"]], "nextafter() (ivy.array method)": [[279, "ivy.Array.nextafter"]], "nextafter() (ivy.container method)": [[279, "ivy.Container.nextafter"]], "signbit() (in module ivy)": [[280, "ivy.signbit"], [291, "ivy.signbit"]], "signbit() (ivy.array method)": [[280, "ivy.Array.signbit"]], "signbit() (ivy.container method)": [[280, "ivy.Container.signbit"]], "sinc() (in module ivy)": [[281, "ivy.sinc"], [291, "ivy.sinc"]], "sinc() (ivy.array method)": [[281, "ivy.Array.sinc"]], "sinc() (ivy.container method)": [[281, "ivy.Container.sinc"]], "xlogy() (in module ivy)": [[282, "ivy.xlogy"], [291, "ivy.xlogy"]], "xlogy() (ivy.array method)": [[282, "ivy.Array.xlogy"]], "xlogy() (ivy.container method)": [[282, "ivy.Container.xlogy"]], "zeta() (in module ivy)": [[283, "ivy.zeta"], [291, "ivy.zeta"]], "zeta() (ivy.array method)": [[283, "ivy.Array.zeta"]], "zeta() (ivy.container method)": [[283, "ivy.Container.zeta"]], "reduce() (in module ivy)": [[284, "ivy.reduce"], [292, "ivy.reduce"]], "reduce() (ivy.array method)": [[284, "ivy.Array.reduce"]], "reduce() (ivy.container method)": [[284, "ivy.Container.reduce"]], "bind_custom_gradient_function() (in module ivy)": [[285, "ivy.bind_custom_gradient_function"], [293, "ivy.bind_custom_gradient_function"]], "ivy.functional.ivy.experimental.activations": [[286, "module-ivy.functional.ivy.experimental.activations"]], "ivy.functional.ivy.experimental.constants": [[287, "module-ivy.functional.ivy.experimental.constants"]], "ivy.functional.ivy.experimental.creation": [[288, "module-ivy.functional.ivy.experimental.creation"]], "ivy.functional.ivy.experimental.data_type": [[289, "module-ivy.functional.ivy.experimental.data_type"]], "ivy.functional.ivy.experimental.device": [[290, "module-ivy.functional.ivy.experimental.device"]], "ivy.functional.ivy.experimental.elementwise": [[291, "module-ivy.functional.ivy.experimental.elementwise"]], "ivy.functional.ivy.experimental.general": [[292, "module-ivy.functional.ivy.experimental.general"]], "ivy.functional.ivy.experimental.gradients": [[293, "module-ivy.functional.ivy.experimental.gradients"]], "adaptive_avg_pool1d() (in module ivy)": [[294, "ivy.adaptive_avg_pool1d"], [308, "ivy.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy)": [[294, "ivy.adaptive_avg_pool2d"], [309, "ivy.adaptive_avg_pool2d"]], "area_interpolate() (in module ivy)": [[294, "ivy.area_interpolate"], [310, "ivy.area_interpolate"]], "avg_pool1d() (in module ivy)": [[294, "ivy.avg_pool1d"], [311, "ivy.avg_pool1d"]], "avg_pool2d() (in module ivy)": [[294, "ivy.avg_pool2d"], [312, "ivy.avg_pool2d"]], "avg_pool3d() (in module ivy)": [[294, "ivy.avg_pool3d"], [313, "ivy.avg_pool3d"]], "dct() (in module ivy)": [[294, "ivy.dct"], [314, "ivy.dct"]], "dft() (in module ivy)": [[294, "ivy.dft"], [315, "ivy.dft"]], "dropout1d() (in module ivy)": [[294, "ivy.dropout1d"], [316, "ivy.dropout1d"]], "dropout2d() (in module ivy)": [[294, "ivy.dropout2d"], [317, "ivy.dropout2d"]], "dropout3d() (in module ivy)": [[294, "ivy.dropout3d"], [318, "ivy.dropout3d"]], "embedding() (in module ivy)": [[294, "ivy.embedding"], [319, "ivy.embedding"]], "fft() (in module ivy)": [[294, "ivy.fft"], [320, "ivy.fft"]], "fft2() (in module ivy)": [[294, "ivy.fft2"], [321, "ivy.fft2"]], "generate_einsum_equation() (in module ivy)": [[294, "ivy.generate_einsum_equation"], [322, "ivy.generate_einsum_equation"]], "get_interpolate_kernel() (in module ivy)": [[294, "ivy.get_interpolate_kernel"], [323, "ivy.get_interpolate_kernel"]], "idct() (in module ivy)": [[294, "ivy.idct"], [324, "ivy.idct"]], "ifft() (in module ivy)": [[294, "ivy.ifft"], [325, "ivy.ifft"]], "ifftn() (in module ivy)": [[294, "ivy.ifftn"], [326, "ivy.ifftn"]], "interp() (in module ivy)": [[294, "ivy.interp"], [327, "ivy.interp"]], "interpolate() (in module ivy)": [[294, "ivy.interpolate"], [328, "ivy.interpolate"]], "ivy.functional.ivy.experimental.layers": [[294, "module-ivy.functional.ivy.experimental.layers"]], "max_pool1d() (in module ivy)": [[294, "ivy.max_pool1d"], [329, "ivy.max_pool1d"]], "max_pool2d() (in module ivy)": [[294, "ivy.max_pool2d"], [330, "ivy.max_pool2d"]], "max_pool3d() (in module ivy)": [[294, "ivy.max_pool3d"], [331, "ivy.max_pool3d"]], "max_unpool1d() (in module ivy)": [[294, "ivy.max_unpool1d"], [332, "ivy.max_unpool1d"]], "nearest_interpolate() (in module ivy)": [[294, "ivy.nearest_interpolate"], [333, "ivy.nearest_interpolate"]], "pool() (in module ivy)": [[294, "ivy.pool"], [334, "ivy.pool"]], "reduce_window() (in module ivy)": [[294, "ivy.reduce_window"], [335, "ivy.reduce_window"]], "rfftn() (in module ivy)": [[294, "ivy.rfftn"], [336, "ivy.rfftn"]], "adjoint() (in module ivy)": [[295, "ivy.adjoint"], [337, "ivy.adjoint"]], "cond() (in module ivy)": [[295, "ivy.cond"], [338, "ivy.cond"]], "diagflat() (in module ivy)": [[295, "ivy.diagflat"], [339, "ivy.diagflat"]], "eig() (in module ivy)": [[295, "ivy.eig"], [340, "ivy.eig"], [504, "ivy.eig"], [536, "ivy.eig"]], "eigh_tridiagonal() (in module ivy)": [[295, "ivy.eigh_tridiagonal"], [341, "ivy.eigh_tridiagonal"]], "eigvals() (in module ivy)": [[295, "ivy.eigvals"], [342, "ivy.eigvals"]], "ivy.functional.ivy.experimental.linear_algebra": [[295, "module-ivy.functional.ivy.experimental.linear_algebra"]], "kron() (in module ivy)": [[295, "ivy.kron"], [343, "ivy.kron"]], "matrix_exp() (in module ivy)": [[295, "ivy.matrix_exp"], [344, "ivy.matrix_exp"]], "multi_dot() (in module ivy)": [[295, "ivy.multi_dot"], [345, "ivy.multi_dot"]], "ivy.functional.ivy.experimental.losses": [[296, "module-ivy.functional.ivy.experimental.losses"]], "log_poisson_loss() (in module ivy)": [[296, "ivy.log_poisson_loss"], [346, "ivy.log_poisson_loss"]], "as_strided() (in module ivy)": [[297, "ivy.as_strided"], [347, "ivy.as_strided"]], "associative_scan() (in module ivy)": [[297, "ivy.associative_scan"], [348, "ivy.associative_scan"]], "atleast_1d() (in module ivy)": [[297, "ivy.atleast_1d"], [349, "ivy.atleast_1d"]], "atleast_2d() (in module ivy)": [[297, "ivy.atleast_2d"], [350, "ivy.atleast_2d"]], "atleast_3d() (in module ivy)": [[297, "ivy.atleast_3d"], [351, "ivy.atleast_3d"]], "broadcast_shapes() (in module ivy)": [[297, "ivy.broadcast_shapes"], [352, "ivy.broadcast_shapes"]], "concat_from_sequence() (in module ivy)": [[297, "ivy.concat_from_sequence"], [353, "ivy.concat_from_sequence"]], "dsplit() (in module ivy)": [[297, "ivy.dsplit"], [354, "ivy.dsplit"]], "dstack() (in module ivy)": [[297, "ivy.dstack"], [355, "ivy.dstack"]], "expand() (in module ivy)": [[297, "ivy.expand"], [356, "ivy.expand"]], "fill_diagonal() (in module ivy)": [[297, "ivy.fill_diagonal"], [357, "ivy.fill_diagonal"]], "flatten() (in module ivy)": [[297, "ivy.flatten"], [358, "ivy.flatten"]], "fliplr() (in module ivy)": [[297, "ivy.fliplr"], [359, "ivy.fliplr"]], "flipud() (in module ivy)": [[297, "ivy.flipud"], [360, "ivy.flipud"]], "heaviside() (in module ivy)": [[297, "ivy.heaviside"], [361, "ivy.heaviside"]], "hsplit() (in module ivy)": [[297, "ivy.hsplit"], [362, "ivy.hsplit"]], "hstack() (in module ivy)": [[297, "ivy.hstack"], [363, "ivy.hstack"]], "i0() (in module ivy)": [[297, "ivy.i0"], [364, "ivy.i0"]], "ivy.functional.ivy.experimental.manipulation": [[297, "module-ivy.functional.ivy.experimental.manipulation"]], "moveaxis() (in module ivy)": [[297, "ivy.moveaxis"], [365, "ivy.moveaxis"]], "pad() (in module ivy)": [[297, "ivy.pad"], [366, "ivy.pad"]], "put_along_axis() (in module ivy)": [[297, "ivy.put_along_axis"], [367, "ivy.put_along_axis"]], "rot90() (in module ivy)": [[297, "ivy.rot90"], [368, "ivy.rot90"]], "take_along_axis() (in module ivy)": [[297, "ivy.take_along_axis"], [369, "ivy.take_along_axis"]], "top_k() (in module ivy)": [[297, "ivy.top_k"], [370, "ivy.top_k"]], "unique_consecutive() (in module ivy)": [[297, "ivy.unique_consecutive"], [371, "ivy.unique_consecutive"]], "vsplit() (in module ivy)": [[297, "ivy.vsplit"], [372, "ivy.vsplit"]], "vstack() (in module ivy)": [[297, "ivy.vstack"], [373, "ivy.vstack"]], "ivy.functional.ivy.experimental.meta": [[298, "module-ivy.functional.ivy.experimental.meta"]], "ivy.functional.ivy.experimental.nest": [[299, "module-ivy.functional.ivy.experimental.nest"]], "batch_norm() (in module ivy)": [[300, "ivy.batch_norm"], [374, "ivy.batch_norm"]], "group_norm() (in module ivy)": [[300, "ivy.group_norm"], [375, "ivy.group_norm"]], "instance_norm() (in module ivy)": [[300, "ivy.instance_norm"], [376, "ivy.instance_norm"]], "ivy.functional.ivy.experimental.norms": [[300, "module-ivy.functional.ivy.experimental.norms"]], "l1_normalize() (in module ivy)": [[300, "ivy.l1_normalize"], [377, "ivy.l1_normalize"]], "l2_normalize() (in module ivy)": [[300, "ivy.l2_normalize"], [378, "ivy.l2_normalize"]], "lp_normalize() (in module ivy)": [[300, "ivy.lp_normalize"], [379, "ivy.lp_normalize"]], "bernoulli() (in module ivy)": [[301, "ivy.bernoulli"], [380, "ivy.bernoulli"]], "beta() (in module ivy)": [[301, "ivy.beta"], [381, "ivy.beta"]], "dirichlet() (in module ivy)": [[301, "ivy.dirichlet"], [382, "ivy.dirichlet"]], "gamma() (in module ivy)": [[301, "ivy.gamma"], [383, "ivy.gamma"]], "ivy.functional.ivy.experimental.random": [[301, "module-ivy.functional.ivy.experimental.random"]], "poisson() (in module ivy)": [[301, "ivy.poisson"], [384, "ivy.poisson"]], "ivy.functional.ivy.experimental.searching": [[302, "module-ivy.functional.ivy.experimental.searching"]], "unravel_index() (in module ivy)": [[302, "ivy.unravel_index"], [385, "ivy.unravel_index"]], "ivy.functional.ivy.experimental.set": [[303, "module-ivy.functional.ivy.experimental.set"]], "invert_permutation() (in module ivy)": [[304, "ivy.invert_permutation"], [386, "ivy.invert_permutation"]], "ivy.functional.ivy.experimental.sorting": [[304, "module-ivy.functional.ivy.experimental.sorting"]], "lexsort() (in module ivy)": [[304, "ivy.lexsort"], [387, "ivy.lexsort"]], "nativesparsearray (class in ivy)": [[305, "ivy.NativeSparseArray"]], "sparsearray (class in ivy)": [[305, "ivy.SparseArray"]], "is_ivy_sparse_array() (in module ivy)": [[305, "ivy.is_ivy_sparse_array"], [388, "ivy.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy)": [[305, "ivy.is_native_sparse_array"], [389, "ivy.is_native_sparse_array"]], "ivy.functional.ivy.experimental.sparse_array": [[305, "module-ivy.functional.ivy.experimental.sparse_array"]], "native_sparse_array() (in module ivy)": [[305, "ivy.native_sparse_array"], [390, "ivy.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy)": [[305, "ivy.native_sparse_array_to_indices_values_and_shape"], [391, "ivy.native_sparse_array_to_indices_values_and_shape"]], "bincount() (in module ivy)": [[306, "ivy.bincount"], [392, "ivy.bincount"]], "corrcoef() (in module ivy)": [[306, "ivy.corrcoef"], [393, "ivy.corrcoef"]], "cov() (in module ivy)": [[306, "ivy.cov"], [394, "ivy.cov"]], "cummax() (in module ivy)": [[306, "ivy.cummax"], [395, "ivy.cummax"]], "cummin() (in module ivy)": [[306, "ivy.cummin"], [396, "ivy.cummin"]], "histogram() (in module ivy)": [[306, "ivy.histogram"], [397, "ivy.histogram"]], "igamma() (in module ivy)": [[306, "ivy.igamma"], [398, "ivy.igamma"]], "ivy.functional.ivy.experimental.statistical": [[306, "module-ivy.functional.ivy.experimental.statistical"]], "median() (in module ivy)": [[306, "ivy.median"], [399, "ivy.median"]], "nanmean() (in module ivy)": [[306, "ivy.nanmean"], [400, "ivy.nanmean"]], "nanmedian() (in module ivy)": [[306, "ivy.nanmedian"], [401, "ivy.nanmedian"]], "nanquantile() (in module ivy)": [[306, "ivy.nanquantile"], [402, "ivy.nanquantile"]], "quantile() (in module ivy)": [[306, "ivy.quantile"], [403, "ivy.quantile"]], "ivy.functional.ivy.experimental.utility": [[307, "module-ivy.functional.ivy.experimental.utility"]], "adaptive_avg_pool1d() (ivy.array method)": [[308, "ivy.Array.adaptive_avg_pool1d"]], "adaptive_avg_pool1d() (ivy.container method)": [[308, "ivy.Container.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.array method)": [[309, "ivy.Array.adaptive_avg_pool2d"]], "adaptive_avg_pool2d() (ivy.container method)": [[309, "ivy.Container.adaptive_avg_pool2d"]], "avg_pool1d() (ivy.array method)": [[311, "ivy.Array.avg_pool1d"]], "avg_pool1d() (ivy.container method)": [[311, "ivy.Container.avg_pool1d"]], "avg_pool2d() (ivy.array method)": [[312, "ivy.Array.avg_pool2d"]], "avg_pool2d() (ivy.container method)": [[312, "ivy.Container.avg_pool2d"]], "avg_pool3d() (ivy.array method)": [[313, "ivy.Array.avg_pool3d"]], "avg_pool3d() (ivy.container method)": [[313, "ivy.Container.avg_pool3d"]], "dct() (ivy.array method)": [[314, "ivy.Array.dct"]], "dct() (ivy.container method)": [[314, "ivy.Container.dct"]], "dft() (ivy.array method)": [[315, "ivy.Array.dft"]], "dft() (ivy.container method)": [[315, "ivy.Container.dft"]], "dropout1d() (ivy.array method)": [[316, "ivy.Array.dropout1d"]], "dropout1d() (ivy.container method)": [[316, "ivy.Container.dropout1d"]], "dropout2d() (ivy.array method)": [[317, "ivy.Array.dropout2d"]], "dropout2d() (ivy.container method)": [[317, "ivy.Container.dropout2d"]], "dropout3d() (ivy.array method)": [[318, "ivy.Array.dropout3d"]], "dropout3d() (ivy.container method)": [[318, "ivy.Container.dropout3d"]], "embedding() (ivy.array method)": [[319, "ivy.Array.embedding"]], "embedding() (ivy.container method)": [[319, "ivy.Container.embedding"]], "fft() (ivy.array method)": [[320, "ivy.Array.fft"]], "fft() (ivy.container method)": [[320, "ivy.Container.fft"]], "fft2() (ivy.array method)": [[321, "ivy.Array.fft2"]], "idct() (ivy.array method)": [[324, "ivy.Array.idct"]], "idct() (ivy.container method)": [[324, "ivy.Container.idct"]], "ifft() (ivy.array method)": [[325, "ivy.Array.ifft"]], "ifft() (ivy.container method)": [[325, "ivy.Container.ifft"]], "ifftn() (ivy.array method)": [[326, "ivy.Array.ifftn"]], "ifftn() (ivy.container method)": [[326, "ivy.Container.ifftn"]], "interpolate() (ivy.array method)": [[328, "ivy.Array.interpolate"]], "interpolate() (ivy.container method)": [[328, "ivy.Container.interpolate"]], "max_pool1d() (ivy.array method)": [[329, "ivy.Array.max_pool1d"]], "max_pool1d() (ivy.container method)": [[329, "ivy.Container.max_pool1d"]], "max_pool2d() (ivy.array method)": [[330, "ivy.Array.max_pool2d"]], "max_pool2d() (ivy.container method)": [[330, "ivy.Container.max_pool2d"]], "max_pool3d() (ivy.array method)": [[331, "ivy.Array.max_pool3d"]], "max_pool3d() (ivy.container method)": [[331, "ivy.Container.max_pool3d"]], "reduce_window() (ivy.array method)": [[335, "ivy.Array.reduce_window"]], "reduce_window() (ivy.container method)": [[335, "ivy.Container.reduce_window"]], "rfftn() (ivy.array method)": [[336, "ivy.Array.rfftn"]], "rfftn() (ivy.container method)": [[336, "ivy.Container.rfftn"]], "adjoint() (ivy.array method)": [[337, "ivy.Array.adjoint"]], "adjoint() (ivy.container method)": [[337, "ivy.Container.adjoint"]], "cond() (ivy.array method)": [[338, "ivy.Array.cond"]], "cond() (ivy.container method)": [[338, "ivy.Container.cond"]], "diagflat() (ivy.array method)": [[339, "ivy.Array.diagflat"]], "diagflat() (ivy.container method)": [[339, "ivy.Container.diagflat"]], "eig() (ivy.array method)": [[340, "ivy.Array.eig"], [536, "ivy.Array.eig"]], "eig() (ivy.container method)": [[340, "ivy.Container.eig"], [536, "ivy.Container.eig"]], "eigh_tridiagonal() (ivy.array method)": [[341, "ivy.Array.eigh_tridiagonal"]], "eigh_tridiagonal() (ivy.container method)": [[341, "ivy.Container.eigh_tridiagonal"]], "eigvals() (ivy.array method)": [[342, "ivy.Array.eigvals"]], "eigvals() (ivy.container method)": [[342, "ivy.Container.eigvals"]], "kron() (ivy.array method)": [[343, "ivy.Array.kron"]], "kron() (ivy.container method)": [[343, "ivy.Container.kron"]], "matrix_exp() (ivy.array method)": [[344, "ivy.Array.matrix_exp"]], "matrix_exp() (ivy.container method)": [[344, "ivy.Container.matrix_exp"]], "multi_dot() (ivy.array method)": [[345, "ivy.Array.multi_dot"]], "multi_dot() (ivy.container method)": [[345, "ivy.Container.multi_dot"]], "as_strided() (ivy.array method)": [[347, "ivy.Array.as_strided"]], "as_strided() (ivy.container method)": [[347, "ivy.Container.as_strided"]], "associative_scan() (ivy.array method)": [[348, "ivy.Array.associative_scan"]], "associative_scan() (ivy.container method)": [[348, "ivy.Container.associative_scan"]], "atleast_1d() (ivy.array method)": [[349, "ivy.Array.atleast_1d"]], "atleast_1d() (ivy.container method)": [[349, "ivy.Container.atleast_1d"]], "atleast_2d() (ivy.array method)": [[350, "ivy.Array.atleast_2d"]], "atleast_2d() (ivy.container method)": [[350, "ivy.Container.atleast_2d"]], "atleast_3d() (ivy.array method)": [[351, "ivy.Array.atleast_3d"]], "atleast_3d() (ivy.container method)": [[351, "ivy.Container.atleast_3d"]], "broadcast_shapes() (ivy.container method)": [[352, "ivy.Container.broadcast_shapes"]], "concat_from_sequence() (ivy.array method)": [[353, "ivy.Array.concat_from_sequence"]], "concat_from_sequence() (ivy.container method)": [[353, "ivy.Container.concat_from_sequence"]], "dsplit() (ivy.array method)": [[354, "ivy.Array.dsplit"]], "dsplit() (ivy.container method)": [[354, "ivy.Container.dsplit"]], "dstack() (ivy.array method)": [[355, "ivy.Array.dstack"]], "dstack() (ivy.container method)": [[355, "ivy.Container.dstack"]], "expand() (ivy.array method)": [[356, "ivy.Array.expand"]], "expand() (ivy.container method)": [[356, "ivy.Container.expand"]], "fill_diagonal() (ivy.array method)": [[357, "ivy.Array.fill_diagonal"]], "fill_diagonal() (ivy.container method)": [[357, "ivy.Container.fill_diagonal"]], "flatten() (ivy.array method)": [[358, "ivy.Array.flatten"]], "flatten() (ivy.container method)": [[358, "ivy.Container.flatten"]], "fliplr() (ivy.array method)": [[359, "ivy.Array.fliplr"]], "fliplr() (ivy.container method)": [[359, "ivy.Container.fliplr"]], "flipud() (ivy.array method)": [[360, "ivy.Array.flipud"]], "flipud() (ivy.container method)": [[360, "ivy.Container.flipud"]], "heaviside() (ivy.array method)": [[361, "ivy.Array.heaviside"]], "heaviside() (ivy.container method)": [[361, "ivy.Container.heaviside"]], "hsplit() (ivy.array method)": [[362, "ivy.Array.hsplit"]], "hsplit() (ivy.container method)": [[362, "ivy.Container.hsplit"]], "hstack() (ivy.array method)": [[363, "ivy.Array.hstack"]], "hstack() (ivy.container method)": [[363, "ivy.Container.hstack"]], "i0() (ivy.array method)": [[364, "ivy.Array.i0"]], "i0() (ivy.container method)": [[364, "ivy.Container.i0"]], "moveaxis() (ivy.array method)": [[365, "ivy.Array.moveaxis"]], "moveaxis() (ivy.container method)": [[365, "ivy.Container.moveaxis"]], "pad() (ivy.array method)": [[366, "ivy.Array.pad"]], "pad() (ivy.container method)": [[366, "ivy.Container.pad"]], "rot90() (ivy.array method)": [[368, "ivy.Array.rot90"]], "rot90() (ivy.container method)": [[368, "ivy.Container.rot90"]], "take_along_axis() (ivy.array method)": [[369, "ivy.Array.take_along_axis"]], "take_along_axis() (ivy.container method)": [[369, "ivy.Container.take_along_axis"]], "top_k() (ivy.array method)": [[370, "ivy.Array.top_k"]], "top_k() (ivy.container method)": [[370, "ivy.Container.top_k"]], "unique_consecutive() (ivy.array method)": [[371, "ivy.Array.unique_consecutive"]], "unique_consecutive() (ivy.container method)": [[371, "ivy.Container.unique_consecutive"]], "vsplit() (ivy.array method)": [[372, "ivy.Array.vsplit"]], "vsplit() (ivy.container method)": [[372, "ivy.Container.vsplit"]], "vstack() (ivy.array method)": [[373, "ivy.Array.vstack"]], "vstack() (ivy.container method)": [[373, "ivy.Container.vstack"]], "batch_norm() (ivy.array method)": [[374, "ivy.Array.batch_norm"]], "batch_norm() (ivy.container method)": [[374, "ivy.Container.batch_norm"]], "group_norm() (ivy.array method)": [[375, "ivy.Array.group_norm"]], "group_norm() (ivy.container method)": [[375, "ivy.Container.group_norm"]], "instance_norm() (ivy.array method)": [[376, "ivy.Array.instance_norm"]], "instance_norm() (ivy.container method)": [[376, "ivy.Container.instance_norm"]], "l1_normalize() (ivy.array method)": [[377, "ivy.Array.l1_normalize"]], "l1_normalize() (ivy.container method)": [[377, "ivy.Container.l1_normalize"]], "l2_normalize() (ivy.array method)": [[378, "ivy.Array.l2_normalize"]], "l2_normalize() (ivy.container method)": [[378, "ivy.Container.l2_normalize"]], "lp_normalize() (ivy.array method)": [[379, "ivy.Array.lp_normalize"]], "lp_normalize() (ivy.container method)": [[379, "ivy.Container.lp_normalize"]], "bernoulli() (ivy.array method)": [[380, "ivy.Array.bernoulli"]], "bernoulli() (ivy.container method)": [[380, "ivy.Container.bernoulli"]], "beta() (ivy.array method)": [[381, "ivy.Array.beta"]], "beta() (ivy.container method)": [[381, "ivy.Container.beta"]], "dirichlet() (ivy.array method)": [[382, "ivy.Array.dirichlet"]], "dirichlet() (ivy.container method)": [[382, "ivy.Container.dirichlet"]], "gamma() (ivy.array method)": [[383, "ivy.Array.gamma"]], "gamma() (ivy.container method)": [[383, "ivy.Container.gamma"]], "poisson() (ivy.array method)": [[384, "ivy.Array.poisson"]], "poisson() (ivy.container method)": [[384, "ivy.Container.poisson"]], "unravel_index() (ivy.array method)": [[385, "ivy.Array.unravel_index"]], "unravel_index() (ivy.container method)": [[385, "ivy.Container.unravel_index"]], "invert_permutation() (ivy.container method)": [[386, "ivy.Container.invert_permutation"]], "lexsort() (ivy.array method)": [[387, "ivy.Array.lexsort"]], "lexsort() (ivy.container method)": [[387, "ivy.Container.lexsort"]], "bincount() (ivy.array method)": [[392, "ivy.Array.bincount"]], "bincount() (ivy.container method)": [[392, "ivy.Container.bincount"]], "corrcoef() (ivy.array method)": [[393, "ivy.Array.corrcoef"]], "corrcoef() (ivy.container method)": [[393, "ivy.Container.corrcoef"]], "cov() (ivy.array method)": [[394, "ivy.Array.cov"]], "cov() (ivy.container method)": [[394, "ivy.Container.cov"]], "cummax() (ivy.array method)": [[395, "ivy.Array.cummax"]], "cummax() (ivy.container method)": [[395, "ivy.Container.cummax"]], "cummin() (ivy.array method)": [[396, "ivy.Array.cummin"]], "cummin() (ivy.container method)": [[396, "ivy.Container.cummin"]], "histogram() (ivy.array method)": [[397, "ivy.Array.histogram"]], "histogram() (ivy.container method)": [[397, "ivy.Container.histogram"]], "igamma() (ivy.array method)": [[398, "ivy.Array.igamma"]], "igamma() (ivy.container method)": [[398, "ivy.Container.igamma"]], "median() (ivy.array method)": [[399, "ivy.Array.median"]], "median() (ivy.container method)": [[399, "ivy.Container.median"]], "nanmean() (ivy.array method)": [[400, "ivy.Array.nanmean"]], "nanmean() (ivy.container method)": [[400, "ivy.Container.nanmean"]], "nanmedian() (ivy.array method)": [[401, "ivy.Array.nanmedian"]], "nanmedian() (ivy.container method)": [[401, "ivy.Container.nanmedian"]], "quantile() (ivy.array method)": [[403, "ivy.Array.quantile"]], "quantile() (ivy.container method)": [[403, "ivy.Container.quantile"]], "all_equal() (in module ivy)": [[404, "ivy.all_equal"], [501, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[404, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[404, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[405, "ivy.arg_info"], [501, "ivy.arg_info"]], "arg_names() (in module ivy)": [[406, "ivy.arg_names"], [501, "ivy.arg_names"]], "array_equal() (in module ivy)": [[407, "ivy.array_equal"], [501, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[407, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[407, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[408, "ivy.assert_supports_inplace"], [501, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[408, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[408, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[409, "ivy.cache_fn"], [501, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[410, "ivy.clip_matrix_norm"], [501, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[410, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[410, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[411, "ivy.clip_vector_norm"], [501, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[411, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[411, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[412, "ivy.container_types"], [501, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[413, "ivy.current_backend_str"], [501, "ivy.current_backend_str"]], "default() (in module ivy)": [[414, "ivy.default"], [501, "ivy.default"]], "default() (ivy.array method)": [[414, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[415, "ivy.einops_rearrange"], [501, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[415, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[415, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[416, "ivy.einops_reduce"], [501, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[416, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[416, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[417, "ivy.einops_repeat"], [501, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[417, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[417, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[418, "ivy.exists"], [501, "ivy.exists"]], "exists() (ivy.array method)": [[418, "ivy.Array.exists"]], "fourier_encode() (in module ivy)": [[419, "ivy.fourier_encode"], [501, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[419, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[419, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[420, "ivy.function_supported_devices_and_dtypes"], [501, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[421, "ivy.function_unsupported_devices_and_dtypes"], [501, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[422, "ivy.gather"], [501, "ivy.gather"]], "gather() (ivy.array method)": [[422, "ivy.Array.gather"]], "gather() (ivy.container method)": [[422, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[423, "ivy.gather_nd"], [501, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[423, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[423, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[424, "ivy.get_all_arrays_in_memory"], [501, "ivy.get_all_arrays_in_memory"]], "get_item() (in module ivy)": [[425, "ivy.get_item"], [501, "ivy.get_item"]], "get_num_dims() (in module ivy)": [[426, "ivy.get_num_dims"], [501, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[426, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[426, "ivy.Container.get_num_dims"]], "get_referrers_recursive() (in module ivy)": [[427, "ivy.get_referrers_recursive"], [501, "ivy.get_referrers_recursive"]], "has_nans() (in module ivy)": [[428, "ivy.has_nans"], [501, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[428, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[428, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[429, "ivy.inplace_arrays_supported"], [501, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[430, "ivy.inplace_decrement"], [501, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[430, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[430, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[431, "ivy.inplace_increment"], [501, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[431, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[431, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[432, "ivy.inplace_update"], [501, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[432, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[432, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[433, "ivy.inplace_variables_supported"], [501, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[434, "ivy.is_array"], [501, "ivy.is_array"]], "is_array() (ivy.array method)": [[434, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[434, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[435, "ivy.is_ivy_array"], [501, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[435, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[435, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[436, "ivy.is_ivy_container"], [501, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[436, "ivy.Array.is_ivy_container"]], "is_ivy_nested_array() (in module ivy)": [[437, "ivy.is_ivy_nested_array"], [501, "ivy.is_ivy_nested_array"]], "is_native_array() (in module ivy)": [[438, "ivy.is_native_array"], [501, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[438, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[438, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[439, "ivy.isin"], [501, "ivy.isin"]], "isin() (ivy.array method)": [[439, "ivy.Array.isin"]], "isin() (ivy.container method)": [[439, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[440, "ivy.isscalar"], [501, "ivy.isscalar"]], "itemsize() (in module ivy)": [[441, "ivy.itemsize"], [501, "ivy.itemsize"]], "itemsize() (ivy.array method)": [[441, "ivy.Array.itemsize"]], "itemsize() (ivy.container method)": [[441, "ivy.Container.itemsize"]], "match_kwargs() (in module ivy)": [[442, "ivy.match_kwargs"], [501, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[443, "ivy.multiprocessing"], [501, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[444, "ivy.num_arrays_in_memory"], [501, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[445, "ivy.print_all_arrays_in_memory"], [501, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[446, "ivy.scatter_flat"], [501, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[446, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[446, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[447, "ivy.scatter_nd"], [501, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[447, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[447, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[448, "ivy.set_array_mode"], [501, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[449, "ivy.set_exception_trace_mode"], [501, "ivy.set_exception_trace_mode"]], "set_item() (in module ivy)": [[450, "ivy.set_item"], [501, "ivy.set_item"]], "set_min_base() (in module ivy)": [[451, "ivy.set_min_base"], [501, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[452, "ivy.set_min_denominator"], [501, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[453, "ivy.set_nestable_mode"], [501, "ivy.set_nestable_mode"]], "set_precise_mode() (in module ivy)": [[454, "ivy.set_precise_mode"], [501, "ivy.set_precise_mode"]], "set_queue_timeout() (in module ivy)": [[455, "ivy.set_queue_timeout"], [501, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[456, "ivy.set_shape_array_mode"], [501, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[457, "ivy.set_show_func_wrapper_trace_mode"], [501, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[458, "ivy.set_tmp_dir"], [501, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[459, "ivy.shape"], [501, "ivy.shape"]], "shape() (ivy.array method)": [[459, "ivy.Array.shape"]], "stable_divide() (in module ivy)": [[460, "ivy.stable_divide"], [501, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[460, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[460, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[461, "ivy.stable_pow"], [501, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[461, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[461, "ivy.Container.stable_pow"]], "strides() (in module ivy)": [[462, "ivy.strides"], [501, "ivy.strides"]], "strides() (ivy.array method)": [[462, "ivy.Array.strides"]], "strides() (ivy.container method)": [[462, "ivy.Container.strides"]], "supports_inplace_updates() (in module ivy)": [[463, "ivy.supports_inplace_updates"], [501, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[463, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[463, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[464, "ivy.to_ivy_shape"], [501, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[465, "ivy.to_list"], [501, "ivy.to_list"]], "to_list() (ivy.array method)": [[465, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[465, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[466, "ivy.to_native_shape"], [501, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[467, "ivy.to_numpy"], [501, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[467, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[467, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[468, "ivy.to_scalar"], [501, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[468, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[468, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[469, "ivy.try_else_none"], [501, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[470, "ivy.unset_array_mode"], [501, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[471, "ivy.unset_exception_trace_mode"], [501, "ivy.unset_exception_trace_mode"]], "unset_min_base() (in module ivy)": [[472, "ivy.unset_min_base"], [501, "ivy.unset_min_base"]], "unset_min_denominator() (in module ivy)": [[473, "ivy.unset_min_denominator"], [501, "ivy.unset_min_denominator"]], "unset_nestable_mode() (in module ivy)": [[474, "ivy.unset_nestable_mode"], [501, "ivy.unset_nestable_mode"]], "unset_precise_mode() (in module ivy)": [[475, "ivy.unset_precise_mode"], [501, "ivy.unset_precise_mode"]], "unset_queue_timeout() (in module ivy)": [[476, "ivy.unset_queue_timeout"], [501, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[477, "ivy.unset_shape_array_mode"], [501, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[478, "ivy.unset_show_func_wrapper_trace_mode"], [501, "ivy.unset_show_func_wrapper_trace_mode"]], "unset_tmp_dir() (in module ivy)": [[479, "ivy.unset_tmp_dir"], [501, "ivy.unset_tmp_dir"]], "value_is_nan() (in module ivy)": [[480, "ivy.value_is_nan"], [501, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[480, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[480, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[481, "ivy.vmap"], [501, "ivy.vmap"]], "adam_step() (in module ivy)": [[482, "ivy.adam_step"], [502, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[482, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[482, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[483, "ivy.adam_update"], [502, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[483, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[483, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[484, "ivy.execute_with_gradients"], [502, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[485, "ivy.grad"], [502, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[486, "ivy.gradient_descent_update"], [502, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[486, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[486, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[487, "ivy.jac"], [502, "ivy.jac"]], "lamb_update() (in module ivy)": [[488, "ivy.lamb_update"], [502, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[488, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[488, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[489, "ivy.lars_update"], [502, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[489, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[489, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[490, "ivy.optimizer_update"], [502, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[490, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[490, "ivy.Container.optimizer_update"]], "stop_gradient() (in module ivy)": [[491, "ivy.stop_gradient"], [502, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[491, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[491, "ivy.Container.stop_gradient"]], "value_and_grad() (in module ivy)": [[492, "ivy.value_and_grad"], [502, "ivy.value_and_grad"]], "ivy.functional.ivy.activations": [[493, "module-ivy.functional.ivy.activations"]], "e (in module ivy)": [[494, "ivy.e"]], "inf (in module ivy)": [[494, "ivy.inf"]], "ivy.functional.ivy.constants": [[494, "module-ivy.functional.ivy.constants"]], "nan (in module ivy)": [[494, "ivy.nan"]], "newaxis (in module ivy)": [[494, "ivy.newaxis"]], "pi (in module ivy)": [[494, "ivy.pi"]], "ivy.functional.ivy.control_flow_ops": [[495, "module-ivy.functional.ivy.control_flow_ops"]], "nestedsequence (class in ivy)": [[496, "ivy.NestedSequence"]], "ivy.functional.ivy.creation": [[496, "module-ivy.functional.ivy.creation"]], "defaultcomplexdtype (class in ivy)": [[497, "ivy.DefaultComplexDtype"]], "defaultdtype (class in ivy)": [[497, "ivy.DefaultDtype"]], "defaultfloatdtype (class in ivy)": [[497, "ivy.DefaultFloatDtype"]], "defaultintdtype (class in ivy)": [[497, "ivy.DefaultIntDtype"]], "defaultuintdtype (class in ivy)": [[497, "ivy.DefaultUintDtype"]], "ivy.functional.ivy.data_type": [[497, "module-ivy.functional.ivy.data_type"]], "defaultdevice (class in ivy)": [[498, "ivy.DefaultDevice"]], "profiler (class in ivy)": [[498, "ivy.Profiler"]], "ivy.functional.ivy.device": [[498, "module-ivy.functional.ivy.device"]], "ivy.functional.ivy.elementwise": [[499, "module-ivy.functional.ivy.elementwise"]], "ivy.functional.ivy.experimental": [[500, "module-ivy.functional.ivy.experimental"]], "arraymode (class in ivy)": [[501, "ivy.ArrayMode"]], "precisemode (class in ivy)": [[501, "ivy.PreciseMode"]], "ivy.functional.ivy.general": [[501, "module-ivy.functional.ivy.general"]], "ivy.functional.ivy.gradients": [[502, "module-ivy.functional.ivy.gradients"]], "conv() (in module ivy)": [[503, "ivy.conv"], [516, "ivy.conv"]], "conv1d() (in module ivy)": [[503, "ivy.conv1d"], [517, "ivy.conv1d"]], "conv1d_transpose() (in module ivy)": [[503, "ivy.conv1d_transpose"], [518, "ivy.conv1d_transpose"]], "conv2d() (in module ivy)": [[503, "ivy.conv2d"], [519, "ivy.conv2d"]], "conv2d_transpose() (in module ivy)": [[503, "ivy.conv2d_transpose"], [520, "ivy.conv2d_transpose"]], "conv3d() (in module ivy)": [[503, "ivy.conv3d"], [521, "ivy.conv3d"]], "conv3d_transpose() (in module ivy)": [[503, "ivy.conv3d_transpose"], [522, "ivy.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[503, "ivy.conv_general_dilated"], [523, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[503, "ivy.conv_general_transpose"], [524, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[503, "ivy.depthwise_conv2d"], [525, "ivy.depthwise_conv2d"]], "dropout() (in module ivy)": [[503, "ivy.dropout"], [526, "ivy.dropout"]], "ivy.functional.ivy.layers": [[503, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy)": [[503, "ivy.linear"], [527, "ivy.linear"]], "lstm_update() (in module ivy)": [[503, "ivy.lstm_update"], [528, "ivy.lstm_update"]], "multi_head_attention() (in module ivy)": [[503, "ivy.multi_head_attention"], [529, "ivy.multi_head_attention"]], "scaled_dot_product_attention() (in module ivy)": [[503, "ivy.scaled_dot_product_attention"], [530, "ivy.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[504, "ivy.cholesky"], [531, "ivy.cholesky"]], "cross() (in module ivy)": [[504, "ivy.cross"], [532, "ivy.cross"]], "det() (in module ivy)": [[504, "ivy.det"], [533, "ivy.det"]], "diag() (in module ivy)": [[504, "ivy.diag"], [534, "ivy.diag"]], "diagonal() (in module ivy)": [[504, "ivy.diagonal"], [535, "ivy.diagonal"]], "eigh() (in module ivy)": [[504, "ivy.eigh"], [537, "ivy.eigh"]], "eigvalsh() (in module ivy)": [[504, "ivy.eigvalsh"], [538, "ivy.eigvalsh"]], "inner() (in module ivy)": [[504, "ivy.inner"], [539, "ivy.inner"]], "inv() (in module ivy)": [[504, "ivy.inv"], [540, "ivy.inv"]], "ivy.functional.ivy.linear_algebra": [[504, "module-ivy.functional.ivy.linear_algebra"]], "lu_factor() (in module ivy)": [[504, "ivy.lu_factor"], [541, "ivy.lu_factor"]], "matmul() (in module ivy)": [[504, "ivy.matmul"], [542, "ivy.matmul"]], "matrix_norm() (in module ivy)": [[504, "ivy.matrix_norm"], [543, "ivy.matrix_norm"]], "matrix_power() (in module ivy)": [[504, "ivy.matrix_power"], [544, "ivy.matrix_power"]], "matrix_rank() (in module ivy)": [[504, "ivy.matrix_rank"], [545, "ivy.matrix_rank"]], "matrix_transpose() (in module ivy)": [[504, "ivy.matrix_transpose"], [546, "ivy.matrix_transpose"]], "outer() (in module ivy)": [[504, "ivy.outer"], [547, "ivy.outer"]], "pinv() (in module ivy)": [[504, "ivy.pinv"], [548, "ivy.pinv"]], "qr() (in module ivy)": [[504, "ivy.qr"], [549, "ivy.qr"]], "slogdet() (in module ivy)": [[504, "ivy.slogdet"], [550, "ivy.slogdet"]], "solve() (in module ivy)": [[504, "ivy.solve"], [551, "ivy.solve"]], "svd() (in module ivy)": [[504, "ivy.svd"], [552, "ivy.svd"]], "svdvals() (in module ivy)": [[504, "ivy.svdvals"], [553, "ivy.svdvals"]], "tensordot() (in module ivy)": [[504, "ivy.tensordot"], [554, "ivy.tensordot"]], "tensorsolve() (in module ivy)": [[504, "ivy.tensorsolve"], [555, "ivy.tensorsolve"]], "trace() (in module ivy)": [[504, "ivy.trace"], [556, "ivy.trace"]], "vander() (in module ivy)": [[504, "ivy.vander"], [557, "ivy.vander"]], "vecdot() (in module ivy)": [[504, "ivy.vecdot"], [558, "ivy.vecdot"]], "vector_norm() (in module ivy)": [[504, "ivy.vector_norm"], [559, "ivy.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[504, "ivy.vector_to_skew_symmetric_matrix"], [560, "ivy.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[505, "ivy.binary_cross_entropy"], [561, "ivy.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[505, "ivy.cross_entropy"], [562, "ivy.cross_entropy"]], "ivy.functional.ivy.losses": [[505, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy)": [[505, "ivy.sparse_cross_entropy"], [563, "ivy.sparse_cross_entropy"]], "clip() (in module ivy)": [[506, "ivy.clip"], [564, "ivy.clip"]], "concat() (in module ivy)": [[506, "ivy.concat"], [565, "ivy.concat"]], "constant_pad() (in module ivy)": [[506, "ivy.constant_pad"], [566, "ivy.constant_pad"]], "expand_dims() (in module ivy)": [[506, "ivy.expand_dims"], [567, "ivy.expand_dims"]], "flip() (in module ivy)": [[506, "ivy.flip"], [568, "ivy.flip"]], "ivy.functional.ivy.manipulation": [[506, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy)": [[506, "ivy.permute_dims"], [569, "ivy.permute_dims"]], "repeat() (in module ivy)": [[506, "ivy.repeat"], [570, "ivy.repeat"]], "reshape() (in module ivy)": [[506, "ivy.reshape"], [571, "ivy.reshape"]], "roll() (in module ivy)": [[506, "ivy.roll"], [572, "ivy.roll"]], "split() (in module ivy)": [[506, "ivy.split"], [573, "ivy.split"]], "squeeze() (in module ivy)": [[506, "ivy.squeeze"], [574, "ivy.squeeze"]], "stack() (in module ivy)": [[506, "ivy.stack"], [575, "ivy.stack"]], "swapaxes() (in module ivy)": [[506, "ivy.swapaxes"], [576, "ivy.swapaxes"]], "tile() (in module ivy)": [[506, "ivy.tile"], [577, "ivy.tile"]], "unstack() (in module ivy)": [[506, "ivy.unstack"], [578, "ivy.unstack"]], "zero_pad() (in module ivy)": [[506, "ivy.zero_pad"], [579, "ivy.zero_pad"]], "fomaml_step() (in module ivy)": [[507, "ivy.fomaml_step"], [580, "ivy.fomaml_step"]], "ivy.functional.ivy.meta": [[507, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy)": [[507, "ivy.maml_step"], [581, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[507, "ivy.reptile_step"], [582, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[508, "ivy.all_nested_indices"], [583, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[508, "ivy.copy_nest"], [584, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[508, "ivy.duplicate_array_index_chains"], [585, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[508, "ivy.index_nest"], [586, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[508, "ivy.insert_into_nest_at_index"], [587, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[508, "ivy.insert_into_nest_at_indices"], [588, "ivy.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[508, "module-ivy.functional.ivy.nest"]], "map() (in module ivy)": [[508, "ivy.map"], [589, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[508, "ivy.map_nest_at_index"], [590, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[508, "ivy.map_nest_at_indices"], [591, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[508, "ivy.multi_index_nest"], [592, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[508, "ivy.nested_any"], [593, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[508, "ivy.nested_argwhere"], [594, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[508, "ivy.nested_map"], [595, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[508, "ivy.nested_multi_map"], [596, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[508, "ivy.prune_empty"], [597, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[508, "ivy.prune_nest_at_index"], [598, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[508, "ivy.prune_nest_at_indices"], [599, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[508, "ivy.set_nest_at_index"], [600, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[508, "ivy.set_nest_at_indices"], [601, "ivy.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[509, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy)": [[509, "ivy.layer_norm"], [602, "ivy.layer_norm"]], "ivy.functional.ivy.random": [[510, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy)": [[510, "ivy.multinomial"], [603, "ivy.multinomial"]], "randint() (in module ivy)": [[510, "ivy.randint"], [604, "ivy.randint"]], "random_normal() (in module ivy)": [[510, "ivy.random_normal"], [605, "ivy.random_normal"]], "random_uniform() (in module ivy)": [[510, "ivy.random_uniform"], [606, "ivy.random_uniform"]], "seed() (in module ivy)": [[510, "ivy.seed"], [607, "ivy.seed"]], "shuffle() (in module ivy)": [[510, "ivy.shuffle"], [608, "ivy.shuffle"]], "argmax() (in module ivy)": [[511, "ivy.argmax"], [609, "ivy.argmax"]], "argmin() (in module ivy)": [[511, "ivy.argmin"], [610, "ivy.argmin"]], "argwhere() (in module ivy)": [[511, "ivy.argwhere"], [611, "ivy.argwhere"]], "ivy.functional.ivy.searching": [[511, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy)": [[511, "ivy.nonzero"], [612, "ivy.nonzero"]], "where() (in module ivy)": [[511, "ivy.where"], [613, "ivy.where"]], "ivy.functional.ivy.set": [[512, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy)": [[512, "ivy.unique_all"], [614, "ivy.unique_all"]], "unique_counts() (in module ivy)": [[512, "ivy.unique_counts"], [615, "ivy.unique_counts"]], "unique_inverse() (in module ivy)": [[512, "ivy.unique_inverse"], [616, "ivy.unique_inverse"]], "unique_values() (in module ivy)": [[512, "ivy.unique_values"], [617, "ivy.unique_values"]], "argsort() (in module ivy)": [[513, "ivy.argsort"], [618, "ivy.argsort"]], "ivy.functional.ivy.sorting": [[513, "module-ivy.functional.ivy.sorting"]], "msort() (in module ivy)": [[513, "ivy.msort"], [619, "ivy.msort"]], "searchsorted() (in module ivy)": [[513, "ivy.searchsorted"], [620, "ivy.searchsorted"]], "sort() (in module ivy)": [[513, "ivy.sort"], [621, "ivy.sort"]], "cumprod() (in module ivy)": [[514, "ivy.cumprod"], [622, "ivy.cumprod"]], "cumsum() (in module ivy)": [[514, "ivy.cumsum"], [623, "ivy.cumsum"]], "einsum() (in module ivy)": [[514, "ivy.einsum"], [624, "ivy.einsum"]], "ivy.functional.ivy.statistical": [[514, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy)": [[514, "ivy.max"], [625, "ivy.max"]], "mean() (in module ivy)": [[514, "ivy.mean"], [626, "ivy.mean"]], "min() (in module ivy)": [[514, "ivy.min"], [627, "ivy.min"]], "prod() (in module ivy)": [[514, "ivy.prod"], [628, "ivy.prod"]], "std() (in module ivy)": [[514, "ivy.std"], [629, "ivy.std"]], "sum() (in module ivy)": [[514, "ivy.sum"], [630, "ivy.sum"]], "var() (in module ivy)": [[514, "ivy.var"], [631, "ivy.var"]], "all() (in module ivy)": [[515, "ivy.all"], [632, "ivy.all"]], "any() (in module ivy)": [[515, "ivy.any"], [633, "ivy.any"]], "ivy.functional.ivy.utility": [[515, "module-ivy.functional.ivy.utility"]], "load() (in module ivy)": [[515, "ivy.load"], [634, "ivy.load"]], "save() (in module ivy)": [[515, "ivy.save"], [635, "ivy.save"]], "conv1d() (ivy.array method)": [[517, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[517, "ivy.Container.conv1d"]], "conv1d_transpose() (ivy.array method)": [[518, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[518, "ivy.Container.conv1d_transpose"]], "conv2d() (ivy.array method)": [[519, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[519, "ivy.Container.conv2d"]], "conv2d_transpose() (ivy.array method)": [[520, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[520, "ivy.Container.conv2d_transpose"]], "conv3d() (ivy.array method)": [[521, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[521, "ivy.Container.conv3d"]], "conv3d_transpose() (ivy.array method)": [[522, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[522, "ivy.Container.conv3d_transpose"]], "depthwise_conv2d() (ivy.array method)": [[525, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[525, "ivy.Container.depthwise_conv2d"]], "dropout() (ivy.array method)": [[526, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[526, "ivy.Container.dropout"]], "linear() (ivy.array method)": [[527, "ivy.Array.linear"]], "linear() (ivy.container method)": [[527, "ivy.Container.linear"]], "lstm_update() (ivy.array method)": [[528, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[528, "ivy.Container.lstm_update"]], "multi_head_attention() (ivy.array method)": [[529, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[529, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[530, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[530, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (ivy.array method)": [[531, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[531, "ivy.Container.cholesky"]], "cross() (ivy.array method)": [[532, "ivy.Array.cross"]], "cross() (ivy.container method)": [[532, "ivy.Container.cross"]], "det() (ivy.array method)": [[533, "ivy.Array.det"]], "det() (ivy.container method)": [[533, "ivy.Container.det"]], "diag() (ivy.array method)": [[534, "ivy.Array.diag"]], "diag() (ivy.container method)": [[534, "ivy.Container.diag"]], "diagonal() (ivy.array method)": [[535, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[535, "ivy.Container.diagonal"]], "eigh() (ivy.array method)": [[537, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[537, "ivy.Container.eigh"]], "eigvalsh() (ivy.array method)": [[538, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[538, "ivy.Container.eigvalsh"]], "inner() (ivy.array method)": [[539, "ivy.Array.inner"]], "inner() (ivy.container method)": [[539, "ivy.Container.inner"]], "inv() (ivy.array method)": [[540, "ivy.Array.inv"]], "inv() (ivy.container method)": [[540, "ivy.Container.inv"]], "matmul() (ivy.array method)": [[542, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[542, "ivy.Container.matmul"]], "matrix_norm() (ivy.array method)": [[543, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[543, "ivy.Container.matrix_norm"]], "matrix_power() (ivy.array method)": [[544, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[544, "ivy.Container.matrix_power"]], "matrix_rank() (ivy.array method)": [[545, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[545, "ivy.Container.matrix_rank"]], "matrix_transpose() (ivy.array method)": [[546, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[546, "ivy.Container.matrix_transpose"]], "outer() (ivy.array method)": [[547, "ivy.Array.outer"]], "outer() (ivy.container method)": [[547, "ivy.Container.outer"]], "pinv() (ivy.array method)": [[548, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[548, "ivy.Container.pinv"]], "qr() (ivy.array method)": [[549, "ivy.Array.qr"]], "qr() (ivy.container method)": [[549, "ivy.Container.qr"]], "slogdet() (ivy.array method)": [[550, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[550, "ivy.Container.slogdet"]], "solve() (ivy.array method)": [[551, "ivy.Array.solve"]], "solve() (ivy.container method)": [[551, "ivy.Container.solve"]], "svd() (ivy.array method)": [[552, "ivy.Array.svd"]], "svd() (ivy.container method)": [[552, "ivy.Container.svd"]], "svdvals() (ivy.array method)": [[553, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[553, "ivy.Container.svdvals"]], "tensordot() (ivy.array method)": [[554, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[554, "ivy.Container.tensordot"]], "tensorsolve() (ivy.array method)": [[555, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[555, "ivy.Container.tensorsolve"]], "trace() (ivy.array method)": [[556, "ivy.Array.trace"]], "trace() (ivy.container method)": [[556, "ivy.Container.trace"]], "vander() (ivy.array method)": [[557, "ivy.Array.vander"]], "vander() (ivy.container method)": [[557, "ivy.Container.vander"]], "vecdot() (ivy.array method)": [[558, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[558, "ivy.Container.vecdot"]], "vector_norm() (ivy.array method)": [[559, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[559, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[560, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[560, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (ivy.array method)": [[561, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[561, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (ivy.array method)": [[562, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[562, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[563, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[563, "ivy.Container.sparse_cross_entropy"]], "clip() (ivy.array method)": [[564, "ivy.Array.clip"]], "clip() (ivy.container method)": [[564, "ivy.Container.clip"]], "concat() (ivy.array method)": [[565, "ivy.Array.concat"]], "concat() (ivy.container method)": [[565, "ivy.Container.concat"]], "constant_pad() (ivy.array method)": [[566, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[566, "ivy.Container.constant_pad"]], "expand_dims() (ivy.array method)": [[567, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[567, "ivy.Container.expand_dims"]], "flip() (ivy.array method)": [[568, "ivy.Array.flip"]], "flip() (ivy.container method)": [[568, "ivy.Container.flip"]], "permute_dims() (ivy.array method)": [[569, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[569, "ivy.Container.permute_dims"]], "repeat() (ivy.array method)": [[570, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[570, "ivy.Container.repeat"]], "reshape() (ivy.array method)": [[571, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[571, "ivy.Container.reshape"]], "roll() (ivy.array method)": [[572, "ivy.Array.roll"]], "roll() (ivy.container method)": [[572, "ivy.Container.roll"]], "split() (ivy.array method)": [[573, "ivy.Array.split"]], "split() (ivy.container method)": [[573, "ivy.Container.split"]], "squeeze() (ivy.array method)": [[574, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[574, "ivy.Container.squeeze"]], "stack() (ivy.array method)": [[575, "ivy.Array.stack"]], "stack() (ivy.container method)": [[575, "ivy.Container.stack"]], "swapaxes() (ivy.array method)": [[576, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[576, "ivy.Container.swapaxes"]], "tile() (ivy.array method)": [[577, "ivy.Array.tile"]], "tile() (ivy.container method)": [[577, "ivy.Container.tile"]], "unstack() (ivy.array method)": [[578, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[578, "ivy.Container.unstack"]], "zero_pad() (ivy.array method)": [[579, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[579, "ivy.Container.zero_pad"]], "layer_norm() (ivy.array method)": [[602, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[602, "ivy.Container.layer_norm"]], "multinomial() (ivy.array method)": [[603, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[603, "ivy.Container.multinomial"]], "randint() (ivy.array method)": [[604, "ivy.Array.randint"]], "randint() (ivy.container method)": [[604, "ivy.Container.randint"]], "random_normal() (ivy.array method)": [[605, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[605, "ivy.Container.random_normal"]], "random_uniform() (ivy.array method)": [[606, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[606, "ivy.Container.random_uniform"]], "shuffle() (ivy.array method)": [[608, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[608, "ivy.Container.shuffle"]], "argmax() (ivy.array method)": [[609, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[609, "ivy.Container.argmax"]], "argmin() (ivy.array method)": [[610, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[610, "ivy.Container.argmin"]], "argwhere() (ivy.array method)": [[611, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[611, "ivy.Container.argwhere"]], "nonzero() (ivy.array method)": [[612, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[612, "ivy.Container.nonzero"]], "where() (ivy.array method)": [[613, "ivy.Array.where"]], "where() (ivy.container method)": [[613, "ivy.Container.where"]], "unique_all() (ivy.array method)": [[614, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[614, "ivy.Container.unique_all"]], "unique_counts() (ivy.array method)": [[615, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[615, "ivy.Container.unique_counts"]], "unique_inverse() (ivy.array method)": [[616, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[616, "ivy.Container.unique_inverse"]], "unique_values() (ivy.array method)": [[617, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[617, "ivy.Container.unique_values"]], "argsort() (ivy.array method)": [[618, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[618, "ivy.Container.argsort"]], "msort() (ivy.array method)": [[619, "ivy.Array.msort"]], "msort() (ivy.container method)": [[619, "ivy.Container.msort"]], "searchsorted() (ivy.array method)": [[620, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[620, "ivy.Container.searchsorted"]], "sort() (ivy.array method)": [[621, "ivy.Array.sort"]], "sort() (ivy.container method)": [[621, "ivy.Container.sort"]], "cumprod() (ivy.array method)": [[622, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[622, "ivy.Container.cumprod"]], "cumsum() (ivy.array method)": [[623, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[623, "ivy.Container.cumsum"]], "einsum() (ivy.array method)": [[624, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[624, "ivy.Container.einsum"]], "max() (ivy.array method)": [[625, "ivy.Array.max"]], "max() (ivy.container method)": [[625, "ivy.Container.max"]], "mean() (ivy.array method)": [[626, "ivy.Array.mean"]], "mean() (ivy.container method)": [[626, "ivy.Container.mean"]], "min() (ivy.array method)": [[627, "ivy.Array.min"]], "min() (ivy.container method)": [[627, "ivy.Container.min"]], "prod() (ivy.array method)": [[628, "ivy.Array.prod"]], "prod() (ivy.container method)": [[628, "ivy.Container.prod"]], "std() (ivy.array method)": [[629, "ivy.Array.std"]], "std() (ivy.container method)": [[629, "ivy.Container.std"]], "sum() (ivy.array method)": [[630, "ivy.Array.sum"]], "sum() (ivy.container method)": [[630, "ivy.Container.sum"]], "var() (ivy.array method)": [[631, "ivy.Array.var"]], "var() (ivy.container method)": [[631, "ivy.Container.var"]], "all() (ivy.array method)": [[632, "ivy.Array.all"]], "all() (ivy.container method)": [[632, "ivy.Container.all"]], "any() (ivy.array method)": [[633, "ivy.Array.any"]], "any() (ivy.container method)": [[633, "ivy.Container.any"]], "assert_all_close() (in module ivy_tests.test_ivy.helpers.assertions)": [[636, "ivy_tests.test_ivy.helpers.assertions.assert_all_close"]], "assert_same_type_and_shape() (in module ivy_tests.test_ivy.helpers.assertions)": [[636, "ivy_tests.test_ivy.helpers.assertions.assert_same_type_and_shape"]], "check_unsupported_device() (in module ivy_tests.test_ivy.helpers.assertions)": [[636, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device"]], "check_unsupported_device_and_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[636, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device_and_dtype"]], "check_unsupported_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[636, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_dtype"]], "ivy_tests.test_ivy.helpers.assertions": [[636, "module-ivy_tests.test_ivy.helpers.assertions"]], "test_unsupported_function() (in module ivy_tests.test_ivy.helpers.assertions)": [[636, "ivy_tests.test_ivy.helpers.assertions.test_unsupported_function"]], "value_test() (in module ivy_tests.test_ivy.helpers.assertions)": [[636, "ivy_tests.test_ivy.helpers.assertions.value_test"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[637, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "args_to_container() (in module ivy_tests.test_ivy.helpers.function_testing)": [[638, "ivy_tests.test_ivy.helpers.function_testing.args_to_container"]], "args_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[638, "ivy_tests.test_ivy.helpers.function_testing.args_to_frontend"]], "arrays_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[638, "ivy_tests.test_ivy.helpers.function_testing.arrays_to_frontend"]], "as_lists() (in module ivy_tests.test_ivy.helpers.function_testing)": [[638, "ivy_tests.test_ivy.helpers.function_testing.as_lists"]], "compiled_if_required() (in module ivy_tests.test_ivy.helpers.function_testing)": [[638, "ivy_tests.test_ivy.helpers.function_testing.compiled_if_required"]], "convtrue() (in module ivy_tests.test_ivy.helpers.function_testing)": [[638, "ivy_tests.test_ivy.helpers.function_testing.convtrue"]], "create_args_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[638, "ivy_tests.test_ivy.helpers.function_testing.create_args_kwargs"]], "flatten() (in module ivy_tests.test_ivy.helpers.function_testing)": [[638, "ivy_tests.test_ivy.helpers.function_testing.flatten"]], "flatten_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[638, "ivy_tests.test_ivy.helpers.function_testing.flatten_and_to_np"]], "flatten_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[638, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend"]], "flatten_frontend_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[638, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_to_np"]], "get_frontend_ret() (in module ivy_tests.test_ivy.helpers.function_testing)": [[638, "ivy_tests.test_ivy.helpers.function_testing.get_frontend_ret"]], "get_ret_and_flattened_np_array() (in module ivy_tests.test_ivy.helpers.function_testing)": [[638, "ivy_tests.test_ivy.helpers.function_testing.get_ret_and_flattened_np_array"]], "gradient_incompatible_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[638, "ivy_tests.test_ivy.helpers.function_testing.gradient_incompatible_function"]], "gradient_test() (in module ivy_tests.test_ivy.helpers.function_testing)": [[638, "ivy_tests.test_ivy.helpers.function_testing.gradient_test"]], "gradient_unsupported_dtypes() (in module ivy_tests.test_ivy.helpers.function_testing)": [[638, "ivy_tests.test_ivy.helpers.function_testing.gradient_unsupported_dtypes"]], "ivy_tests.test_ivy.helpers.function_testing": [[638, "module-ivy_tests.test_ivy.helpers.function_testing"]], "kwargs_to_args_n_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[638, "ivy_tests.test_ivy.helpers.function_testing.kwargs_to_args_n_kwargs"]], "test_frontend_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[638, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_function"]], "test_frontend_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[638, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_method"]], "test_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[638, "ivy_tests.test_ivy.helpers.function_testing.test_function"]], "test_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[638, "ivy_tests.test_ivy.helpers.function_testing.test_method"]], "wrap_frontend_function_args() (in module ivy_tests.test_ivy.helpers.function_testing)": [[638, "ivy_tests.test_ivy.helpers.function_testing.wrap_frontend_function_args"]], "current_frontend_config (in module ivy_tests.test_ivy.helpers.globals)": [[639, "ivy_tests.test_ivy.helpers.globals.CURRENT_FRONTEND_CONFIG"]], "interruptedtest": [[639, "ivy_tests.test_ivy.helpers.globals.InterruptedTest"]], "testdata (class in ivy_tests.test_ivy.helpers.globals)": [[639, "ivy_tests.test_ivy.helpers.globals.TestData"]], "__init__() (ivy_tests.test_ivy.helpers.globals.interruptedtest method)": [[639, "ivy_tests.test_ivy.helpers.globals.InterruptedTest.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.globals.testdata method)": [[639, "ivy_tests.test_ivy.helpers.globals.TestData.__init__"]], "fn_name (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[639, "ivy_tests.test_ivy.helpers.globals.TestData.fn_name"]], "fn_tree (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[639, "ivy_tests.test_ivy.helpers.globals.TestData.fn_tree"]], "is_method (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[639, "ivy_tests.test_ivy.helpers.globals.TestData.is_method"]], "ivy_tests.test_ivy.helpers.globals": [[639, "module-ivy_tests.test_ivy.helpers.globals"]], "setup_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[639, "ivy_tests.test_ivy.helpers.globals.setup_api_test"]], "setup_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[639, "ivy_tests.test_ivy.helpers.globals.setup_frontend_test"]], "supported_device_dtypes (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[639, "ivy_tests.test_ivy.helpers.globals.TestData.supported_device_dtypes"]], "teardown_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[639, "ivy_tests.test_ivy.helpers.globals.teardown_api_test"]], "teardown_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[639, "ivy_tests.test_ivy.helpers.globals.teardown_frontend_test"]], "test_fn (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[639, "ivy_tests.test_ivy.helpers.globals.TestData.test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[640, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"]], "array_and_broadcastable_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[641, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_and_broadcastable_shape"]], "array_bools() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[641, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_bools"]], "array_indices_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[641, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_axis"]], "array_indices_put_along_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[641, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_put_along_axis"]], "array_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[641, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_values"]], "arrays_and_axes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[641, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_and_axes"]], "arrays_for_pooling() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[641, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_for_pooling"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[641, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.broadcast_shapes"]], "cond_data_gen_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[641, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.cond_data_gen_helper"]], "create_nested_input() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[641, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_nested_input"]], "dtype_and_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[641, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_and_values"]], "dtype_array_query() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[641, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query"]], "dtype_array_query_val() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[641, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query_val"]], "dtype_values_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[641, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_values_axis"]], "einsum_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[641, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.einsum_helper"]], "get_first_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[641, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_matrix"]], "get_second_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[641, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_matrix"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[641, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "list_of_size() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[641, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.list_of_size"]], "lists() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[641, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.lists"]], "mutually_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[641, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.mutually_broadcastable_shapes"]], "prod() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[641, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.prod"]], "array_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[642, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.array_dtypes"]], "get_castable_dtype() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[642, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_castable_dtype"]], "get_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[642, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[642, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "apply_safety_factor() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[643, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.apply_safety_factor"]], "embedding_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[643, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.embedding_helper"]], "get_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[643, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_axis"]], "get_bounds() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[643, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_bounds"]], "get_mean_std() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[643, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_mean_std"]], "get_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[643, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_shape"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[643, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "matrix_is_stable() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[643, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.matrix_is_stable"]], "reshape_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[643, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.reshape_shapes"]], "subsets() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[643, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.subsets"]], "x_and_filters() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[643, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.x_and_filters"]], "floats() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[644, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.floats"]], "ints() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[644, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.ints"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[644, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "number() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[644, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.number"]], "withbackendcontext (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[645, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext"]], "__init__() (ivy_tests.test_ivy.helpers.pipeline_helper.withbackendcontext method)": [[645, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext.__init__"]], "get_frontend_config() (in module ivy_tests.test_ivy.helpers.pipeline_helper)": [[645, "ivy_tests.test_ivy.helpers.pipeline_helper.get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[645, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "update_backend (in module ivy_tests.test_ivy.helpers.pipeline_helper)": [[645, "ivy_tests.test_ivy.helpers.pipeline_helper.update_backend"]], "frontendmethoddata (class in ivy_tests.test_ivy.helpers.structs)": [[646, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData"]], "__init__() (ivy_tests.test_ivy.helpers.structs.frontendmethoddata method)": [[646, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.__init__"]], "framework_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[646, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.framework_init_module"]], "init_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[646, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.init_name"]], "ivy_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[646, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.ivy_init_module"]], "ivy_tests.test_ivy.helpers.structs": [[646, "module-ivy_tests.test_ivy.helpers.structs"]], "method_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[646, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.method_name"]], "frontendfunctiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[647, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags"]], "frontendmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[647, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags"]], "functiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[647, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags"]], "initmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[647, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags"]], "methodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[647, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags"]], "testflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[647, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[647, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[647, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[647, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[647, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[647, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.__init__"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[647, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[647, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[647, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[647, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[647, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.testflags method)": [[647, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags.apply_flags"]], "build_flag() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[647, "ivy_tests.test_ivy.helpers.test_parameter_flags.build_flag"]], "frontend_function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[647, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_function_flags"]], "frontend_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[647, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_method_flags"]], "function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[647, "ivy_tests.test_ivy.helpers.test_parameter_flags.function_flags"]], "init_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[647, "ivy_tests.test_ivy.helpers.test_parameter_flags.init_method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[647, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[647, "ivy_tests.test_ivy.helpers.test_parameter_flags.method_flags"]], "handle_frontend_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[648, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_method"]], "handle_frontend_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[648, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_test"]], "handle_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[648, "ivy_tests.test_ivy.helpers.testing_helpers.handle_method"]], "handle_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[648, "ivy_tests.test_ivy.helpers.testing_helpers.handle_test"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[648, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "num_positional_args() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[648, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args"]], "num_positional_args_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[648, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_method"]], "seed() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[648, "ivy_tests.test_ivy.helpers.testing_helpers.seed"]], "geglu (class in ivy.stateful.activations)": [[652, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[652, "ivy.stateful.activations.GELU"]], "hardswish (class in ivy.stateful.activations)": [[652, "ivy.stateful.activations.Hardswish"]], "leakyrelu (class in ivy.stateful.activations)": [[652, "ivy.stateful.activations.LeakyReLU"]], "logsoftmax (class in ivy.stateful.activations)": [[652, "ivy.stateful.activations.LogSoftmax"]], "logit (class in ivy.stateful.activations)": [[652, "ivy.stateful.activations.Logit"]], "mish (class in ivy.stateful.activations)": [[652, "ivy.stateful.activations.Mish"]], "prelu (class in ivy.stateful.activations)": [[652, "ivy.stateful.activations.PReLU"]], "relu (class in ivy.stateful.activations)": [[652, "ivy.stateful.activations.ReLU"]], "relu6 (class in ivy.stateful.activations)": [[652, "ivy.stateful.activations.ReLU6"]], "selu (class in ivy.stateful.activations)": [[652, "ivy.stateful.activations.SeLU"]], "silu (class in ivy.stateful.activations)": [[652, "ivy.stateful.activations.SiLU"]], "sigmoid (class in ivy.stateful.activations)": [[652, "ivy.stateful.activations.Sigmoid"]], "softmax (class in ivy.stateful.activations)": [[652, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[652, "ivy.stateful.activations.Softplus"]], "tanh (class in ivy.stateful.activations)": [[652, "ivy.stateful.activations.Tanh"]], "__init__() (ivy.stateful.activations.geglu method)": [[652, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[652, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.hardswish method)": [[652, "ivy.stateful.activations.Hardswish.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[652, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[652, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.logit method)": [[652, "ivy.stateful.activations.Logit.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[652, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.prelu method)": [[652, "ivy.stateful.activations.PReLU.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[652, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.relu6 method)": [[652, "ivy.stateful.activations.ReLU6.__init__"]], "__init__() (ivy.stateful.activations.selu method)": [[652, "ivy.stateful.activations.SeLU.__init__"]], "__init__() (ivy.stateful.activations.silu method)": [[652, "ivy.stateful.activations.SiLU.__init__"]], "__init__() (ivy.stateful.activations.sigmoid method)": [[652, "ivy.stateful.activations.Sigmoid.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[652, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[652, "ivy.stateful.activations.Softplus.__init__"]], "__init__() (ivy.stateful.activations.tanh method)": [[652, "ivy.stateful.activations.Tanh.__init__"]], "ivy.stateful.activations": [[652, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[653, "ivy.stateful.converters.ModuleConverters"]], "from_flax_module() (ivy.stateful.converters.moduleconverters static method)": [[653, "ivy.stateful.converters.ModuleConverters.from_flax_module"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[653, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[653, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_paddle_module() (ivy.stateful.converters.moduleconverters static method)": [[653, "ivy.stateful.converters.ModuleConverters.from_paddle_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[653, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[653, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[653, "ivy.stateful.converters.to_ivy_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[654, "ivy.stateful.helpers.ModuleHelpers"]], "check_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[654, "ivy.stateful.helpers.ModuleHelpers.check_submod_rets"]], "get_mod_key() (ivy.stateful.helpers.modulehelpers method)": [[654, "ivy.stateful.helpers.ModuleHelpers.get_mod_key"]], "ivy.stateful.helpers": [[654, "module-ivy.stateful.helpers"]], "mod_depth() (ivy.stateful.helpers.modulehelpers method)": [[654, "ivy.stateful.helpers.ModuleHelpers.mod_depth"]], "mod_height() (ivy.stateful.helpers.modulehelpers method)": [[654, "ivy.stateful.helpers.ModuleHelpers.mod_height"]], "mod_with_top_mod_key_chain() (ivy.stateful.helpers.modulehelpers method)": [[654, "ivy.stateful.helpers.ModuleHelpers.mod_with_top_mod_key_chain"]], "show_mod_in_top_mod() (ivy.stateful.helpers.modulehelpers method)": [[654, "ivy.stateful.helpers.ModuleHelpers.show_mod_in_top_mod"]], "show_structure() (ivy.stateful.helpers.modulehelpers method)": [[654, "ivy.stateful.helpers.ModuleHelpers.show_structure"]], "show_v_in_top_v() (ivy.stateful.helpers.modulehelpers method)": [[654, "ivy.stateful.helpers.ModuleHelpers.show_v_in_top_v"]], "sub_mods() (ivy.stateful.helpers.modulehelpers method)": [[654, "ivy.stateful.helpers.ModuleHelpers.sub_mods"]], "track_submod_call_order() (ivy.stateful.helpers.modulehelpers method)": [[654, "ivy.stateful.helpers.ModuleHelpers.track_submod_call_order"]], "track_submod_rets() (ivy.stateful.helpers.modulehelpers method)": [[654, "ivy.stateful.helpers.ModuleHelpers.track_submod_rets"]], "v_with_top_v_key_chains() (ivy.stateful.helpers.modulehelpers method)": [[654, "ivy.stateful.helpers.ModuleHelpers.v_with_top_v_key_chains"]], "constant (class in ivy.stateful.initializers)": [[655, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[655, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[655, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[655, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[655, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[655, "ivy.stateful.initializers.Ones"]], "randomnormal (class in ivy.stateful.initializers)": [[655, "ivy.stateful.initializers.RandomNormal"]], "siren (class in ivy.stateful.initializers)": [[655, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[655, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[655, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[655, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[655, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[655, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[655, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[655, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.randomnormal method)": [[655, "ivy.stateful.initializers.RandomNormal.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[655, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[655, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[655, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[655, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[655, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[655, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.randomnormal method)": [[655, "ivy.stateful.initializers.RandomNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[655, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[655, "module-ivy.stateful.initializers"]], "adaptiveavgpool1d (class in ivy.stateful.layers)": [[656, "ivy.stateful.layers.AdaptiveAvgPool1d"]], "adaptiveavgpool2d (class in ivy.stateful.layers)": [[656, "ivy.stateful.layers.AdaptiveAvgPool2d"]], "avgpool1d (class in ivy.stateful.layers)": [[656, "ivy.stateful.layers.AvgPool1D"]], "avgpool2d (class in ivy.stateful.layers)": [[656, "ivy.stateful.layers.AvgPool2D"]], "avgpool3d (class in ivy.stateful.layers)": [[656, "ivy.stateful.layers.AvgPool3D"]], "conv1d (class in ivy.stateful.layers)": [[656, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[656, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[656, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[656, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[656, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[656, "ivy.stateful.layers.Conv3DTranspose"]], "dct (class in ivy.stateful.layers)": [[656, "ivy.stateful.layers.Dct"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[656, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[656, "ivy.stateful.layers.Dropout"]], "embedding (class in ivy.stateful.layers)": [[656, "ivy.stateful.layers.Embedding"]], "fft (class in ivy.stateful.layers)": [[656, "ivy.stateful.layers.FFT"]], "lstm (class in ivy.stateful.layers)": [[656, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[656, "ivy.stateful.layers.Linear"]], "maxpool1d (class in ivy.stateful.layers)": [[656, "ivy.stateful.layers.MaxPool1D"]], "maxpool2d (class in ivy.stateful.layers)": [[656, "ivy.stateful.layers.MaxPool2D"]], "maxpool3d (class in ivy.stateful.layers)": [[656, "ivy.stateful.layers.MaxPool3D"]], "multiheadattention (class in ivy.stateful.layers)": [[656, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.adaptiveavgpool1d method)": [[656, "ivy.stateful.layers.AdaptiveAvgPool1d.__init__"]], "__init__() (ivy.stateful.layers.adaptiveavgpool2d method)": [[656, "ivy.stateful.layers.AdaptiveAvgPool2d.__init__"]], "__init__() (ivy.stateful.layers.avgpool1d method)": [[656, "ivy.stateful.layers.AvgPool1D.__init__"]], "__init__() (ivy.stateful.layers.avgpool2d method)": [[656, "ivy.stateful.layers.AvgPool2D.__init__"]], "__init__() (ivy.stateful.layers.avgpool3d method)": [[656, "ivy.stateful.layers.AvgPool3D.__init__"]], "__init__() (ivy.stateful.layers.conv1d method)": [[656, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[656, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[656, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[656, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[656, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[656, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.dct method)": [[656, "ivy.stateful.layers.Dct.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[656, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[656, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.embedding method)": [[656, "ivy.stateful.layers.Embedding.__init__"]], "__init__() (ivy.stateful.layers.fft method)": [[656, "ivy.stateful.layers.FFT.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[656, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[656, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.maxpool1d method)": [[656, "ivy.stateful.layers.MaxPool1D.__init__"]], "__init__() (ivy.stateful.layers.maxpool2d method)": [[656, "ivy.stateful.layers.MaxPool2D.__init__"]], "__init__() (ivy.stateful.layers.maxpool3d method)": [[656, "ivy.stateful.layers.MaxPool3D.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[656, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[656, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[656, "module-ivy.stateful.layers"]], "module (class in ivy.stateful.module)": [[657, "ivy.stateful.module.Module"]], "__call__() (ivy.stateful.module.module method)": [[657, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[657, "ivy.stateful.module.Module.__init__"]], "build() (ivy.stateful.module.module method)": [[657, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[657, "ivy.stateful.module.Module.build_mode"]], "built_ (ivy.stateful.module.module property)": [[657, "ivy.stateful.module.Module.built_"]], "compile() (ivy.stateful.module.module method)": [[657, "ivy.stateful.module.Module.compile"]], "ivy.stateful.module": [[657, "module-ivy.stateful.module"]], "load() (ivy.stateful.module.module static method)": [[657, "ivy.stateful.module.Module.load"]], "save() (ivy.stateful.module.module method)": [[657, "ivy.stateful.module.Module.save"]], "save_weights() (ivy.stateful.module.module method)": [[657, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[657, "ivy.stateful.module.Module.show_graph"]], "batchnorm2d (class in ivy.stateful.norms)": [[658, "ivy.stateful.norms.BatchNorm2D"]], "layernorm (class in ivy.stateful.norms)": [[658, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.batchnorm2d method)": [[658, "ivy.stateful.norms.BatchNorm2D.__init__"]], "__init__() (ivy.stateful.norms.layernorm method)": [[658, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[658, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[659, "ivy.stateful.optimizers.Adam"]], "lamb (class in ivy.stateful.optimizers)": [[659, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[659, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[659, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[659, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[659, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[659, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[659, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[659, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[659, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[659, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[659, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[659, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[659, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[659, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[659, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[659, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[659, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[659, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[659, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[659, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[660, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[660, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[660, "module-ivy.stateful.sequential"]], "check_all() (in module ivy.utils.assertions)": [[661, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[661, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[661, "ivy.utils.assertions.check_any"]], "check_dev_correct_formatting() (in module ivy.utils.assertions)": [[661, "ivy.utils.assertions.check_dev_correct_formatting"]], "check_dimensions() (in module ivy.utils.assertions)": [[661, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[661, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[661, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[661, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[661, "ivy.utils.assertions.check_false"]], "check_fill_value_and_dtype_are_compatible() (in module ivy.utils.assertions)": [[661, "ivy.utils.assertions.check_fill_value_and_dtype_are_compatible"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[661, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[661, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[661, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[661, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[661, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[661, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[661, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[661, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[661, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[661, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[661, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[661, "ivy.utils.assertions.check_true"]], "check_unsorted_segment_min_valid_params() (in module ivy.utils.assertions)": [[661, "ivy.utils.assertions.check_unsorted_segment_min_valid_params"]], "ivy.utils.assertions": [[661, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[662, "module-ivy.utils.backend"]], "importtransformer (class in ivy.utils.backend.ast_helpers)": [[663, "ivy.utils.backend.ast_helpers.ImportTransformer"]], "ivyloader (class in ivy.utils.backend.ast_helpers)": [[663, "ivy.utils.backend.ast_helpers.IvyLoader"]], "ivypathfinder (class in ivy.utils.backend.ast_helpers)": [[663, "ivy.utils.backend.ast_helpers.IvyPathFinder"]], "__init__() (ivy.utils.backend.ast_helpers.importtransformer method)": [[663, "ivy.utils.backend.ast_helpers.ImportTransformer.__init__"]], "__init__() (ivy.utils.backend.ast_helpers.ivyloader method)": [[663, "ivy.utils.backend.ast_helpers.IvyLoader.__init__"]], "exec_module() (ivy.utils.backend.ast_helpers.ivyloader method)": [[663, "ivy.utils.backend.ast_helpers.IvyLoader.exec_module"]], "find_spec() (ivy.utils.backend.ast_helpers.ivypathfinder method)": [[663, "ivy.utils.backend.ast_helpers.IvyPathFinder.find_spec"]], "impersonate_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[663, "ivy.utils.backend.ast_helpers.ImportTransformer.impersonate_import"]], "ivy.utils.backend.ast_helpers": [[663, "module-ivy.utils.backend.ast_helpers"]], "visit_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[663, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_Import"]], "visit_importfrom() (ivy.utils.backend.ast_helpers.importtransformer method)": [[663, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_ImportFrom"]], "contextmanager (class in ivy.utils.backend.handler)": [[664, "ivy.utils.backend.handler.ContextManager"]], "__init__() (ivy.utils.backend.handler.contextmanager method)": [[664, "ivy.utils.backend.handler.ContextManager.__init__"]], "choose_random_backend() (in module ivy.utils.backend.handler)": [[664, "ivy.utils.backend.handler.choose_random_backend"]], "convert_from_numpy_to_target_backend() (in module ivy.utils.backend.handler)": [[664, "ivy.utils.backend.handler.convert_from_numpy_to_target_backend"]], "convert_from_source_backend_to_numpy() (in module ivy.utils.backend.handler)": [[664, "ivy.utils.backend.handler.convert_from_source_backend_to_numpy"]], "current_backend() (in module ivy.utils.backend.handler)": [[664, "ivy.utils.backend.handler.current_backend"]], "fn_name_from_version_specific_fn_name() (in module ivy.utils.backend.handler)": [[664, "ivy.utils.backend.handler.fn_name_from_version_specific_fn_name"]], "ivy.utils.backend.handler": [[664, "module-ivy.utils.backend.handler"]], "prevent_access_locally() (in module ivy.utils.backend.handler)": [[664, "ivy.utils.backend.handler.prevent_access_locally"]], "previous_backend() (in module ivy.utils.backend.handler)": [[664, "ivy.utils.backend.handler.previous_backend"]], "set_backend() (in module ivy.utils.backend.handler)": [[664, "ivy.utils.backend.handler.set_backend"]], "set_backend_to_specific_version() (in module ivy.utils.backend.handler)": [[664, "ivy.utils.backend.handler.set_backend_to_specific_version"]], "set_jax_backend() (in module ivy.utils.backend.handler)": [[664, "ivy.utils.backend.handler.set_jax_backend"]], "set_mxnet_backend() (in module ivy.utils.backend.handler)": [[664, "ivy.utils.backend.handler.set_mxnet_backend"]], "set_numpy_backend() (in module ivy.utils.backend.handler)": [[664, "ivy.utils.backend.handler.set_numpy_backend"]], "set_paddle_backend() (in module ivy.utils.backend.handler)": [[664, "ivy.utils.backend.handler.set_paddle_backend"]], "set_tensorflow_backend() (in module ivy.utils.backend.handler)": [[664, "ivy.utils.backend.handler.set_tensorflow_backend"]], "set_torch_backend() (in module ivy.utils.backend.handler)": [[664, "ivy.utils.backend.handler.set_torch_backend"]], "unset_backend() (in module ivy.utils.backend.handler)": [[664, "ivy.utils.backend.handler.unset_backend"]], "with_backend() (in module ivy.utils.backend.handler)": [[664, "ivy.utils.backend.handler.with_backend"]], "available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[665, "ivy.utils.backend.sub_backend_handler.available_sub_backends"]], "clear_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[665, "ivy.utils.backend.sub_backend_handler.clear_sub_backends"]], "find_available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[665, "ivy.utils.backend.sub_backend_handler.find_available_sub_backends"]], "ivy.utils.backend.sub_backend_handler": [[665, "module-ivy.utils.backend.sub_backend_handler"]], "set_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[665, "ivy.utils.backend.sub_backend_handler.set_sub_backend"]], "unset_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[665, "ivy.utils.backend.sub_backend_handler.unset_sub_backend"]], "import_module() (in module ivy.utils.dynamic_import)": [[666, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[666, "module-ivy.utils.dynamic_import"]], "ivyattributeerror": [[667, "ivy.utils.exceptions.IvyAttributeError"]], "ivybackendexception": [[667, "ivy.utils.exceptions.IvyBackendException"]], "ivybroadcastshapeerror": [[667, "ivy.utils.exceptions.IvyBroadcastShapeError"]], "ivydtypepromotionerror": [[667, "ivy.utils.exceptions.IvyDtypePromotionError"]], "ivyerror": [[667, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[667, "ivy.utils.exceptions.IvyException"]], "ivyindexerror": [[667, "ivy.utils.exceptions.IvyIndexError"]], "ivynotimplementedexception": [[667, "ivy.utils.exceptions.IvyNotImplementedException"]], "ivyvalueerror": [[667, "ivy.utils.exceptions.IvyValueError"]], "__init__() (ivy.utils.exceptions.ivyattributeerror method)": [[667, "ivy.utils.exceptions.IvyAttributeError.__init__"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[667, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivybroadcastshapeerror method)": [[667, "ivy.utils.exceptions.IvyBroadcastShapeError.__init__"]], "__init__() (ivy.utils.exceptions.ivydtypepromotionerror method)": [[667, "ivy.utils.exceptions.IvyDtypePromotionError.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[667, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[667, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivyindexerror method)": [[667, "ivy.utils.exceptions.IvyIndexError.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[667, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "__init__() (ivy.utils.exceptions.ivyvalueerror method)": [[667, "ivy.utils.exceptions.IvyValueError.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[667, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[667, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[668, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[668, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[668, "module-ivy.utils.inspection"]], "ivy.utils.logging": [[669, "module-ivy.utils.logging"]], "set_logging_mode() (in module ivy.utils.logging)": [[669, "ivy.utils.logging.set_logging_mode"]], "unset_logging_mode() (in module ivy.utils.logging)": [[669, "ivy.utils.logging.unset_logging_mode"]], "profiler (class in ivy.utils.profiler)": [[670, "ivy.utils.profiler.Profiler"]], "__init__() (ivy.utils.profiler.profiler method)": [[670, "ivy.utils.profiler.Profiler.__init__"]], "ivy.utils.profiler": [[670, "module-ivy.utils.profiler"]], "print_stats (ivy.utils.profiler.profiler attribute)": [[670, "ivy.utils.profiler.Profiler.print_stats"]], "viz (ivy.utils.profiler.profiler attribute)": [[670, "ivy.utils.profiler.Profiler.viz"]], "cprint() (in module ivy.utils.verbosity)": [[671, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[671, "module-ivy.utils.verbosity"]], "applied libraries": [[719, "term-Applied-Libraries"]], "automatic code conversions": [[719, "term-Automatic-Code-Conversions"]], "backend handler": [[719, "term-Backend-Handler"]], "compositional functions": [[719, "term-Compositional-Functions"]], "convenience functions": [[719, "term-Convenience-Functions"]], "framework": [[719, "term-Framework"]], "framework handler": [[719, "term-Framework-Handler"]], "graph compiler": [[719, "term-Graph-Compiler"]], "ivy array": [[719, "term-Ivy-Array"]], "ivy backends": [[719, "term-Ivy-Backends"]], "ivy builder": [[719, "term-Ivy-Builder"]], "ivy compiler": [[719, "term-Ivy-Compiler"]], "ivy container": [[719, "term-Ivy-Container"]], "ivy frontends": [[719, "term-Ivy-Frontends"]], "ivy functional api": [[719, "term-Ivy-Functional-API"]], "ivy graph compiler": [[719, "term-Ivy-Graph-Compiler"]], "ivy transpiler": [[719, "term-Ivy-Transpiler"]], "mixed functions": [[719, "term-Mixed-Functions"]], "native array": [[719, "term-Native-Array"]], "nestable functions": [[719, "term-Nestable-Functions"]], "pipeline": [[719, "term-Pipeline"]], "primary functions": [[719, "term-Primary-Functions"]], "standalone functions": [[719, "term-Standalone-Functions"]], "submodule helper functions": [[719, "term-Submodule-Helper-Functions"]]}})